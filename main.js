const fs = require("fs");
const chalk = require("chalk");
const { isOwner, setPrefix, allowedPrefixes } = require("./config");
const axios = require("axios");
const fetch = require("node-fetch");
const FormData = require("form-data");
const { downloadContentFromMessage } = require("@whiskeysockets/baileys");
const os = require("os");
const { execSync } = require("child_process");
const path = require("path");
const { imageToWebp, videoToWebp, writeExifImg, writeExifVid, writeExif, toAudio } = require('./libs/fuctions');
const activeSessions = new Set();
const stickersDir = "./stickers";
const stickersFile = "./stickers.json";
function isUrl(string) {
  const regex = /^(https?:\/\/[^\s]+)/g;
  return regex.test(string);
}

const filePath = path.resolve('./activossubbots.json');
global.cachePlay10 = {}; // Guardar√° los datos de play10 por ID de mensaje
// Crear archivo con estructura inicial si no existe
if (!fs.existsSync(filePath)) {
  const estructuraInicial = {
    antilink: {}
    // futuro: modoAdmins: {}, antiarabe: {}
  };

  fs.writeFileSync(filePath, JSON.stringify(estructuraInicial, null, 2));
  console.log("‚úÖ Archivo activossubbots.json creado correctamente.");
}
//retrimgirüëá
const rePath = path.resolve("./re.json");
let comandosRestringidos = {};
if (fs.existsSync(rePath)) {
  try {
    comandosRestringidos = JSON.parse(fs.readFileSync(rePath, "utf-8"));
  } catch (e) {
    console.error("‚ùå Error al leer re.json:", e);
    comandosRestringidos = {};
  }
}
//retringir üëÜ
global.zrapi = `ex-9bf9dc0318`;
global.generatingCode = false;

if (!fs.existsSync(stickersDir)) fs.mkdirSync(stickersDir, { recursive: true });
if (!fs.existsSync(stickersFile)) fs.writeFileSync(stickersFile, JSON.stringify({}, null, 2));
//para los subot
const rutaLista = path.join(__dirname, "listasubots.json");

// Verificar y crear el archivo si no existe
if (!fs.existsSync(rutaLista)) {
  fs.writeFileSync(rutaLista, JSON.stringify([], null, 2));
  console.log("‚úÖ Archivo listasubots.json creado.");
} else {
  console.log("üìÇ Archivo listasubots.json ya existe.");
}
//para los subot
const prefixPath = path.resolve("prefixes.json");

// Crear archivo si no existe
if (!fs.existsSync(prefixPath)) {
  fs.writeFileSync(prefixPath, JSON.stringify({}, null, 2));
  console.log("‚úÖ prefixes.json creado correctamente.");
} else {
  console.log("‚úÖ prefixes.json ya existe.");
}
//grupo subot
const grupoPath = path.resolve("grupo.json");

// Verifica si el archivo existe, si no lo crea vac√≠o con estructura b√°sica
if (!fs.existsSync(grupoPath)) {
  fs.writeFileSync(grupoPath, JSON.stringify({}, null, 2));
  console.log("‚úÖ grupo.json creado correctamente.");
} else {
  console.log("‚úÖ grupo.json ya existe.");
}
//bienvemidad personalizada
const welcomePath = path.join(__dirname, 'welcome.json');

if (!fs.existsSync(welcomePath)) {
  fs.writeFileSync(welcomePath, JSON.stringify({}, null, 2));
  console.log("‚úÖ Archivo welcome.json creado exitosamente.");
}

//grupo subot
const rpgFile = "./rpg.json";
if (!fs.existsSync(rpgFile)) {
    const rpgDataInicial = { usuarios: {}, tiendaMascotas: [], tiendaPersonajes: [], mercadoPersonajes: [] };
    fs.writeFileSync(rpgFile, JSON.stringify(rpgDataInicial, null, 2));
}
let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
function saveRpgData() {
    fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));
}

const configFilePath = "./config.json";
function loadPrefix() {
    if (fs.existsSync(configFilePath)) {
        let configData = JSON.parse(fs.readFileSync(configFilePath, "utf-8"));
        global.prefix = configData.prefix || ".";
    } else {
        global.prefix = ".";
    }
}
loadPrefix();
console.log(`üìå Prefijo actual: ${global.prefix}`);

const guarFilePath = "./guar.json";
if (!fs.existsSync(guarFilePath)) fs.writeFileSync(guarFilePath, JSON.stringify({}, null, 2));

function saveMultimedia(key, data) {
    let guarData = JSON.parse(fs.readFileSync(guarFilePath, "utf-8"));
    guarData[key] = data;
    fs.writeFileSync(guarFilePath, JSON.stringify(guarData, null, 2));
}
function getMultimediaList() {
    return JSON.parse(fs.readFileSync(guarFilePath, "utf-8"));
}
function isValidPrefix(prefix) {
    return typeof prefix === "string" && (prefix.length === 1 || (prefix.length > 1 && [...prefix].length === 1));
}
function pickRandom(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}
async function fetchJson(url, options = {}) {
    const res = await fetch(url, options);
    return res.json();
}
async function remini(imageData, operation) {
    return new Promise(async (resolve, reject) => {
        const availableOperations = ["enhance", "recolor", "dehaze"];
        if (!availableOperations.includes(operation)) operation = availableOperations[0];
        const baseUrl = `https://inferenceengine.vyro.ai/${operation}.vyro`;
        const formData = new FormData();
        formData.append("image", Buffer.from(imageData), { filename: "enhance_image_body.jpg", contentType: "image/jpeg" });
        formData.append("model_version", 1, {
            "Content-Transfer-Encoding": "binary",
            contentType: "multipart/form-data; charset=utf-8"
        });
        formData.submit({
            url: baseUrl,
            host: "inferenceengine.vyro.ai",
            path: `/${operation}`,
            protocol: "https:",
            headers: {
                "User-Agent": "okhttp/4.9.3",
                "Connection": "Keep-Alive",
                "Accept-Encoding": "gzip"
            }
        }, function (err, res) {
            if (err) return reject(err);
            const chunks = [];
            res.on("data", chunk => chunks.push(chunk));
            res.on("end", () => resolve(Buffer.concat(chunks)));
            res.on("error", reject);
        });
    });
}
async function isAdmin(sock, chatId, sender) {
    try {
        const groupMetadata = await sock.groupMetadata(chatId);
        const admins = groupMetadata.participants.filter(p => p.admin).map(p => p.id);
        return admins.includes(sender.replace(/[^0-9]/g, '') + "@s.whatsapp.net");
    } catch (error) {
        console.error("‚ö†Ô∏è Error verificando administrador:", error);
        return false;
    }
}
function savePrefix(newPrefix) {
    global.prefix = newPrefix;
    fs.writeFileSync("./config.json", JSON.stringify({ prefix: newPrefix }, null, 2));
    console.log(chalk.green(`‚úÖ Prefijo cambiado a: ${chalk.yellow.bold(newPrefix)}`));
}
async function handleDeletedMessage(sock, msg) {
    if (!global.viewonce) return;
    const chatId = msg.key.remoteJid;
    const deletedMessage = msg.message;
    if (deletedMessage) {
        await sock.sendMessage(chatId, {
            text: `‚ö†Ô∏è *Mensaje eliminado reenviado:*

${deletedMessage.conversation || deletedMessage.extendedTextMessage?.text || ''}`
        });
        if (deletedMessage.imageMessage) {
            const imageBuffer = await downloadContentFromMessage(deletedMessage.imageMessage, 'image');
            await sock.sendMessage(chatId, { image: imageBuffer }, { quoted: msg });
        } else if (deletedMessage.audioMessage) {
            const audioBuffer = await downloadContentFromMessage(deletedMessage.audioMessage, 'audio');
            await sock.sendMessage(chatId, { audio: audioBuffer }, { quoted: msg });
        } else if (deletedMessage.videoMessage) {
            const videoBuffer = await downloadContentFromMessage(deletedMessage.videoMessage, 'video');
            await sock.sendMessage(chatId, { video: videoBuffer }, { quoted: msg });
        }
    }
}
function loadPlugins() {
    const plugins = [];
    const pluginDir = path.join(__dirname, 'plugins');
    if (!fs.existsSync(pluginDir)) return plugins;
    const files = fs.readdirSync(pluginDir).filter(f => f.endsWith('.js'));
    for (const file of files) {
        const plugin = require(path.join(pluginDir, file));
        if (plugin && plugin.command) plugins.push(plugin);
    }
    return plugins;
}

const plugins = loadPlugins();

async function handleCommand(sock, msg, command, args, sender) {
    const lowerCommand = command.toLowerCase();
    const text = args.join(" ");
    global.viewonce = true;

    sock.sendImageAsSticker = async (jid, path, quoted, options = {}) => {
        let buff = Buffer.isBuffer(path)
            ? path
            : /^data:.*?\/.*?;base64,/i.test(path)
                ? Buffer.from(path.split`,`[1], 'base64')
                : /^https?:\/\//.test(path)
                    ? await (await getBuffer(path))
                    : fs.existsSync(path)
                        ? fs.readFileSync(path)
                        : Buffer.alloc(0);
        let buffer;
        if (options && (options.packname || options.author)) {
            buffer = await writeExifImg(buff, options);
        } else {
            buffer = await imageToWebp(buff);
        }
        await sock.sendMessage(jid, { sticker: { url: buffer }, ...options }, {
            quoted: quoted ? quoted : msg,
            ephemeralExpiration: 24 * 60 * 100,
            disappearingMessagesInChat: 24 * 60 * 100
        });
        return buffer;
    };

    const plugin = plugins.find(p => p.command.includes(lowerCommand));
    if (plugin) {
        return plugin(msg, {
            conn: sock,
            text,
            args,
            command: lowerCommand,
            usedPrefix: global.prefix
        });
    }

    switch (lowerCommand) {

case 'play': {
  const chatId = msg.key.remoteJid;
  const yts = require('yt-search');
  const axios = require('axios');

  if (!text) {
    await sock.sendMessage(chatId, {
      text: `‚ú≥Ô∏è Usa el comando correctamente:\n\nüìå Ejemplo: *${global.prefix}play* Bad Bunny - Yonaguni`
    }, { quoted: msg });
    break;
  }

  await sock.sendMessage(chatId, {
    react: { text: '‚è≥', key: msg.key }
  });

  try {
    const search = await yts(text);
    const video = search.videos[0];
    if (!video) throw new Error("No se encontraron resultados");

    const videoUrl = video.url;
    const title = video.title;
    const duration = video.timestamp;
    const views = video.views.toLocaleString();
    const author = video.author.name;
    const thumbnail = video.thumbnail;

    const info = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë‚ú¶ ùòºùôïùôêùôçùòº ùôêùóπùóçùóãùóÆ & ùòæùô§ùôßùô©ùôñùô£ùôñ ‚ú¶
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
üìÄ *ùôÑùóªùó≥ùóº ùó±ùó≤ùóπ ùòÉùó∂ùó±ùó≤ùóº:*  
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îú üéº *T√≠tulo:* ${title}
‚îú ‚è±Ô∏è *Duraci√≥n:* ${duration}
‚îú üëÅÔ∏è *Vistas:* ${views}
‚îú üë§ *Autor:* ${author}
‚îî üîó *Link:* ${videoUrl}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
üì• *Opciones de Descargas si usas termux o est√°s en otros host que no sea Sky Ultra Plus:*  
‚î£ üéµ *Audio:* _${global.prefix}play5 boza hoy_
‚î£ üé• *Video:* _${global.prefix}play6 boza hoy_
‚îó ‚ö†Ô∏è *¬øNo se reproduce?* Usa _${global.prefix}ff_
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
   ñ•î Azura Ultra & Cortana ñ•î
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ú≥Ô∏è *Para descargar desde este mensaje:*
‚Ä¢ Responde con *1* o *audio* para recibir la m√∫sica.
‚Ä¢ Responde con *2* o *video* para recibir el video.
‚Ä¢ Responde con *3* o *musicadoc* para recibir m√∫sica como documento.
‚Ä¢ Responde con *4* o *videodoc* para recibir el video como documento.
`;

    const sent = await sock.sendMessage(chatId, {
      image: { url: thumbnail },
      caption: info
    }, { quoted: msg });

    global.cachePlay10[sent.key.id] = {
      videoUrl: videoUrl,
      title: title,
      tipo: 'youtube'
    };

  } catch (e) {
    console.error("‚ùå Error en play10:", e);
    await sock.sendMessage(chatId, {
      text: `‚ùå Error al procesar el video.`
    }, { quoted: msg });
  }

  break;
}

case 'play2': {
  const chatId = msg.key.remoteJid;
  const yts = require('yt-search');
  const axios = require('axios');

  if (!text) {
    await sock.sendMessage(chatId, {
      text: `‚ú≥Ô∏è Usa el comando correctamente:\n\nüìå Ejemplo: *${global.prefix}play2* Bad Bunny - Yonaguni`
    }, { quoted: msg });
    break;
  }

  await sock.sendMessage(chatId, {
    react: { text: '‚è≥', key: msg.key }
  });

  try {
    const search = await yts(text);
    const video = search.videos[0];
    if (!video) throw new Error("No se encontraron resultados");

    const videoUrl = video.url;
    const title = video.title;
    const duration = video.timestamp;
    const views = video.views.toLocaleString();
    const author = video.author.name;
    const thumbnail = video.thumbnail;

    const info = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë‚ú¶ ùòºùôïùôêùôçùòº ùôêùóπùóçùóãùóÆ & ùòæùô§ùôßùô©ùôñùô£ùôñ ‚ú¶
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
üìÄ *ùôÑùóªùó≥ùóº ùó±ùó≤ùóπ ùòÉùó∂ùó±ùó≤ùóº:*  
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îú üéº *T√≠tulo:* ${title}
‚îú ‚è±Ô∏è *Duraci√≥n:* ${duration}
‚îú üëÅÔ∏è *Vistas:* ${views}
‚îú üë§ *Autor:* ${author}
‚îî üîó *Link:* ${videoUrl}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
üì• *Opciones de Descargas si usas termux o est√°s en otros host que no sea Sky Ultra Plus:*  
‚î£ üéµ *Audio:* _${global.prefix}play5 boza hoy_
‚î£ üé• *Video:* _${global.prefix}play6 boza hoy_
‚îó ‚ö†Ô∏è *¬øNo se reproduce?* Usa _${global.prefix}ff_
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
   ñ•î Azura Ultra & Cortana ñ•î
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚ú≥Ô∏è *Para descargar desde este mensaje:*
‚Ä¢ Responde con *1* o *audio* para recibir la m√∫sica.
‚Ä¢ Responde con *2* o *video* para recibir el video.
‚Ä¢ Responde con *3* o *musicadoc* para recibir m√∫sica como documento.
‚Ä¢ Responde con *4* o *videodoc* para recibir el video como documento.
`;

    const sent = await sock.sendMessage(chatId, {
      image: { url: thumbnail },
      caption: info
    }, { quoted: msg });

    global.cachePlay10[sent.key.id] = {
      videoUrl: videoUrl,
      title: title,
      tipo: 'youtube'
    };

  } catch (e) {
    console.error("‚ùå Error en play10:", e);
    await sock.sendMessage(chatId, {
      text: `‚ùå Error al procesar el video.`
    }, { quoted: msg });
  }

  break;
}        
        
case "menuaudio": {
    try {
        // Reacci√≥n antes de enviar el men√∫
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "üìÇ", key: msg.key } 
        });

        // Verificar si el archivo guar.json existe
        if (!fs.existsSync("./guar.json")) {
            return sock.sendMessage(
                msg.key.remoteJid,
                { text: "‚ùå *Error:* No hay multimedia guardado a√∫n. Usa `.guar` para guardar algo primero." },
                { quoted: msg }
            );
        }

        // Leer archivo guar.json
        let guarData = JSON.parse(fs.readFileSync("./guar.json", "utf-8"));
        
        let listaMensaje = `‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ  üìÇ *MEN√ö DE MULTIMEDIA*  
‚îÉ  üîë *Palabras Clave Guardadas*  
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

üìå *¬øC√≥mo recuperar un archivo guardado?*  
Usa el comando:  
‚û°Ô∏è _${global.prefix}g palabra_clave_  
( *o puedes solo escribirlas tambien y bot las envia tambien* ) 

üìÇ *Lista de palabras clave guardadas:*  
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;

        let claves = Object.keys(guarData);
        
        if (claves.length === 0) {
            listaMensaje += "üö´ *No hay palabras clave guardadas.*\n";
        } else {
            claves.forEach((clave, index) => {
                listaMensaje += `*${index + 1}.* ${clave}\n`;
            });
        }

        listaMensaje += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  
üì• *Otros Comandos de Multimedia*  

${global.prefix}guar ‚Üí Guarda archivos con una clave.  
${global.prefix}g ‚Üí Recupera archivos guardados.  
${global.prefix}kill ‚Üí Elimina un archivo guardado.  

üí° *Azura Ultra & Cortana sigue mejorando. Pronto m√°s funciones.*  
‚öôÔ∏è *Desarrollado por Russell xz* üöÄ`;

        // Enviar el men√∫ con video como GIF
        await sock.sendMessage2(msg.key.remoteJid,
  {
    image: { url: "https://cdn.dorratz.com/files/1744666582539.jpg" }, 
    caption: listaMensaje 
  },
  msg
)
    } catch (error) {
        console.error("‚ùå Error al enviar el men√∫2:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al mostrar el men√∫2. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });
    }
    break;
}    
       case 'nsfwwaifu': {
  const chatId = msg.key.remoteJid;

  // Reacci√≥n de carga
  await sock.sendMessage(chatId, {
    react: { text: 'üîÑ', key: msg.key }
  });

  try {
    const axios = require('axios');
    // Llamada a la API
    const res = await axios.get('https://api.waifu.pics/nsfw/waifu');
    const imageUrl = res.data.url;

    // Enviar la imagen
    await sock.sendMessage(chatId, {
      image: { url: imageUrl },
      caption: 'üíñ Aqu√≠ tienes tu Waifu NSFW üíñ'
    }, { quoted: msg });

    // Reacci√≥n de √©xito
    await sock.sendMessage(chatId, {
      react: { text: '‚úÖ', key: msg.key }
    });

  } catch (err) {
    console.error('‚ùå Error en comando nsfwwaifu:', err);
    await sock.sendMessage(chatId, {
      text: '‚ùå No pude obtener una Waifu en este momento. Intenta m√°s tarde.'
    }, { quoted: msg });
  }
}
break; 
case 'pack2': {
  const chatId = msg.key.remoteJid;

  // URLs de ejemplo
  const urls = [
    'https://telegra.ph/file/c0da7289bee2d97048feb.jpg',
    'https://telegra.ph/file/b8564166f9cac4d843db3.jpg',
    'https://telegra.ph/file/6e1a6dcf1c91bf62d3945.jpg',
    'https://telegra.ph/file/0224c1ecf6b676dda3ac0.jpg',
    'https://telegra.ph/file/b71b8f04772f1b30355f1.jpg'
  ];

  // Funci√≥n para elegir una URL al azar
  const getRandom = (arr) => arr[Math.floor(Math.random() * arr.length)];
  const imageUrl = getRandom(urls);

  try {
    // Reacci√≥n de carga
    await sock.sendMessage(chatId, {
      react: { text: 'üîÑ', key: msg.key }
    });

    // Enviar la imagen
    await sock.sendMessage(chatId, {
      image: { url: imageUrl },
      caption: 'ü•µ Aqu√≠ tienes m√°s pack üòè'
    }, { quoted: msg });

    // Reacci√≥n de √©xito
    await sock.sendMessage(chatId, {
      react: { text: '‚úÖ', key: msg.key }
    });

  } catch (err) {
    console.error('‚ùå Error en comando pack2:', err);
    await sock.sendMessage(chatId, {
      text: '‚ùå Ocurri√≥ un error al enviar la imagen.'
    }, { quoted: msg });
  }
}
break;
      

case "modoadmins": {
  try {
    const senderNumber = (msg.key.participant || msg.key.remoteJid).replace(/[@:\-s.whatsapp.net]/g, "");
    const isBotMessage = msg.key.fromMe;
    const chatId = msg.key.remoteJid;
    const isGroup = chatId.endsWith("@g.us");

    if (!isGroup) {
      await sock.sendMessage(chatId, {
        text: "‚ùå Este comando solo se puede usar en grupos."
      }, { quoted: msg });
      break;
    }

    const metadata = await sock.groupMetadata(chatId);
    const participant = metadata.participants.find(p => p.id.includes(senderNumber));
    const isAdmin = participant?.admin === "admin" || participant?.admin === "superadmin";

    if (!isAdmin && !isOwner(senderNumber) && !isBotMessage) {
      await sock.sendMessage(chatId, {
        text: "‚ùå Solo administradores o el owner pueden usar este comando."
      }, { quoted: msg });
      break;
    }

    const messageText = msg.message?.conversation || msg.message?.extendedTextMessage?.text || "";
    const args = messageText.trim().split(" ").slice(1);

    if (!["on", "off"].includes(args[0])) {
      await sock.sendMessage(chatId, {
        text: "‚ú≥Ô∏è Usa correctamente:\n\n.modoadmins on / off"
      }, { quoted: msg });
      break;
    }

    const fs = require("fs");
    const path = require("path");
    const activosPath = path.join(__dirname, "activos.json");
    const activos = fs.existsSync(activosPath)
      ? JSON.parse(fs.readFileSync(activosPath))
      : {};

    activos.modoAdmins = activos.modoAdmins || {};

    if (args[0] === "on") {
      activos.modoAdmins[chatId] = true;
    } else {
      delete activos.modoAdmins[chatId];
    }

    fs.writeFileSync(activosPath, JSON.stringify(activos, null, 2));

    await sock.sendMessage(chatId, {
      text: `üëë Modo admins *${args[0] === "on" ? "activado" : "desactivado"}* en este grupo.`
    }, { quoted: msg });

  } catch (err) {
    console.error("‚ùå Error en modoadmins:", err);
    await sock.sendMessage(msg.key.remoteJid, {
      text: "‚ùå Ocurri√≥ un error al cambiar el modo admins."
    }, { quoted: msg });
  }
  break;
}
      
case "modoprivado": {
  try {
    const senderNumber = (msg.key.participant || msg.key.remoteJid).replace(/[@:\-s.whatsapp.net]/g, "");
    const isBotMessage = msg.key.fromMe;

    if (!isOwner(senderNumber) && !isBotMessage) {
      await sock.sendMessage(msg.key.remoteJid, {
        text: "‚ùå Este comando es solo para el *due√±o del bot*."
      }, { quoted: msg });
      break;
    }

    const messageText = msg.message?.conversation || msg.message?.extendedTextMessage?.text || "";
    const args = messageText.trim().split(" ").slice(1);

    if (!["on", "off"].includes(args[0])) {
      await sock.sendMessage(msg.key.remoteJid, {
        text: "‚ú≥Ô∏è Usa correctamente:\n\n.modoprivado on / off"
      }, { quoted: msg });
      break;
    }

    const fs = require("fs");
    const path = require("path");
    const activosPath = path.join(__dirname, "activos.json");
    const activos = fs.existsSync(activosPath)
      ? JSON.parse(fs.readFileSync(activosPath))
      : {};

    activos.modoPrivado = args[0] === "on";
    fs.writeFileSync(activosPath, JSON.stringify(activos, null, 2));

    await sock.sendMessage(msg.key.remoteJid, {
      text: `üîê Modo privado *${args[0] === "on" ? "activado" : "desactivado"}*.`
    }, { quoted: msg });

  } catch (err) {
    console.error("‚ùå Error en modoprivado:", err);
    await sock.sendMessage(msg.key.remoteJid, {
      text: "‚ùå Ocurri√≥ un error al activar el modo privado."
    }, { quoted: msg });
  }
  break;
}
      
case "cargabots":
    try {
        const senderNumber = (msg.key.participant || msg.key.remoteJid).replace(/[@:\-s.whatsapp.net]/g, "");
        const botNumber = sock.user.id.split(":")[0];
        const isBotMessage = msg.key.fromMe;

        if (!isOwner(senderNumber) && !isBotMessage) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: "‚ùå Este comando es solo para el *due√±o del bot*."
            }, { quoted: msg });
            return;
        }
  // Reacci√≥n inicial
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚ôªÔ∏è", key: msg.key }
        });

        const fs = require("fs");
        const path = require("path");
        const pino = require("pino");
        const {
            default: makeWASocket,
            useMultiFileAuthState,
            fetchLatestBaileysVersion,
            makeCacheableSignalKeyStore
        } = require("@whiskeysockets/baileys");

        const subbotFolder = "./subbots";
        const reconectados = [];
        const eliminados = [];

        if (!fs.existsSync(subbotFolder)) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: "‚ö†Ô∏è No hay carpeta de subbots."
            }, { quoted: msg });
            return;
        }

        const subDirs = fs.readdirSync(subbotFolder).filter(dir =>
            fs.existsSync(`${subbotFolder}/${dir}/creds.json`)
        );

        if (subDirs.length === 0) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: "‚ö†Ô∏è No hay subbots activos para verificar."
            }, { quoted: msg });
            return;
        }

        for (const dir of subDirs) {
            const sessionPath = path.join(subbotFolder, dir);
            try {
                const { state, saveCreds } = await useMultiFileAuthState(sessionPath);
                const { version } = await fetchLatestBaileysVersion();

                const socky = makeWASocket({
                    version,
                    logger: pino({ level: "silent" }),
                    auth: {
                        creds: state.creds,
                        keys: makeCacheableSignalKeyStore(state.keys, pino({ level: "silent" })),
                    },
                    browser: ["Azura Subbot", "Firefox", "2.0"],
                });

                const conectado = await new Promise((resolve) => {
                    let resolved = false;
                    const timeout = setTimeout(() => {
                        if (!resolved) {
                            resolved = true;
                            resolve(false);
                        }
                    }, 10000); // Espera hasta 10 segundos

                    socky.ev.on("connection.update", ({ connection }) => {
                        if (connection === "open" && !resolved) {
                            resolved = true;
                            clearTimeout(timeout);
                            socky.ev.on("creds.update", saveCreds);
                            resolve(true);
                        }
                        if (connection === "close" && !resolved) {
                            resolved = true;
                            clearTimeout(timeout);
                            resolve(false);
                        }
                    });
                });

                if (conectado) {
                    reconectados.push(dir);
                } else {
                    fs.rmSync(sessionPath, { recursive: true, force: true });
                    eliminados.push(dir);
                }

            } catch (e) {
                eliminados.push(dir);
                fs.rmSync(sessionPath, { recursive: true, force: true });
            }
        }

        const resultado = `
‚úÖ *Subbots Reconectados:*
${reconectados.length ? reconectados.map(d => `- ${d}`).join("\n") : "Ninguno"}

‚ùå *Subbots Eliminados (fallo de conexi√≥n):*
${eliminados.length ? eliminados.map(d => `- ${d}`).join("\n") : "Ninguno"}
        `.trim();

        await sock.sendMessage(msg.key.remoteJid, {
            text: resultado
        }, { quoted: msg });

        // Reacci√≥n final
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚úÖ", key: msg.key }
        });

    } catch (error) {
        console.error("‚ùå Error en el comando cargabots:", error);
        await sock.sendMessage(msg.key.remoteJid, {
            text: "‚ùå *Ocurri√≥ un error al verificar los subbots.*"
        }, { quoted: msg });
    }
    break;

case "sercode":
case "code":
case "jadibot":
case "serbot":
case "qr": {
  const {
    default: makeWASocket,
    useMultiFileAuthState,
    fetchLatestBaileysVersion,
    makeCacheableSignalKeyStore,
    DisconnectReason
  } = require("@whiskeysockets/baileys");
  const QRCode = require("qrcode");
  const { Boom } = require("@hapi/boom");
  const path = require("path");
  const pino = require("pino");
  const fs = require("fs");
  const { cargarSubbots } = require("./index");

  let sentCodeMessage = false;
  const usarPairingCode = ["sercode", "code"].includes(command);

  function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async function serbot() {
    try {
      const number = msg.key?.participant || msg.key.remoteJid;
      const sessionDir = path.join(__dirname, "subbots");
      const sessionPath = path.join(sessionDir, number);
      const rid = number.split("@")[0];

      if (!fs.existsSync(sessionDir)) fs.mkdirSync(sessionDir, { recursive: true });

      await sock.sendMessage(msg.key.remoteJid, {
        react: { text: '‚åõ', key: msg.key }
      });

      const { state, saveCreds } = await useMultiFileAuthState(sessionPath);
      const { version } = await fetchLatestBaileysVersion();
      const logger = pino({ level: "silent" });

      const socky = makeWASocket({
        version,
        logger,
        auth: {
          creds: state.creds,
          keys: makeCacheableSignalKeyStore(state.keys, logger)
        },
        printQRInTerminal: !usarPairingCode,
        browser: ['Windows', 'Chrome']
      });

      let reconnectionAttempts = 0;
      const maxReconnectionAttempts = 3;

      socky.ev.on("connection.update", async ({ qr, connection, lastDisconnect }) => {
        if (qr && !sentCodeMessage) {
          if (usarPairingCode) {
            const code = await socky.requestPairingCode(rid);
            await sock.sendMessage(msg.key.remoteJid, {
              video: { url: "https://cdn.russellxz.click/b0cbbbd3.mp4" },
              caption: "üîê *C√≥digo generado:*\nAbre WhatsApp > Vincular dispositivo y pega el siguiente c√≥digo:",
              gifPlayback: true
            }, { quoted: msg });
            await sleep(1000);
            await sock.sendMessage(msg.key.remoteJid, {
              text: "```" + code + "```"
            }, { quoted: msg });
          } else {
            const qrImage = await QRCode.toBuffer(qr);
await sock.sendMessage(msg.key.remoteJid, {
  image: qrImage,
  caption: `üì≤ Escanea este c√≥digo QR desde *WhatsApp > Vincular dispositivo* para conectarte como subbot.`
}, { quoted: msg });
          }
          sentCodeMessage = true;
        }

        switch (connection) {
          case "open":
            await sock.sendMessage(msg.key.remoteJid, {
              text: `‚ï≠‚îÄ‚îÄ‚îÄ„Äî *ü§ñ SUBBOT CONECTADO* „Äï‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ
‚îÇ ‚úÖ *Bienvenido a Azura Ultra 2.0*
‚îÇ
‚îÇ Ya eres parte del mejor sistema de juegos RPG
‚îÇ
‚îÇ üõ†Ô∏è Usa los siguientes comandos para comenzar:
‚îÇ
‚îÇ ${global.prefix}help
‚îÇ ${global.prefix}menu
‚îÇ
‚îÇ ‚öîÔ∏è Disfruta de las funciones del subbot
‚îÇ y conquista el mundo digital
‚îÇ
‚îÇ ‚ÑπÔ∏è Por defecto, el subbot est√° en *modo privado*,
‚îÇ lo que significa que *solo t√∫ puedes usarlo*.
‚îÇ
‚îÇ Usa el comando:
‚îÇ #menu
‚îÇ (para ver configuraciones y c√≥mo hacer
‚îÇ que otras personas puedan usarlo.)
‚îÇ
‚îÇ ‚ûï Los prefijos por defecto son: *. y #*
‚îÇ Si quieres cambiarlos, usa:
‚îÇ #setprefix
‚îÇ
‚îÇ üîÑ Si notas que el subbot *no responde al instante*
‚îÇ o tarda mucho *aunque est√© conectado*, no te preocupes.
‚îÇ Puede ser un fallo temporal.
‚îÇ
‚îÇ En ese caso, simplemente ejecuta:
‚îÇ #delbots
‚îÇ para eliminar tu sesi√≥n y luego vuelve a conectarte usando:
‚îÇ #serbot o para code si no quieres qr usa: #code o #sercode. 
‚îÇ hasta que se conecte correctamente.
‚îÇ
‚îÇ Esto ayuda a establecer una conexi√≥n *estable y funcional*.
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶ *Sky Ultra Plus* ‚ú¶‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`
            }, { quoted: msg });
          //  await joinChannels(socky);
            await sock.sendMessage(msg.key.remoteJid, {
              react: { text: "üîÅ", key: msg.key }
            });
            await cargarSubbots();
            break;

          case "close": {
            const reason = new Boom(lastDisconnect?.error)?.output.statusCode || lastDisconnect?.error?.output?.statusCode;
            const messageError = DisconnectReason[reason] || `C√≥digo desconocido: ${reason}`;

            const eliminarSesion = () => {
              if (fs.existsSync(sessionPath)) {
                fs.rmSync(sessionPath, { recursive: true, force: true });
              }
            };

            switch (reason) {
              case 401:
              case DisconnectReason.badSession:
              case DisconnectReason.loggedOut:
                await sock.sendMessage(msg.key.remoteJid, {
                  text: `‚ö†Ô∏è *Sesi√≥n eliminada.*
${messageError}
Usa ${global.prefix}serbot para volver a conectar.`
                }, { quoted: msg });
                eliminarSesion();
                break;

              case DisconnectReason.restartRequired:
                if (reconnectionAttempts < maxReconnectionAttempts) {
                  reconnectionAttempts++;
                  await sleep(3000);
                  await serbot();
                  return;
                }
                await sock.sendMessage(msg.key.remoteJid, {
                  text: `‚ö†Ô∏è *Reintentos de conexi√≥n fallidos.*`
                }, { quoted: msg });
                break;

              case DisconnectReason.connectionReplaced:
                console.log(`‚ÑπÔ∏è Sesi√≥n reemplazada por otra instancia.`);
                break;

              default:
                await sock.sendMessage(msg.key.remoteJid, {
                  text: `‚ï≠‚îÄ‚îÄ‚îÄ„Äî *‚ö†Ô∏è SUBBOT* „Äï‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ
‚îÇ‚ö†Ô∏è *Problema de conexi√≥n detectado:*
‚îÇ ${messageError}
‚îÇ Intentando reconectar...
‚îÇ
‚îÇ üîÑ Si seguir en problemas, En ese caso, simplemente ejecuta:
‚îÇ #delbots
‚îÇ para eliminar tu sesi√≥n y luego vuelve a conectarte usando:
‚îÇ #serbot o para code si no quieres qr usa: #code o #sercode. 
‚îÇ hasta que se conecte correctamente.
‚îÇ
‚îÇ Esto ayuda a establecer una conexi√≥n *estable y funcional*.
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶ *Sky Ultra Plus* ‚ú¶‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`
                }, { quoted: msg });
                break;
            }
            break;
          }
        }
      });

      socky.ev.on("creds.update", saveCreds);

    } catch (e) {
      console.error("‚ùå Error en serbot:", e);
      await sock.sendMessage(msg.key.remoteJid, {
        text: `‚ùå *Error inesperado:* ${e.message}`
      }, { quoted: msg });
    }
  }

  await serbot();
}
break;

case 'tovideo': {
  const fs = require('fs');
  const path = require('path');
  const axios = require('axios');
  const { downloadContentFromMessage } = require('@whiskeysockets/baileys');
  const { spawn } = require('child_process');
  const FormData = require('form-data');
  const { promisify } = require('util');
  const { pipeline } = require('stream');
  const streamPipeline = promisify(pipeline);

  // Validar que se responda a un sticker
  const quoted = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage?.stickerMessage;
  if (!quoted) {
    await sock.sendMessage(msg.key.remoteJid, {
      text: "‚ö†Ô∏è Responde a un sticker para convertirlo a video."
    }, { quoted: msg });
    break;
  }

  await sock.sendMessage(msg.key.remoteJid, {
    react: { text: "‚è≥", key: msg.key }
  });

  try {
    const tmpDir = path.join(__dirname, 'tmp');
    if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);

    const inputPath = path.join(tmpDir, `${Date.now()}.webp`);
    const outputPath = path.join(tmpDir, `${Date.now()}_out.mp4`);

    // Descargar el sticker
    const stream = await downloadContentFromMessage(quoted, 'sticker');
    const writer = fs.createWriteStream(inputPath);
    for await (const chunk of stream) writer.write(chunk);
    writer.end();

    // Subir a russell.click
    const form = new FormData();
    form.append("file", fs.createReadStream(inputPath));
    const upload = await axios.post("https://cdn.russellxz.click/upload.php", form, {
      headers: form.getHeaders()
    });

    if (!upload.data?.url) throw new Error("No se pudo subir el sticker.");

    // Pasar la URL a la API para convertir a video
    const conv = await axios.get(`https://api.neoxr.eu/api/webp2mp4?url=${encodeURIComponent(upload.data.url)}&apikey=russellxz`);
    const videoUrl = conv.data?.data?.url;
    if (!videoUrl) throw new Error("No se pudo convertir el sticker a video.");

    // Descargar el video convertido
    const res = await axios.get(videoUrl, { responseType: 'stream' });
    const tempMp4 = path.join(tmpDir, `${Date.now()}_orig.mp4`);
    await streamPipeline(res.data, fs.createWriteStream(tempMp4));

    // Convertir con ffmpeg para compatibilidad
    await new Promise((resolve, reject) => {
      const ff = spawn('ffmpeg', ['-i', tempMp4, '-c:v', 'libx264', '-preset', 'fast', '-pix_fmt', 'yuv420p', outputPath]);
      ff.on('exit', code => code === 0 ? resolve() : reject(new Error("Error en ffmpeg")));
    });

    // Enviar el video final
    await sock.sendMessage(msg.key.remoteJid, {
      video: fs.readFileSync(outputPath),
      mimetype: 'video/mp4',
      caption: '‚úÖ Sticker convertido a video.\n\n¬© Azura Ultra 2.0'
    }, { quoted: msg });

    fs.unlinkSync(inputPath);
    fs.unlinkSync(tempMp4);
    fs.unlinkSync(outputPath);

    await sock.sendMessage(msg.key.remoteJid, {
      react: { text: "‚úÖ", key: msg.key }
    });

  } catch (e) {
    console.error(e);
    await sock.sendMessage(msg.key.remoteJid, {
      text: `‚ùå *Error:* ${e.message}`
    }, { quoted: msg });
    await sock.sendMessage(msg.key.remoteJid, {
      react: { text: "‚ùå", key: msg.key }
    });
  }

  break;
}
      
case 'tourl': {
    const fs = require('fs');
    const path = require('path');
    const FormData = require('form-data');
    const axios = require('axios');
    const ffmpeg = require('fluent-ffmpeg');
    const { downloadContentFromMessage } = require('@whiskeysockets/baileys');

    const quotedMsg = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage;

    const m = {
        reply: (text) => sock.sendMessage(msg.key.remoteJid, { text }, { quoted: msg }),
        react: (emoji) => sock.sendMessage(msg.key.remoteJid, { react: { text: emoji, key: msg.key } })
    };

    if (!quotedMsg) {
        await m.reply('‚ö†Ô∏è *Responde a una imagen, video, sticker, nota de voz o audio para subirlo.*');
        break;
    }

    await m.react('‚òÅÔ∏è');

    try {
        let typeDetected = null;
        let mediaMessage = null;

        if (quotedMsg.imageMessage) {
            typeDetected = 'image';
            mediaMessage = quotedMsg.imageMessage;
        } else if (quotedMsg.videoMessage) {
            typeDetected = 'video';
            mediaMessage = quotedMsg.videoMessage;
        } else if (quotedMsg.stickerMessage) {
            typeDetected = 'sticker';
            mediaMessage = quotedMsg.stickerMessage;
        } else if (quotedMsg.audioMessage) {
            typeDetected = 'audio';
            mediaMessage = quotedMsg.audioMessage;
        } else {
            throw new Error("‚ùå Solo se permiten im√°genes, videos, stickers, audios o notas de voz.");
        }

        const tmpDir = path.join(__dirname, 'tmp');
        if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);

        const rawExt = typeDetected === 'sticker' ? 'webp' :
            mediaMessage.mimetype ? mediaMessage.mimetype.split('/')[1].split(';')[0] : 'bin';

        const rawPath = path.join(tmpDir, `${Date.now()}_input.${rawExt}`);
        const stream = await downloadContentFromMessage(mediaMessage, typeDetected === 'sticker' ? 'sticker' : typeDetected);
        const writeStream = fs.createWriteStream(rawPath);
        for await (const chunk of stream) {
            writeStream.write(chunk);
        }
        writeStream.end();

        await new Promise(resolve => writeStream.on('finish', resolve));

        const stats = fs.statSync(rawPath);
        const maxSize = 200 * 1024 * 1024;
        if (stats.size > maxSize) {
            fs.unlinkSync(rawPath);
            throw new Error('‚ö†Ô∏è El archivo excede el l√≠mite de 200MB.');
        }

        let finalPath = rawPath;

        const isAudioToConvert = typeDetected === 'audio' && (rawExt === 'ogg' || rawExt === 'm4a' || rawExt === 'mpeg');
        if (isAudioToConvert) {
            finalPath = path.join(tmpDir, `${Date.now()}_converted.mp3`);
            await new Promise((resolve, reject) => {
                ffmpeg(rawPath)
                    .audioCodec('libmp3lame')
                    .toFormat('mp3')
                    .on('end', resolve)
                    .on('error', reject)
                    .save(finalPath);
            });
            fs.unlinkSync(rawPath);
        }

        const form = new FormData();
        form.append('file', fs.createReadStream(finalPath));

        const res = await axios.post('https://cdn.russellxz.click/upload.php', form, {
            headers: form.getHeaders()
        });

        fs.unlinkSync(finalPath);

        if (!res.data || !res.data.url) throw new Error('‚ùå No se pudo subir el archivo.');

        await m.reply(`‚úÖ *Archivo subido exitosamente:*\n${res.data.url}`);
        await m.react('‚úÖ');

    } catch (err) {
        await m.reply(`‚ùå *Error:* ${err.message}`);
        await m.react('‚ùå');
    }

    break;
              }

        
case 'carga': {
  if (!isOwner) {
    await sock.sendMessage(msg.key.remoteJid, {
      text: "‚õî Este comando es solo para el Owner."
    }, { quoted: msg });
    break;
  }

  const fs = require('fs');
  const { exec } = require('child_process');
  const lastRestarterFile = "./lastRestarter.json";

  // Verificar si existe el archivo; si no, crearlo.
  if (!fs.existsSync(lastRestarterFile)) {
    fs.writeFileSync(lastRestarterFile, JSON.stringify({ chatId: "" }, null, 2));
  }

  exec('git pull', (error, stdout, stderr) => {
    if (error) {
      sock.sendMessage(msg.key.remoteJid, {
        text: `‚ùå Error al actualizar: ${error.message}`
      }, { quoted: msg });
      return;
    }
    const output = stdout || stderr;
    if (output.includes("Already up to date")) {
      sock.sendMessage(msg.key.remoteJid, {
        text: `‚úÖ Actualizaci√≥n completada: Ya est√° al d√≠a.`
      }, { quoted: msg });
    } else {
      const message = `‚úÖ Actualizaci√≥n completada:\n\n${output}\n\nüîÑ Reiniciando el servidor...`;
      
      // Enviar reacci√≥n de reinicio
      sock.sendMessage(msg.key.remoteJid, {
        react: { text: "üîÑ", key: msg.key }
      });
      
      // Enviar mensaje de notificaci√≥n
      sock.sendMessage(msg.key.remoteJid, {
        text: message
      }, { quoted: msg });
      
      // Guardar el chat del √∫ltimo restarter
      fs.writeFileSync(lastRestarterFile, JSON.stringify({ chatId: msg.key.remoteJid }, null, 2));
      
      // Reiniciar el bot (aseg√∫rate de usar un gestor de procesos que lo reactive)
      setTimeout(() => {
        process.exit(1);
      }, 3000);
    }
  });
  break;
}
      
    
case 'play222': {
    const axios = require('axios');
    const fs = require('fs');
    const path = require('path');
    const { pipeline } = require('stream');
    const { promisify } = require('util');
    const streamPipeline = promisify(pipeline);

    if (!text) {
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ú≥Ô∏è Usa el comando correctamente:\n\nüìå Ejemplo: *${global.prefix}play2* La Factor√≠a - Perdoname`
        }, { quoted: msg });
        break;
    }

    await sock.sendMessage(msg.key.remoteJid, {
        react: { text: '‚è≥', key: msg.key }
    });

    try {
        // 1. BUSQUEDA: Usamos el t√≠tulo para buscar el video
        const searchUrl = `https://api.neoxr.eu/api/video?q=${encodeURIComponent(text)}&apikey=russellxz`;
        const searchRes = await axios.get(searchUrl);
        const videoInfo = searchRes.data;
        if (!videoInfo || !videoInfo.data?.url) 
            throw new Error('No se pudo encontrar el video');

        const title = videoInfo.title || 'video';
        const thumbnail = videoInfo.thumbnail;
        const duration = videoInfo.fduration || '0:00';
        const views = videoInfo.views || 'N/A';
        const author = videoInfo.channel || 'Desconocido';
        const videoLink = `https://www.youtube.com/watch?v=${videoInfo.id}`;

        // 2. BANNER: Enviamos la vista previa con la info
        const captionPreview = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë‚ú¶ ùòºùôïùôêùôçùòº ùôêùóπùóçùóãùóÆ & ùòæùô§ùôßùô©ùôñùô£ùôñ ‚ú¶
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìÄ *ùôÑùóªùó≥ùóº ùó±ùó≤ùóπ ùòÉùó∂ùó±ùó≤ùóº:*  
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îú üéº *T√≠tulo:* ${title}
‚îú ‚è±Ô∏è *Duraci√≥n:* ${duration}
‚îú üëÅÔ∏è *Vistas:* ${views}
‚îú üë§ *Autor:* ${author}
‚îî üîó *Link:* ${videoLink}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üì• *Opciones de Descarga:*  
‚î£ üéµ *Audio:* _${global.prefix}play1 ${text}_
‚î£ üéµ *Audio:* _${global.prefix}play5 ${text}_
‚î£ üé• *Video:* _${global.prefix}play2 ${text}_
‚î£ üé• *Video:* _${global.prefix}play6 ${text}_
‚îó ‚ö†Ô∏è *¬øNo se reproduce?* Usa _${global.prefix}ff_

‚è≥ *Procesado por Azura Ultra & Cortana Bot*
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
   ñ•î Azura Ultra & Cortana ñ•î
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`;
        
        await sock.sendMessage(msg.key.remoteJid, {
            image: { url: thumbnail },
            caption: captionPreview
        }, { quoted: msg });

        // 3. DESCARGA: Usamos la l√≥gica de ytmp4 para descargar el video
        const qualities = ['720p', '480p', '360p'];
        let videoData = null;
        for (let quality of qualities) {
            try {
                const apiUrl = `https://api.neoxr.eu/api/youtube?url=${encodeURIComponent(videoLink)}&apikey=russellxz&type=video&quality=${quality}`;
                const response = await axios.get(apiUrl);
                if (response.data?.status && response.data?.data?.url) {
                    videoData = {
                        url: response.data.data.url,
                        title: response.data.title || title,
                        thumbnail: response.data.thumbnail || thumbnail,
                        duration: response.data.fduration || duration,
                        views: response.data.views || views,
                        channel: response.data.channel || author,
                        quality: response.data.data.quality || quality,
                        size: response.data.data.size || 'Desconocido',
                        publish: response.data.publish || 'Desconocido',
                        id: response.data.id || videoInfo.id
                    };
                    break;
                }
            } catch { continue; }
        }
        if (!videoData) throw new Error('No se pudo obtener el video en ninguna calidad');

        const tmpDir = path.join(__dirname, 'tmp');
        if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);
        const filename = `${Date.now()}_video.mp4`;
        const filePath = path.join(tmpDir, filename);

        const resDownload = await axios.get(videoData.url, {
            responseType: 'stream',
            headers: { 'User-Agent': 'Mozilla/5.0' }
        });
        await streamPipeline(resDownload.data, fs.createWriteStream(filePath));

        const stats = fs.statSync(filePath);
        if (!stats || stats.size < 100000) {
            fs.unlinkSync(filePath);
            throw new Error('El video descargado est√° vac√≠o o incompleto');
        }

        const finalText = `üé¨ Aqu√≠ tiene su video.\n\nDisfr√∫telo y contin√∫e explorando el mundo digital.\n\n¬© Azura Ultra & Cortana`;

        await sock.sendMessage(msg.key.remoteJid, {
            video: fs.readFileSync(filePath),
            mimetype: 'video/mp4',
            fileName: `${videoData.title}.mp4`,
            caption: finalText,
            gifPlayback: false
        }, { quoted: msg });

        fs.unlinkSync(filePath);

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚úÖ', key: msg.key }
        });

    } catch (err) {
        console.error(err);
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ùå *Error:* ${err.message}`
        }, { quoted: msg });
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚ùå', key: msg.key }
        });
    }

    break;
}
        
  
      
case 'whatmusic': {
    const fs = require('fs');
    const path = require('path');
    const { downloadContentFromMessage } = require('@whiskeysockets/baileys');
    const { promisify } = require('util');
    const { pipeline } = require('stream');
    const axios = require('axios');
    const yts = require('yt-search');
    const ffmpeg = require('fluent-ffmpeg');
    const quAx = require('./libs/upload.js');

    const streamPipeline = promisify(pipeline);

    const quotedMsg = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage;
    if (!quotedMsg || (!quotedMsg.audioMessage && !quotedMsg.videoMessage)) {
        await sock.sendMessage(msg.key.remoteJid, {
            text: "‚ú≥Ô∏è Responde a un *audio* (MP3) o *video* (MP4) para identificar la canci√≥n."
        }, { quoted: msg });
        break;
    }

    await sock.sendMessage(msg.key.remoteJid, {
        react: { text: 'üîé', key: msg.key }
    });

    try {
        const tmpDir = path.join(__dirname, 'tmp');
        if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);

        const fileExtension = quotedMsg.audioMessage ? 'mp3' : 'mp4';
        const inputPath = path.join(tmpDir, `${Date.now()}_input.${fileExtension}`);

        const stream = await downloadContentFromMessage(
            quotedMsg.audioMessage || quotedMsg.videoMessage,
            quotedMsg.audioMessage ? 'audio' : 'video'
        );
        const writable = fs.createWriteStream(inputPath);
        for await (const chunk of stream) writable.write(chunk);
        writable.end();

        const uploadResponse = await quAx(inputPath);
        if (!uploadResponse.status || !uploadResponse.result.url) throw new Error("No se pudo subir el archivo.");

        const apiKey = "russellxz";
        const apiUrl = `https://api.neoxr.eu/api/whatmusic?url=${encodeURIComponent(uploadResponse.result.url)}&apikey=${apiKey}`;
        const { data } = await axios.get(apiUrl);

        if (!data.status || !data.data) throw new Error("No se pudo identificar la canci√≥n.");

        const { title, artist, album, release } = data.data;
        const search = await yts(`${title} ${artist}`);
        const video = search.videos[0];
        if (!video) throw new Error("No se encontr√≥ la canci√≥n en YouTube.");

        const videoUrl = video.url;
        const thumbnail = video.thumbnail;
        const fduration = video.timestamp;
        const views = video.views.toLocaleString();
        const channel = video.author.name || 'Desconocido';

        const banner = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚ú¶ ùòºùôïùôêùôçùòº ùôêùôáùôèùôçùòº ùüÆ.ùü¨ ùóïùó¢ùóß ‚ú¶
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üéµ *Canci√≥n detectada:*  
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îú üìå *T√≠tulo:* ${title}
‚îú üë§ *Artista:* ${artist}
‚îú üíø *√Ålbum:* ${album}
‚îú üìÖ *Lanzamiento:* ${release}
‚îú üîé *Buscando:* ${video.title}
‚îú ‚è±Ô∏è *Duraci√≥n:* ${fduration}
‚îú üëÅÔ∏è *Vistas:* ${views}
‚îú üì∫ *Canal:* ${channel}
‚îú üîó *Link:* ${videoUrl}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚è≥ *Espere un momento, descargando la canci√≥n...*
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`;

        await sock.sendMessage(msg.key.remoteJid, {
            image: { url: thumbnail },
            caption: banner
        }, { quoted: msg });

        // Descargar desde YouTube en MP3
        const res = await axios.get(`https://api.neoxr.eu/api/youtube?url=${encodeURIComponent(videoUrl)}&type=audio&quality=128kbps&apikey=${apiKey}`);
        if (!res.data.status || !res.data.data?.url) throw new Error("No se pudo obtener el audio.");
        const audioUrl = res.data.data.url;

        const downloadPath = path.join(tmpDir, `${Date.now()}_raw.mp3`);
        const finalPath = path.join(tmpDir, `${Date.now()}_fixed.mp3`);

        // Descargar el audio
        const audioRes = await axios.get(audioUrl, { responseType: 'stream' });
        const audioStream = fs.createWriteStream(downloadPath);
        await streamPipeline(audioRes.data, audioStream);

        // Reparar con ffmpeg
        await new Promise((resolve, reject) => {
            ffmpeg(downloadPath)
                .audioCodec('libmp3lame')
                .audioBitrate('128k')
                .save(finalPath)
                .on('end', resolve)
                .on('error', reject);
        });

        // Enviar el audio procesado
        await sock.sendMessage(msg.key.remoteJid, {
            audio: fs.readFileSync(finalPath),
            mimetype: 'audio/mpeg',
            fileName: `${title}.mp3`
        }, { quoted: msg });

        fs.unlinkSync(inputPath);
        fs.unlinkSync(downloadPath);
        fs.unlinkSync(finalPath);

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚úÖ', key: msg.key }
        });

    } catch (err) {
        console.error(err);
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ùå *Error:* ${err.message}`
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚ùå', key: msg.key }
        });
    }

    break;
}

case 'whatmusic6': {
    const fs = require('fs');
    const path = require('path');
    const axios = require('axios');
    const ffmpeg = require('fluent-ffmpeg');
    const FormData = require('form-data');
    const { promisify } = require('util');
    const { pipeline } = require('stream');
    const { downloadContentFromMessage } = require('@whiskeysockets/baileys');
    const yts = require('yt-search');

    const streamPipeline = promisify(pipeline);
    const quotedMsg = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage;

    if (!quotedMsg || (!quotedMsg.audioMessage && !quotedMsg.videoMessage)) {
        await sock.sendMessage(msg.key.remoteJid, {
            text: "‚ú≥Ô∏è Responde a una nota de voz, audio o video para identificar la canci√≥n."
        }, { quoted: msg });
        break;
    }

    await sock.sendMessage(msg.key.remoteJid, {
        react: { text: 'üîç', key: msg.key }
    });

    try {
        const tmpDir = path.join(__dirname, 'tmp');
        if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);
        const fileExt = quotedMsg.audioMessage ? 'mp3' : 'mp4';
        const inputPath = path.join(tmpDir, `${Date.now()}.${fileExt}`);

        // Descargar el archivo
        const stream = await downloadContentFromMessage(
            quotedMsg.audioMessage || quotedMsg.videoMessage,
            quotedMsg.audioMessage ? 'audio' : 'video'
        );
        const writer = fs.createWriteStream(inputPath);
        for await (const chunk of stream) writer.write(chunk);
        writer.end();

        // Subir a russellxz.click
        const form = new FormData();
        form.append('file', fs.createReadStream(inputPath));
        form.append('expiry', '3600');

        const upload = await axios.post('https://cdn.russellxz.click/upload.php', form, {
            headers: form.getHeaders()
        });

        if (!upload.data || !upload.data.url) throw new Error('No se pudo subir el archivo');
        const fileUrl = upload.data.url;

        // Buscar canci√≥n en la API de neoxr
        const apiURL = `https://api.neoxr.eu/api/whatmusic?url=${encodeURIComponent(fileUrl)}&apikey=russellxz`;
        const res = await axios.get(apiURL);
        if (!res.data.status || !res.data.data) throw new Error('No se pudo identificar la canci√≥n');

        const { title, artist, album, release } = res.data.data;

        // Buscar en YouTube
        const ytSearch = await yts(`${title} ${artist}`);
        const video = ytSearch.videos[0];
        if (!video) throw new Error("No se encontr√≥ la canci√≥n en YouTube");

        const banner = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë ‚ú¶ ùòºùôïùôêùôçùòº ùôêùôáùôèùôçùòº ùüÆ.ùü¨ ùóïùó¢ùóß ‚ú¶
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üéµ *Canci√≥n detectada:*  
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îú üìå *T√≠tulo:* ${title}
‚îú üë§ *Artista:* ${artist}
‚îú üíø *√Ålbum:* ${album}
‚îú üìÖ *Lanzamiento:* ${release}
‚îú üîé *Buscando:* ${video.title}
‚îú ‚è±Ô∏è *Duraci√≥n:* ${video.timestamp}
‚îú üëÅÔ∏è *Vistas:* ${video.views.toLocaleString()}
‚îú üì∫ *Canal:* ${video.author.name}
‚îú üîó *Link:* ${video.url}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚è≥ *Espere un momento, descargando la canci√≥n...*`;

        await sock.sendMessage(msg.key.remoteJid, {
            image: { url: video.thumbnail },
            caption: banner
        }, { quoted: msg });

        // Descargar el audio desde YouTube
        const ytRes = await axios.get(`https://api.neoxr.eu/api/youtube?url=${encodeURIComponent(video.url)}&type=audio&quality=128kbps&apikey=russellxz`);
        const audioURL = ytRes.data.data.url;

        const rawPath = path.join(tmpDir, `${Date.now()}_raw.m4a`);
        const finalPath = path.join(tmpDir, `${Date.now()}_final.mp3`);

        const audioRes = await axios.get(audioURL, { responseType: 'stream' });
        await streamPipeline(audioRes.data, fs.createWriteStream(rawPath));

        // Convertir con FFmpeg a MP3
        await new Promise((resolve, reject) => {
            ffmpeg(rawPath)
                .audioCodec('libmp3lame')
                .audioBitrate('128k')
                .save(finalPath)
                .on('end', resolve)
                .on('error', reject);
        });

        await sock.sendMessage(msg.key.remoteJid, {
            audio: fs.readFileSync(finalPath),
            mimetype: 'audio/mpeg',
            fileName: `${title}.mp3`
        }, { quoted: msg });

        fs.unlinkSync(inputPath);
        fs.unlinkSync(rawPath);
        fs.unlinkSync(finalPath);

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚úÖ', key: msg.key }
        });

    } catch (err) {
        console.error(err);
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ùå *Error:* ${err.message}`
        }, { quoted: msg });
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚ùå', key: msg.key }
        });
    }

    break;
}
        
case 'ff2': {
    const fs = require('fs');
    const path = require('path');
    const ffmpeg = require('fluent-ffmpeg');
    const { downloadContentFromMessage } = require('@whiskeysockets/baileys');
    const { promisify } = require('util');
    const { pipeline } = require('stream');
    const streamPipeline = promisify(pipeline);

    // Validaci√≥n: el usuario debe citar un audio o documento mp3
    const quotedMsg = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage;
    const audioMsg = quotedMsg?.audioMessage;
    const docMsg = quotedMsg?.documentMessage;
    const isAudioDoc = docMsg?.mimetype?.startsWith("audio");

    if (!audioMsg && !isAudioDoc) {
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ú≥Ô∏è Responde a un *audio* o *mp3 da√±ado* para repararlo.`
        }, { quoted: msg });
        break;
    }

    await sock.sendMessage(msg.key.remoteJid, {
        react: { text: 'üéß', key: msg.key }
    });

    try {
        const tmpDir = path.join(__dirname, 'tmp');
        if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);

        const inputPath = path.join(tmpDir, `${Date.now()}_raw.mp3`);
        const outputPath = path.join(tmpDir, `${Date.now()}_fixed.mp3`);

        const stream = await downloadContentFromMessage(audioMsg ? audioMsg : docMsg, 'audio');
        const writable = fs.createWriteStream(inputPath);
        for await (const chunk of stream) {
            writable.write(chunk);
        }
        writable.end();

        const startTime = Date.now();

        // Reparar el audio con ffmpeg
        await new Promise((resolve, reject) => {
            ffmpeg(inputPath)
                .audioCodec('libmp3lame')
                .audioBitrate('128k')
                .format('mp3')
                .save(outputPath)
                .on('end', resolve)
                .on('error', reject);
        });

        const endTime = ((Date.now() - startTime) / 1000).toFixed(1);

        await sock.sendMessage(msg.key.remoteJid, {
            audio: fs.readFileSync(outputPath),
            mimetype: 'audio/mpeg',
            fileName: `audio_reparado.mp3`,
            ptt: audioMsg?.ptt || false,
            caption: `‚úÖ *Audio reparado exitosamente*\n‚è±Ô∏è *Tiempo de reparaci√≥n:* ${endTime}s\n\n¬© Azura Ultra 2.0`
        }, { quoted: msg });

        fs.unlinkSync(inputPath);
        fs.unlinkSync(outputPath);

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚úÖ', key: msg.key }
        });

    } catch (err) {
        console.error(err);
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ùå *Error:* ${err.message}`
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚ùå', key: msg.key }
        });
    }

    break;
}
case 'n': {
  try {
    const chatId = msg.key.remoteJid;
    const senderJid = msg.key.participant || msg.key.remoteJid;
    const senderNum = senderJid.replace(/[^0-9]/g, "");
    const botNumber = sock.user?.id.split(":")[0].replace(/[^0-9]/g, "");

    // Verificar que se use en un grupo
    if (!chatId.endsWith("@g.us")) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è Este comando solo se puede usar en grupos." }, { quoted: msg });
      return;
    }

    // Verificar si es admin o el mismo bot
    const metadata = await sock.groupMetadata(chatId);
    const participant = metadata.participants.find(p => p.id.includes(senderNum));
    const isAdmin = participant?.admin === "admin" || participant?.admin === "superadmin";
    const isBot = botNumber === senderNum;

    if (!isAdmin && !isBot) {
      return await sock.sendMessage(chatId, {
        text: "‚ùå Solo los administradores del grupo o el bot pueden usar este comando."
      }, { quoted: msg });
    }

    const allMentions = metadata.participants.map(p => p.id);
    let messageToForward = null;
    let hasMedia = false;

    if (msg.message?.extendedTextMessage?.contextInfo?.quotedMessage) {
      const quoted = msg.message.extendedTextMessage.contextInfo.quotedMessage;

      if (quoted.conversation) {
        messageToForward = { text: quoted.conversation };
      } else if (quoted.extendedTextMessage?.text) {
        messageToForward = { text: quoted.extendedTextMessage.text };
      } else if (quoted.imageMessage) {
        const stream = await downloadContentFromMessage(quoted.imageMessage, "image");
        let buffer = Buffer.alloc(0);
        for await (const chunk of stream) buffer = Buffer.concat([buffer, chunk]);
        const mimetype = quoted.imageMessage.mimetype || "image/jpeg";
        const caption = quoted.imageMessage.caption || "";
        messageToForward = { image: buffer, mimetype, caption };
        hasMedia = true;
      } else if (quoted.videoMessage) {
        const stream = await downloadContentFromMessage(quoted.videoMessage, "video");
        let buffer = Buffer.alloc(0);
        for await (const chunk of stream) buffer = Buffer.concat([buffer, chunk]);
        const mimetype = quoted.videoMessage.mimetype || "video/mp4";
        const caption = quoted.videoMessage.caption || "";
        messageToForward = { video: buffer, mimetype, caption };
        hasMedia = true;
      } else if (quoted.audioMessage) {
        const stream = await downloadContentFromMessage(quoted.audioMessage, "audio");
        let buffer = Buffer.alloc(0);
        for await (const chunk of stream) buffer = Buffer.concat([buffer, chunk]);
        const mimetype = quoted.audioMessage.mimetype || "audio/mp3";
        messageToForward = { audio: buffer, mimetype };
        hasMedia = true;
      } else if (quoted.stickerMessage) {
        const stream = await downloadContentFromMessage(quoted.stickerMessage, "sticker");
        let buffer = Buffer.alloc(0);
        for await (const chunk of stream) buffer = Buffer.concat([buffer, chunk]);
        messageToForward = { sticker: buffer };
        hasMedia = true;
      } else if (quoted.documentMessage) {
        const stream = await downloadContentFromMessage(quoted.documentMessage, "document");
        let buffer = Buffer.alloc(0);
        for await (const chunk of stream) buffer = Buffer.concat([buffer, chunk]);
        const mimetype = quoted.documentMessage.mimetype || "application/pdf";
        const caption = quoted.documentMessage.caption || "";
        messageToForward = { document: buffer, mimetype, caption };
        hasMedia = true;
      }
    }

    if (!hasMedia && args.join(" ").trim().length > 0) {
      messageToForward = { text: args.join(" ") };
    }

    if (!messageToForward) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è Debes responder a un mensaje o proporcionar un texto para reenviar." }, { quoted: msg });
      return;
    }

    await sock.sendMessage(chatId, {
      ...messageToForward,
      mentions: allMentions
    }, { quoted: msg });

  } catch (error) {
    console.error("‚ùå Error en el comando tag:", error);
    await sock.sendMessage(msg.key.remoteJid, {
      text: "‚ùå Ocurri√≥ un error al ejecutar el comando tag."
    }, { quoted: msg });
  }
  break;
}      



case 'linia': {
    const fs = require('fs');
    const path = require('path');

    if (!isOwner) {
        await sock.sendMessage(msg.key.remoteJid, {
            text: '‚õî Este comando es solo para el *Owner*.'
        }, { quoted: msg });
        break;
    }

    if (!text) {
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ú≥Ô∏è Usa el comando correctamente:\n\nüìå Ejemplo: *${global.prefix}linia play*`
        }, { quoted: msg });
        break;
    }

    const filePath = path.join(__dirname, 'main.js'); // Aqu√≠ ahora apunta a main.js

    try {
        const lines = fs.readFileSync(filePath, 'utf-8').split('\n');
        let found = false;

        for (let i = 0; i < lines.length; i++) {
            if (lines[i].includes(`case '${text}'`)) {
                await sock.sendMessage(msg.key.remoteJid, {
                    text: `‚úÖ El comando *${text}* est√° en la l√≠nea *${i + 1}* del archivo *main.js*.`
                }, { quoted: msg });
                found = true;
                break;
            }
        }

        if (!found) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: `‚ùå No se encontr√≥ el comando *${text}* en el archivo *main.js*.`
            }, { quoted: msg });
        }

    } catch (err) {
        console.error(err);
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ùå Error al leer el archivo: ${err.message}`
        }, { quoted: msg });
    }

    break;
}
        
  case 'ff': {
    const fs = require('fs');
    const path = require('path');
    const ffmpeg = require('fluent-ffmpeg');
    const { downloadContentFromMessage } = require('@whiskeysockets/baileys');
    const { promisify } = require('util');
    const { pipeline } = require('stream');
    const streamPipeline = promisify(pipeline);

    // Validaci√≥n: el usuario debe citar un video
    const quotedMsg = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage;
    if (!quotedMsg || !quotedMsg.videoMessage) {
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ú≥Ô∏è Responde a un *video* para optimizarlo para WhatsApp.`
        }, { quoted: msg });
        break;
    }

    await sock.sendMessage(msg.key.remoteJid, {
        react: { text: 'üîß', key: msg.key }
    });

    try {
        const tmpDir = path.join(__dirname, 'tmp');
        if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);

        const rawPath = path.join(tmpDir, `${Date.now()}_raw.mp4`);
        const finalPath = path.join(tmpDir, `${Date.now()}_fixed.mp4`);

        // Descargar el video citado
        const stream = await downloadContentFromMessage(quotedMsg.videoMessage, 'video');
        const writable = fs.createWriteStream(rawPath);
        for await (const chunk of stream) {
            writable.write(chunk);
        }
        writable.end();

        const startTime = Date.now();

        // Conversi√≥n con ffmpeg para compatibilidad
        await new Promise((resolve, reject) => {
            ffmpeg(rawPath)
                .outputOptions([
                    '-c:v libx264',
                    '-preset fast',
                    '-crf 28',
                    '-c:a aac',
                    '-b:a 128k',
                    '-movflags +faststart'
                ])
                .save(finalPath)
                .on('end', resolve)
                .on('error', reject);
        });

        const endTime = ((Date.now() - startTime) / 1000).toFixed(1);

        await sock.sendMessage(msg.key.remoteJid, {
            video: fs.readFileSync(finalPath),
            mimetype: 'video/mp4',
            fileName: `video_optimo.mp4`,
            caption: `‚úÖ *Video optimizado para WhatsApp*\n‚è±Ô∏è *Conversi√≥n:* ${endTime}s\n\n¬© Azura Ultra 2.0`
        }, { quoted: msg });

        fs.unlinkSync(rawPath);
        fs.unlinkSync(finalPath);

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚úÖ', key: msg.key }
        });

    } catch (err) {
        console.error(err);
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ùå *Error:* ${err.message}`
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚ùå', key: msg.key }
        });
    }

    break;
}
      
case "git": {
    try {
        // Verificar que el comando solo lo use el owner
        if (!isOwner(sender)) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: "‚ö†Ô∏è *Solo el propietario puede usar este comando.*"
            }, { quoted: msg });
            return;
        }

        // Verificar si se proporcion√≥ un comando
        if (!args[0]) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: "‚ö†Ô∏è *Debes especificar el nombre de un comando.*\nEjemplo: `.git rest`"
            }, { quoted: msg });
            return;
        }

        // Leer el archivo main.js
        const mainFilePath = "./main.js";
        if (!fs.existsSync(mainFilePath)) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: "‚ùå *Error:* No se encontr√≥ el archivo de comandos."
            }, { quoted: msg });
            return;
        }

        // Leer el contenido del archivo main.js
        const mainFileContent = fs.readFileSync(mainFilePath, "utf-8");

        // Buscar el comando solicitado
        const commandName = args[0].toLowerCase();
        const commandRegex = new RegExp(`case\\s+['"]${commandName}['"]:\\s*([\\s\\S]*?)\\s*break;`, "g");
        const match = commandRegex.exec(mainFileContent);

        if (!match) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: `‚ùå *Error:* No se encontr√≥ el comando *${commandName}* en el archivo main.js.`
            }, { quoted: msg });
            return;
        }

        // Extraer el c√≥digo del comando
        const commandCode = `üìú *C√≥digo del comando ${commandName}:*\n\n\`\`\`${match[0]}\`\`\``;

        // Enviar el c√≥digo como mensaje
        await sock.sendMessage(msg.key.remoteJid, {
            text: commandCode
        }, { quoted: msg });

    } catch (error) {
        console.error("‚ùå Error en el comando git:", error);
        await sock.sendMessage(msg.key.remoteJid, {
            text: "‚ùå *Error al obtener el c√≥digo del comando.*"
        }, { quoted: msg });
    }
    break;
}

        
case 'play11': {
    const axios = require('axios');
    const yts = require('yt-search');
    const fs = require('fs');
    const path = require('path');
    const ffmpeg = require('fluent-ffmpeg');
    const { pipeline } = require('stream');
    const { promisify } = require('util');
    const streamPipeline = promisify(pipeline);

    if (!text) {
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ú≥Ô∏è Usa el comando correctamente:\n\nüìå Ejemplo: *${global.prefix}play* bad bunny diles`
        }, { quoted: msg });
        break;
    }

    await sock.sendMessage(msg.key.remoteJid, {
        react: { text: '‚è≥', key: msg.key }
    });

    try {
        const search = await yts(text);
        const video = search.videos[0];
        if (!video) throw new Error('No se encontraron resultados');

        const videoUrl = video.url;
        const thumbnail = video.thumbnail;
        const title = video.title;
        const fduration = video.timestamp;
        const views = video.views.toLocaleString();
        const channel = video.author.name || 'Desconocido';

        const infoMessage = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚ú¶ ùòºùôïùôêùôçùòº ùôêùôáùôèùôçùòº & ùòæùôäùôçùôèùòºùôâùòº ‚ú¶
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìÄ *ùôÑùô£ùôõùô§ ùôôùôöùô° ùôñùô™ùôôùôûùô§:*  
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îú üéº *T√≠tulo:* ${title}
‚îú ‚è±Ô∏è *Duraci√≥n:* ${fduration}
‚îú üëÅÔ∏è *Vistas:* ${views}
‚îú üë§ *Autor:* ${channel}
‚îî üîó *Enlace:* ${videoUrl}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üì• *Opciones de Descarga:*  
‚î£ üéµ *Audio:* _${global.prefix}play1 ${text}_
‚î£ üéµ *Audio:* _${global.prefix}play5 ${text}_
‚î£ üé• *video:* _${global.prefix}play2 ${text}_
‚îó üé• *Video:* _${global.prefix}play6 ${text}_

‚è≥ *Espera un momento...*  
‚öôÔ∏è *Azura Ultra & Cortana est√° procesando tu m√∫sica...*
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
     ñ•î Azura Ultra & Cortana ñ•î`;

        await sock.sendMessage(msg.key.remoteJid, {
            image: { url: thumbnail },
            caption: infoMessage
        }, { quoted: msg });

        // Descargar el audio desde la API
        const apiURL = `https://api.neoxr.eu/api/youtube?url=${encodeURIComponent(videoUrl)}&type=audio&quality=128kbps&apikey=russellxz`;
        const res = await axios.get(apiURL);
        const json = res.data;

        if (!json.status || !json.data?.url) throw new Error("No se pudo obtener el audio");

        const tmpDir = path.join(__dirname, 'tmp');
        if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);

        const rawPath = path.join(tmpDir, `${Date.now()}_raw.m4a`);
        const finalPath = path.join(tmpDir, `${Date.now()}_final.mp3`);

        const audioRes = await axios.get(json.data.url, { responseType: 'stream' });
        await streamPipeline(audioRes.data, fs.createWriteStream(rawPath));

        // Convertir con FFmpeg
        await new Promise((resolve, reject) => {
            ffmpeg(rawPath)
                .audioCodec('libmp3lame')
                .audioBitrate('128k')
                .format('mp3')
                .save(finalPath)
                .on('end', resolve)
                .on('error', reject);
        });

        await sock.sendMessage(msg.key.remoteJid, {
            audio: fs.readFileSync(finalPath),
            mimetype: 'audio/mpeg',
            fileName: `${title}.mp3`
        }, { quoted: msg });

        fs.unlinkSync(rawPath);
        fs.unlinkSync(finalPath);

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚úÖ', key: msg.key }
        });

    } catch (err) {
        console.error(err);
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ùå *Error:* ${err.message}`
        }, { quoted: msg });
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚ùå', key: msg.key }
        });
    }

    break;
}

case 'ytmp4': {
    const axios = require('axios');
    const fs = require('fs');
    const path = require('path');
    const { pipeline } = require('stream');
    const { promisify } = require('util');
    const streamPipeline = promisify(pipeline);

    if (!text || (!text.includes('youtube.com') && !text.includes('youtu.be'))) {
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ú≥Ô∏è Usa el comando correctamente:\n\nüìå Ejemplo: *${global.prefix}ytmp4* https://youtube.com/watch?v=...`
        }, { quoted: msg });
        break;
    }

    await sock.sendMessage(msg.key.remoteJid, {
        react: { text: '‚è≥', key: msg.key }
    });

    try {
        const qualities = ['720p', '480p', '360p'];
        let videoData = null;

        for (let quality of qualities) {
            try {
                const apiUrl = `https://api.neoxr.eu/api/youtube?url=${encodeURIComponent(text)}&type=video&quality=${quality}&apikey=russellxz`;
                const response = await axios.get(apiUrl);
                if (response.data?.status && response.data?.data?.url) {
                    videoData = {
                        url: response.data.data.url,
                        title: response.data.title || 'video',
                        thumbnail: response.data.thumbnail,
                        duration: response.data.fduration,
                        views: response.data.views,
                        channel: response.data.channel,
                        quality: response.data.data.quality || quality,
                        size: response.data.data.size || 'Desconocido',
                        publish: response.data.publish || 'Desconocido',
                        id: response.data.id || ''
                    };
                    break;
                }
            } catch { continue; }
        }

        if (!videoData) throw new Error('No se pudo obtener el video en ninguna calidad');

        const tmpDir = path.join(__dirname, 'tmp');
        if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);

        const filePath = path.join(tmpDir, `${Date.now()}_video.mp4`);

        // Descargar el video directamente
        const response = await axios.get(videoData.url, {
            responseType: 'stream',
            headers: { 'User-Agent': 'Mozilla/5.0' }
        });
        await streamPipeline(response.data, fs.createWriteStream(filePath));

        // Verificar si el archivo tiene buen tama√±o
        const stats = fs.statSync(filePath);
        if (!stats || stats.size < 100000) {
            fs.unlinkSync(filePath);
            throw new Error('El video descargado est√° vac√≠o o incompleto');
        }

        const caption = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë‚ú¶ ùòºùôïùôêùôçùòº ùôêùôáùôèùôçùòº ùüÆ.ùü¨ ùóïùó¢ùóß ‚ú¶
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìÄ *ùôÑùô£ùôõùô§ ùôôùôöùô° ùô´ùôûùôôùôöùô§:*  
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îú üéº *T√≠tulo:* ${videoData.title}
‚îú ‚è±Ô∏è *Duraci√≥n:* ${videoData.duration}
‚îú üëÅÔ∏è *Vistas:* ${videoData.views}
‚îú üë§ *Canal:* ${videoData.channel}
‚îú üóìÔ∏è *Publicado:* ${videoData.publish}
‚îú üì¶ *Tama√±o:* ${videoData.size}
‚îú üìπ *Calidad:* ${videoData.quality}
‚îî üîó *Link:* https://youtu.be/${videoData.id}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
‚îó ‚ö†Ô∏è *¬øNo se reproduce?* Usa _${global.prefix}ff_

‚è≥ *Procesado por Azura Ultra & Cortana*`;

        await sock.sendMessage(msg.key.remoteJid, {
            video: fs.readFileSync(filePath),
            mimetype: 'video/mp4',
            fileName: `${videoData.title}.mp4`,
            caption,
            gifPlayback: false
        }, { quoted: msg });

        fs.unlinkSync(filePath);

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚úÖ', key: msg.key }
        });

    } catch (err) {
        console.error(err);
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ùå *Error:* ${err.message}`
        }, { quoted: msg });
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚ùå', key: msg.key }
        });
    }

    break;
}
      
      
      case 'tiktoksearch': {
    const axios = require('axios');

    if (!args.length) {
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ö†Ô∏è *Uso incorrecto.*\nüìå Ejemplo: \`${global.prefix}tiktoksearch <query>\`` 
        }, { quoted: msg });
        return;
    }

    const query = args.join(' ');
    const apiUrl = `https://api.dorratz.com/v2/tiktok-s?q=${encodeURIComponent(query)}`;

    await sock.sendMessage(msg.key.remoteJid, { 
        react: { text: "‚è≥", key: msg.key } 
    });

    try {
        const response = await axios.get(apiUrl);

        if (response.data.status !== 200 || !response.data.data || response.data.data.length === 0) {
            return await sock.sendMessage(msg.key.remoteJid, { 
                text: "No se encontraron resultados para tu consulta." 
            }, { quoted: msg });
        }

        const results = response.data.data.slice(0, 5);

        const resultText = results.map((video, index) => `
üìå *Resultado ${index + 1}:*
üìπ *T√≠tulo:* ${video.title}
üë§ *Autor:* ${video.author.nickname} (@${video.author.username})
üëÄ *Reproducciones:* ${video.play.toLocaleString()}
‚ù§Ô∏è *Me gusta:* ${video.like.toLocaleString()}
üí¨ *Comentarios:* ${video.coment.toLocaleString()}
üîó *Enlace:* ${video.url}
        `).join('\n');

        await sock.sendMessage(msg.key.remoteJid, { 
            text: `üîç *Resultados de b√∫squeda en TikTok para "${query}":*\n\n${resultText}` 
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .tiktoksearch:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al procesar tu solicitud.*" 
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } 
        });
    }
    break;
}
        case 'dalle': {
    const axios = require('axios');

    if (!args.length) {
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ö†Ô∏è *Uso incorrecto.*\nüìå Ejemplo: \`${global.prefix}dalle Gato en la luna\`` 
        }, { quoted: msg });
        return;
    }

    const text = args.join(' ');
    const apiUrl = `https://api.hiuraa.my.id/ai-img/imagen?text=${encodeURIComponent(text)}`;

    await sock.sendMessage(msg.key.remoteJid, { 
        react: { text: "‚è≥", key: msg.key } 
    });

    try {
        const response = await axios.get(apiUrl, { responseType: 'arraybuffer' });

        if (!response.data) {
            throw new Error('No se pudo generar la imagen.');
        }

        const imageBuffer = Buffer.from(response.data, 'binary');

        await sock.sendMessage(msg.key.remoteJid, { 
            image: imageBuffer,
            caption: `üñºÔ∏è *Imagen generada para:* ${text}`,
            mimetype: 'image/jpeg'
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .dalle:", error.message);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ùå *Error al generar la imagen:*\n_${error.message}_` 
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } 
        });
    }
    break;
}
        
case 'ytmp3': {
  const axios = require('axios');
  const fs = require('fs');
  const path = require('path');
  const ffmpeg = require('fluent-ffmpeg');
  const { promisify } = require('util');
  const { pipeline } = require('stream');
  const streamPipeline = promisify(pipeline);

  const isYoutubeUrl = /^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.be|music\.youtube\.com)\//i.test(text);

  if (!text || !isYoutubeUrl) {
    await sock.sendMessage(msg.key.remoteJid, {
      text: `‚ú≥Ô∏è Usa el comando correctamente, mi rey:\n\nüìå Ejemplo: *${global.prefix}ytmp3* https://music.youtube.com/watch?v=abc123`
    }, { quoted: msg });
    break;
  }

  await sock.sendMessage(msg.key.remoteJid, {
    react: { text: '‚è≥', key: msg.key }
  });

  try {
    const apiURL = `https://api.neoxr.eu/api/youtube?url=${encodeURIComponent(text)}&type=audio&quality=128kbps&apikey=russellxz`;
    const res = await axios.get(apiURL);
    const json = res.data;

    if (!json.status || !json.data?.url) {
      console.log('Respuesta de la API:', JSON.stringify(json, null, 2));
      throw new Error("No se pudo obtener el audio");
    }

    const { data, title, fduration, thumbnail } = json;

    await sock.sendMessage(msg.key.remoteJid, {
      image: { url: thumbnail },
      caption: `üéß *T√≠tulo:* ${title}\nüïí *Duraci√≥n:* ${fduration}\nüì• *Tama√±o:* ${data.size}\n\n‚è≥ Descargando audio...`
    }, { quoted: msg });

    const tmpDir = path.join(__dirname, 'tmp');
    if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);

    const rawPath = path.join(tmpDir, `${Date.now()}_raw.m4a`);
    const finalPath = path.join(tmpDir, `${Date.now()}_final.mp3`);

    const audioRes = await axios.get(data.url, { responseType: 'stream' });
    await streamPipeline(audioRes.data, fs.createWriteStream(rawPath));

    // Convertir con FFmpeg
    await new Promise((resolve, reject) => {
      ffmpeg(rawPath)
        .audioCodec('libmp3lame')
        .audioBitrate('128k')
        .save(finalPath)
        .on('end', resolve)
        .on('error', reject);
    });

    await sock.sendMessage(msg.key.remoteJid, {
      audio: fs.readFileSync(finalPath),
      mimetype: 'audio/mpeg',
      fileName: data.filename || `${title}.mp3`
    }, { quoted: msg });

    fs.unlinkSync(rawPath);
    fs.unlinkSync(finalPath);

    await sock.sendMessage(msg.key.remoteJid, {
      react: { text: '‚úÖ', key: msg.key }
    });

  } catch (err) {
    console.error(err);
    await sock.sendMessage(msg.key.remoteJid, {
      text: `‚ùå *Error:* ${err.message}`
    }, { quoted: msg });

    await sock.sendMessage(msg.key.remoteJid, {
      react: { text: '‚ùå', key: msg.key }
    });
  }

  break;
}
        
case 'play3': {
    const fetch = require('node-fetch');
    const axios = require('axios');

    const apis = {
        delirius: 'https://delirius-apiofc.vercel.app/',
        ryzen: 'https://apidl.asepharyana.cloud/',
        rioo: 'https://restapi.apibotwa.biz.id/'
    };

    await sock.sendMessage(msg.key.remoteJid, { react: { text: "üé∂", key: msg.key } });

    if (!text) {
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ö†Ô∏è Escribe lo que deseas buscar en Spotify.\nEjemplo: *${global.prefix}play3* Marshmello - Alone`
        }, { quoted: msg });
        break;
    }

    try {
        const res = await axios.get(`${apis.delirius}search/spotify?q=${encodeURIComponent(text)}&limit=1`);
        if (!res.data.data || res.data.data.length === 0) {
            throw '‚ùå No se encontraron resultados en Spotify.';
        }

        const result = res.data.data[0];
        const img = result.image;
        const url = result.url;
        const info = `‚ßÅ ùôèùôÑùôèùôêùôáùôä: ${result.title}
‚ßÅ ùòºùôçùôèùôÑùôéùôèùòº: ${result.artist}
‚ßÅ ùòøùôêùôçùòºùòæùôÑùôäÃÅùôâ: ${result.duration}
‚ßÅ ùôãùôêùòΩùôáùôÑùòæùòºùòøùôä: ${result.publish}
‚ßÅ ùôãùôäùôãùôêùôáùòºùôçùôÑùòøùòºùòø: ${result.popularity}
‚ßÅ ùôÄùôâùôáùòºùòæùôÄ: ${url}

üé∂ *Azura Ultra & Cortana esta enviando tu m√∫sica...*`.trim();

        await sock.sendMessage(msg.key.remoteJid, {
            image: { url: img },
            caption: info
        }, { quoted: msg });

        const sendAudio = async (link) => {
            await sock.sendMessage(msg.key.remoteJid, {
                audio: { url: link },
                fileName: `${result.title}.mp3`,
                mimetype: 'audio/mpeg'
            }, { quoted: msg });
        };

        // Intento 1
        try {
            const res1 = await fetch(`${apis.delirius}download/spotifydl?url=${encodeURIComponent(url)}`);
            const json1 = await res1.json();
            return await sendAudio(json1.data.url);
        } catch (e1) {
            // Intento 2
            try {
                const res2 = await fetch(`${apis.delirius}download/spotifydlv3?url=${encodeURIComponent(url)}`);
                const json2 = await res2.json();
                return await sendAudio(json2.data.url);
            } catch (e2) {
                // Intento 3
                try {
                    const res3 = await fetch(`${apis.rioo}api/spotify?url=${encodeURIComponent(url)}`);
                    const json3 = await res3.json();
                    return await sendAudio(json3.data.response);
                } catch (e3) {
                    // Intento 4
                    try {
                        const res4 = await fetch(`${apis.ryzen}api/downloader/spotify?url=${encodeURIComponent(url)}`);
                        const json4 = await res4.json();
                        return await sendAudio(json4.link);
                    } catch (e4) {
                        await sock.sendMessage(msg.key.remoteJid, {
                            text: `‚ùå No se pudo descargar el audio.\nError: ${e4.message}`
                        }, { quoted: msg });
                    }
                }
            }
        }

    } catch (err) {
        console.error(err);
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ùå Ocurri√≥ un error: ${err.message || err}`
        }, { quoted: msg });
    }

    break;
}
      
case 'play5': {
    const yts = require('yt-search');
    const axios = require('axios');
    const fs = require('fs');
    const path = require('path');
    const { pipeline } = require('stream');
    const { promisify } = require('util');
    const ffmpeg = require('fluent-ffmpeg');

    const streamPipeline = promisify(pipeline);

    const formatAudio = ['mp3', 'm4a', 'webm', 'acc', 'flac', 'opus', 'ogg', 'wav'];

    const ddownr = {
        download: async (url, format) => {
            if (!formatAudio.includes(format)) {
                throw new Error('Formato no soportado.');
            }

            const config = {
                method: 'GET',
                url: `https://p.oceansaver.in/ajax/download.php?format=${format}&url=${encodeURIComponent(url)}&api=dfcb6d76f2f6a9894gjkege8a4ab232222`,
                headers: {
                    'User-Agent': 'Mozilla/5.0'
                }
            };

            const response = await axios.request(config);
            if (response.data && response.data.success) {
                const { id, title, info } = response.data;
                const downloadUrl = await ddownr.cekProgress(id);
                return { title, downloadUrl, thumbnail: info.image, uploader: info.author, duration: info.duration, views: info.views, video_url: info.video_url };
            } else {
                throw new Error('No se pudo obtener la informaci√≥n del audio.');
            }
        },
        cekProgress: async (id) => {
            const config = {
                method: 'GET',
                url: `https://p.oceansaver.in/ajax/progress.php?id=${id}`,
                headers: {
                    'User-Agent': 'Mozilla/5.0'
                }
            };

            while (true) {
                const response = await axios.request(config);
                if (response.data?.success && response.data.progress === 1000) {
                    return response.data.download_url;
                }
                await new Promise(resolve => setTimeout(resolve, 5000));
            }
        }
    };

    if (!text) {
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ú≥Ô∏è Usa el comando correctamente:\n\nüìå Ejemplo: *${global.prefix}play5* La Factoria - Perdoname`
        }, { quoted: msg });
        break;
    }

    await sock.sendMessage(msg.key.remoteJid, {
        react: { text: '‚è≥', key: msg.key }
    });

    try {
        const search = await yts(text);
        if (!search.videos || search.videos.length === 0) {
            throw new Error('No se encontraron resultados.');
        }

        const video = search.videos[0];
        const { title, url, timestamp, views, author, thumbnail } = video;

        const infoMessage = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚ú¶ ùòºùôïùôêùôçùòº ùôêùôáùôèùôçùòº & ùòæùôäùôçùôèùòºùôâùòº ‚ú¶   
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìÄ *ùôÑùô£ùôõùô§ ùôôùôöùô° ùô´ùôûùôôùôöùô§:*  
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îú üéº *T√≠tulo:* ${title}
‚îú ‚è±Ô∏è *Duraci√≥n:* ${timestamp}
‚îú üëÅÔ∏è *Vistas:* ${views.toLocaleString()}
‚îú üë§ *Autor:* ${author.name}
‚îî üîó *Enlace:* ${url}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üì• *Opciones de Descarga:*  
‚î£ üéµ *Audio:* _${global.prefix}play5 ${text}_  
‚î£ üéµ *Audio de spotify:* _${global.prefix}play3 ${text}_
‚î£ üé• *video:* _${global.prefix}play6 ${text}_  
‚îó üé• *Video:* _${global.prefix}play4 ${text}_

‚è≥ *Espera un momento...*  
‚öôÔ∏è *Azura Ultra 2.0 est√° procesando tu m√∫sica...*

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
         ñ•î ùóîùòáùòÇùóãùóÆ ùó®ùóπùòÅùóãùóÆ & ùòæùô§ùôßùô©ùôñùô£ùôñ ñ•î
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`;

        await sock.sendMessage(msg.key.remoteJid, {
            image: { url: thumbnail },
            caption: infoMessage
        }, { quoted: msg });

        const { downloadUrl } = await ddownr.download(url, 'mp3');

        const tmpDir = path.join(__dirname, 'tmp');
        if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);
        const rawPath = path.join(tmpDir, `${Date.now()}_raw.mp3`);
        const finalPath = path.join(tmpDir, `${Date.now()}_compressed.mp3`);

        const audioRes = await axios.get(downloadUrl, {
            responseType: 'stream',
            headers: {
                'User-Agent': 'Mozilla/5.0'
            }
        });

        await streamPipeline(audioRes.data, fs.createWriteStream(rawPath));

        // Compresi√≥n del audio con ffmpeg
        await new Promise((resolve, reject) => {
            ffmpeg(rawPath)
                .audioBitrate('128k')
                .format('mp3')
                .on('end', resolve)
                .on('error', reject)
                .save(finalPath);
        });

        await sock.sendMessage(msg.key.remoteJid, {
            audio: fs.readFileSync(finalPath),
            mimetype: 'audio/mpeg',
            fileName: `${title}.mp3`
        }, { quoted: msg });

        fs.unlinkSync(rawPath);
        fs.unlinkSync(finalPath);

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚úÖ', key: msg.key }
        });

    } catch (err) {
        console.error(err);
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ùå *Error:* ${err.message}`
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚ùå', key: msg.key }
        });
    }

    break;
}
      
case 'play6': {
    const yts = require('yt-search');
    const axios = require('axios');
    const fs = require('fs');
    const path = require('path');
    const { pipeline } = require('stream');
    const { promisify } = require('util');
    const ffmpeg = require('fluent-ffmpeg');
    const streamPipeline = promisify(pipeline);

    const formatVideo = ['240', '360', '480', '720'];

    const ddownr = {
        download: async (url, format) => {
            if (!formatVideo.includes(format)) {
                throw new Error('Formato de video no soportado.');
            }

            const config = {
                method: 'GET',
                url: `https://p.oceansaver.in/ajax/download.php?format=${format}&url=${encodeURIComponent(url)}&api=dfcb6d76f2f6a9894gjkege8a4ab232222`,
                headers: {
                    'User-Agent': 'Mozilla/5.0'
                }
            };

            const response = await axios.request(config);
            if (response.data && response.data.success) {
                const { id, title, info } = response.data;
                const downloadUrl = await ddownr.cekProgress(id);
                return {
                    title,
                    downloadUrl,
                    thumbnail: info.image,
                    uploader: info.author,
                    duration: info.duration,
                    views: info.views,
                    video_url: info.video_url
                };
            } else {
                throw new Error('No se pudo obtener la informaci√≥n del video.');
            }
        },
        cekProgress: async (id) => {
            const config = {
                method: 'GET',
                url: `https://p.oceansaver.in/ajax/progress.php?id=${id}`,
                headers: {
                    'User-Agent': 'Mozilla/5.0'
                }
            };

            while (true) {
                const response = await axios.request(config);
                if (response.data?.success && response.data.progress === 1000) {
                    return response.data.download_url;
                }
                await new Promise(resolve => setTimeout(resolve, 5000));
            }
        }
    };

    if (!text) {
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ú≥Ô∏è Usa el comando correctamente:\n\nüìå Ejemplo: *${global.prefix}play6* La Factoria - Perdoname`
        }, { quoted: msg });
        break;
    }

    await sock.sendMessage(msg.key.remoteJid, {
        react: { text: '‚è≥', key: msg.key }
    });

    try {
        const search = await yts(text);
        if (!search.videos || search.videos.length === 0) {
            throw new Error('No se encontraron resultados.');
        }

        const video = search.videos[0];
        const { title, url, timestamp, views, author, thumbnail } = video;

        // Convertimos duraci√≥n a minutos
        const durParts = timestamp.split(':').map(Number);
        const minutes = durParts.length === 3
            ? durParts[0] * 60 + durParts[1]
            : durParts[0];

        // Selecci√≥n de calidad seg√∫n duraci√≥n
        let quality = '360';
        if (minutes <= 3) quality = '720';
        else if (minutes <= 5) quality = '480';
        else quality = '360';

        const infoMessage = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë‚ú¶ ùòºùôïùôêùôçùòº ùôêùôáùôèùôçùòº & ùòæùôäùôçùôèùòºùôâùòº  ‚ú¶   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìÄ *ùôÑùô£ùôõùô§ ùôôùôöùô° ùô´ùôûùôôùôöùô§:*  
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îú üéº *T√≠tulo:* ${title}
‚îú ‚è±Ô∏è *Duraci√≥n:* ${timestamp}
‚îú üëÅÔ∏è *Vistas:* ${views.toLocaleString()}
‚îú üë§ *Autor:* ${author.name}
‚îî üîó *Enlace:* ${url}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üì• *Opciones de Descarga:*  
‚î£ üéµ *Audio:* _${global.prefix}play ${text}_  
‚î£ üéµ *Audio de spotify:* _${global.prefix}play3 ${text}_
‚î£ üé• *video:* _${global.prefix}play2 ${text}_
‚îó üé• *Video:* _${global.prefix}play6 ${text}_

‚è≥ *Espera un momento...*  
‚öôÔ∏è *Azura Ultra 2.0 est√° procesando tu video...*

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
         ñ•î ùóîùòáùòÇùóãùóÆ ùó®ùóπùòÅùóãùóÆ & ùòæùôäùôçùôèùòºùôâùòº ñ•î
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`;

        await sock.sendMessage(msg.key.remoteJid, {
            image: { url: thumbnail },
            caption: infoMessage
        }, { quoted: msg });

        const { downloadUrl } = await ddownr.download(url, quality);

        const tmpDir = path.join(__dirname, 'tmp');
        if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);
        const rawPath = path.join(tmpDir, `${Date.now()}_raw.mp4`);
        const finalPath = path.join(tmpDir, `${Date.now()}_compressed.mp4`);

        const videoRes = await axios.get(downloadUrl, {
            responseType: 'stream',
            headers: { 'User-Agent': 'Mozilla/5.0' }
        });

        await streamPipeline(videoRes.data, fs.createWriteStream(rawPath));

        // Ajuste din√°mico de compresi√≥n
        let crf = 26;
        let bVideo = '600k';
        let bAudio = '128k';
        if (minutes <= 2) {
            crf = 24; bVideo = '800k';
        } else if (minutes > 5) {
            crf = 28; bVideo = '400k'; bAudio = '96k';
        }

        await new Promise((resolve, reject) => {
            ffmpeg(rawPath)
                .videoCodec('libx264')
                .audioCodec('aac')
                .outputOptions([
                    '-preset', 'veryfast',
                    `-crf`, `${crf}`,
                    `-b:v`, bVideo,
                    `-b:a`, bAudio,
                    '-movflags', '+faststart'
                ])
                .on('end', resolve)
                .on('error', reject)
                .save(finalPath);
        });

        const finalText = `üé¨ Aqu√≠ tiene su video en calidad ${quality}p.

Disfr√∫telo y contin√∫e explorando el mundo digital.

¬© Azura Ultra 2.0 Bot`;

        await sock.sendMessage(msg.key.remoteJid, {
            video: fs.readFileSync(finalPath),
            mimetype: 'video/mp4',
            fileName: `${title}.mp4`,
            caption: finalText
        }, { quoted: msg });

        fs.unlinkSync(rawPath);
        fs.unlinkSync(finalPath);

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚úÖ', key: msg.key }
        });

    } catch (err) {
        console.error(err);
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ùå *Error:* ${err.message}`
        }, { quoted: msg });
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚ùå', key: msg.key }
        });
    }

    break;
}

case 'play1': {
    const yts = require('yt-search');
    const axios = require('axios');
    const fs = require('fs');
    const path = require('path');
    const { pipeline } = require('stream');
    const { promisify } = require('util');
    const ffmpeg = require('fluent-ffmpeg');
    const streamPipeline = promisify(pipeline);

    const formatAudio = ['mp3', 'm4a', 'webm', 'acc', 'flac', 'opus', 'ogg', 'wav'];

    const ddownr = {
        download: async (url, format) => {
            if (!formatAudio.includes(format)) {
                throw new Error('Formato no soportado.');
            }

            const config = {
                method: 'GET',
                url: `https://p.oceansaver.in/ajax/download.php?format=${format}&url=${encodeURIComponent(url)}&api=dfcb6d76f2f6a9894gjkege8a4ab232222`,
                headers: { 'User-Agent': 'Mozilla/5.0' }
            };

            const response = await axios.request(config);
            if (response.data && response.data.success) {
                const { id, title, info } = response.data;
                const downloadUrl = await ddownr.cekProgress(id);
                return { title, downloadUrl, thumbnail: info.image };
            } else {
                throw new Error('No se pudo obtener la info del video.');
            }
        },
        cekProgress: async (id) => {
            const config = {
                method: 'GET',
                url: `https://p.oceansaver.in/ajax/progress.php?id=${id}`,
                headers: { 'User-Agent': 'Mozilla/5.0' }
            };

            while (true) {
                const response = await axios.request(config);
                if (response.data?.success && response.data.progress === 1000) {
                    return response.data.download_url;
                }
                await new Promise(resolve => setTimeout(resolve, 5000));
            }
        }
    };

    await sock.sendMessage(msg.key.remoteJid, { react: { text: "üé∂", key: msg.key } });

    try {
        if (!text || text.trim() === "") {
            await sock.sendMessage(msg.key.remoteJid, {
                text: `‚ö†Ô∏è Escribe por favor el nombre de la canci√≥n.\nEjemplo: *${global.prefix}play1 Boza Yaya*`
            }, { quoted: msg });
            return;
        }

        const search = await yts(text);
        if (!search.videos || search.videos.length === 0) {
            throw new Error('No se encontraron resultados.');
        }

        const video = search.videos[0];
        const { title, url, thumbnail } = video;

        const { downloadUrl } = await ddownr.download(url, 'mp3');

        const tmpDir = path.join(__dirname, 'tmp');
        if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);
        const rawPath = path.join(tmpDir, `${Date.now()}_raw.mp3`);
        const finalPath = path.join(tmpDir, `${Date.now()}_compressed.mp3`);

        const audioRes = await axios.get(downloadUrl, {
            responseType: 'stream',
            headers: { 'User-Agent': 'Mozilla/5.0' }
        });

        await streamPipeline(audioRes.data, fs.createWriteStream(rawPath));

        await new Promise((resolve, reject) => {
            ffmpeg(rawPath)
                .audioBitrate('128k')
                .format('mp3')
                .on('end', resolve)
                .on('error', reject)
                .save(finalPath);
        });

        await sock.sendMessage(msg.key.remoteJid, {
            audio: fs.readFileSync(finalPath),
            fileName: `${title}.mp3`,
            mimetype: "audio/mpeg",
            contextInfo: {
                externalAdReply: {
                    title: title,
                    body: "Œ± ëœÖrŒ± œÖ‚ÑìœÑrŒ± 2.0 –≤œÉœÑ",
                    mediaType: 1,
                    previewType: "PHOTO",
                    thumbnailUrl: thumbnail,
                    showAdAttribution: true,
                    renderLargerThumbnail: true
                }
            }
        }, { quoted: msg });

        fs.unlinkSync(rawPath);
        fs.unlinkSync(finalPath);

    } catch (error) {
        console.error(error);
        await sock.sendMessage(msg.key.remoteJid, {
            text: "‚ö†Ô∏è Hubo un peque√±o error :("
        }, { quoted: msg });
    }

    break;
}


case 'copiarpg': {
    try {
        // Reacci√≥n de archivo listo üìÅ
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "üìÅ", key: msg.key }
        });

        // Verificar si es owner
        if (!isOwner(sender)) {
            return sock.sendMessage(msg.key.remoteJid, {
                text: "‚õî *Solo el propietario del bot puede usar este comando.*"
            }, { quoted: msg });
        }

        const fs = require("fs");
        const filePath = "./rpg.json";

        if (!fs.existsSync(filePath)) {
            return sock.sendMessage(msg.key.remoteJid, {
                text: "‚ùå *El archivo rpg.json no existe.*"
            }, { quoted: msg });
        }

        await sock.sendMessage(msg.key.remoteJid, {
            document: fs.readFileSync(filePath),
            fileName: "rpg.json",
            mimetype: "application/json",
            caption: "üìÇ *Aqu√≠ tienes el archivo RPG actualizado*"
        }, { quoted: msg });

    } catch (error) {
        console.error("‚ùå Error en .copiarpg:", error);
        await sock.sendMessage(msg.key.remoteJid, {
            text: "‚ùå *Ocurri√≥ un error al enviar el archivo RPG.*"
        }, { quoted: msg });
    }
    break;
}
      
case 'robar': {
  try {
    const fs = require("fs");
    const rpgFile = "./rpg.json";
    const userId = msg.key.participant || msg.key.remoteJid;
    const cooldownTime = 10 * 60 * 1000; // 10 minutos

    // ü•∑ Reacci√≥n inicial
    await sock.sendMessage(msg.key.remoteJid, {
      react: { text: "ü•∑", key: msg.key }
    });

    // Verificar si el archivo existe
    if (!fs.existsSync(rpgFile)) {
      return sock.sendMessage(msg.key.remoteJid, {
        text: "‚ùå *Los datos del RPG no est√°n disponibles.*"
      }, { quoted: msg });
    }

    let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

    // Verificar que el ladr√≥n est√© registrado
    if (!rpgData.usuarios[userId]) {
      return sock.sendMessage(msg.key.remoteJid, {
        text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.`
      }, { quoted: msg });
    }

    let usuario = rpgData.usuarios[userId];

    // Verificar que el ladr√≥n tenga vida
    if (usuario.vida <= 0) {
      return sock.sendMessage(msg.key.remoteJid, {
        text: `üöë *¬°No puedes robar! Tu vida es 0.*\nüíâ Usa \`${global.prefix}hospital\` para curarte.`
      }, { quoted: msg });
    }

    let tiempoActual = Date.now();
    if (usuario.cooldowns?.robar && (tiempoActual - usuario.cooldowns.robar) < cooldownTime) {
      let tiempoRestante = ((usuario.cooldowns.robar + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
      return sock.sendMessage(msg.key.remoteJid, {
        text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a robar.*`
      }, { quoted: msg });
    }

    // Obtener ID de la v√≠ctima por menci√≥n o cita
    let targetId = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0] ||
                   msg.message?.extendedTextMessage?.contextInfo?.participant;

    if (!targetId) {
      return sock.sendMessage(msg.key.remoteJid, {
        text: `‚ö†Ô∏è *Debes citar o mencionar al usuario que deseas robar.*\nüìå Ejemplo: \`${global.prefix}robar @usuario\``
      }, { quoted: msg });
    }

    // Verificar si la v√≠ctima est√° registrada
    if (!rpgData.usuarios[targetId]) {
      return sock.sendMessage(msg.key.remoteJid, {
        text: `‚ùå *El usuario al que intentas robar no est√° registrado en el RPG.*`
      }, { quoted: msg });
    }

    // Agregamos el ID para poder usarlo en las menciones
    let victima = {
      ...rpgData.usuarios[targetId],
      id: targetId
    };

    // Calcular si el robo tiene √©xito
    let exito = Math.random() < 0.5;
    let vidaPerdida = exito
      ? Math.floor(Math.random() * (10 - 5 + 1)) + 5
      : Math.floor(Math.random() * (20 - 10 + 1)) + 10;

    usuario.vida = Math.max(0, usuario.vida - vidaPerdida);

    let xpRobado = 0;
    let diamantesRobados = 0;

    if (exito) {
      xpRobado = Math.floor(Math.random() * (3000 - 500 + 1)) + 500;

      if (victima.diamantes > 0) {
        diamantesRobados = Math.min(victima.diamantes, Math.floor(Math.random() * (1500 - 20 + 1)) + 20);
      } else {
        xpRobado += Math.floor(Math.random() * (1000 - 300 + 1)) + 300;
      }

      usuario.experiencia += xpRobado;
      usuario.diamantes += diamantesRobados;

      victima.diamantes = Math.max(0, victima.diamantes - diamantesRobados);
      victima.experiencia = Math.max(0, victima.experiencia - xpRobado);
    } else {
      let xpPerdido = Math.floor(Math.random() * (1000 - 300 + 1)) + 300;
      usuario.experiencia = Math.max(0, usuario.experiencia - xpPerdido);
    }

    // Resultado del robo
    const textosExito = [
      `ü•∑ *${usuario.nombre} rob√≥ exitosamente a @${victima.id.split('@')[0]}.*\nüíé *Diamantes robados:* ${diamantesRobados}\n‚ú® *XP robada:* ${xpRobado}`,
      `üí∞ *¬°Plan maestro! ${usuario.nombre} enga√±√≥ a @${victima.id.split('@')[0]} y se fue con el bot√≠n.*\nüíé *Diamantes:* ${diamantesRobados}\nüéØ *XP:* ${xpRobado}`,
      `üöÄ *Sigiloso como un ninja, ${usuario.nombre} despoj√≥ a @${victima.id.split('@')[0]}.*\nüíé *Diamantes:* ${diamantesRobados}\nüß† *XP:* ${xpRobado}`
    ];
    const textosFracaso = [
      `üö® *¬°${usuario.nombre} fue atrapado intentando robar y recibi√≥ un castigo!*\n‚ù§Ô∏è *Vida perdida:* ${vidaPerdida}`,
      `‚ùå *Intento fallido... ${usuario.nombre} quiso robar a @${victima.id.split('@')[0]} pero fue descubierto.*\n‚ù§Ô∏è *Vida perdida:* ${vidaPerdida}`
    ];

    const mensajeResultado = exito
      ? textosExito[Math.floor(Math.random() * textosExito.length)]
      : textosFracaso[Math.floor(Math.random() * textosFracaso.length)];

    await sock.sendMessage(msg.key.remoteJid, {
      text: mensajeResultado,
      mentions: [userId, targetId]
    }, { quoted: msg });

    // Posibilidad de subir habilidad
    let habilidadesArray = Object.keys(usuario.habilidades || {});
    if (habilidadesArray.length > 0 && Math.random() < 0.3) {
      let habilidadSubida = habilidadesArray[Math.floor(Math.random() * habilidadesArray.length)];
      usuario.habilidades[habilidadSubida].nivel += 1;
      await sock.sendMessage(msg.key.remoteJid, {
        text: `üåü *¬°${usuario.nombre} ha mejorado su habilidad!*\nüîπ *${habilidadSubida}: Nivel ${usuario.habilidades[habilidadSubida].nivel}*`
      }, { quoted: msg });
    }

    // Subida de nivel
    let xpMaxNivel = usuario.nivel === 1 ? 1000 : usuario.nivel * 1500;
    while (usuario.experiencia >= xpMaxNivel && usuario.nivel < 50) {
      usuario.experiencia -= xpMaxNivel;
      usuario.nivel += 1;
      await sock.sendMessage(msg.key.remoteJid, {
        text: `üéâ *¬°${usuario.nombre} ha subido al nivel ${usuario.nivel}! üèÜ*`
      }, { quoted: msg });
      xpMaxNivel = usuario.nivel * 1500;
    }

    // Subida de rango
    const rangos = [
      { nivel: 1, rango: "üåü Novato" },
      { nivel: 5, rango: "‚öîÔ∏è Ladr√≥n Aprendiz" },
      { nivel: 10, rango: "üî• Criminal Experto" },
      { nivel: 20, rango: "üëë Maestro del Robo" },
      { nivel: 30, rango: "üåÄ Se√±or del Crimen" },
      { nivel: 40, rango: "üíÄ Rey de los Ladrones" },
      { nivel: 50, rango: "üöÄ Legendario" }
    ];

    let rangoAnterior = usuario.rango;
    usuario.rango = rangos.reduce((acc, curr) => (usuario.nivel >= curr.nivel ? curr.rango : acc), usuario.rango);

    if (usuario.rango !== rangoAnterior) {
      await sock.sendMessage(msg.key.remoteJid, {
        text: `üéñÔ∏è *¬°${usuario.nombre} ha subido de rango a ${usuario.rango}!*`
      }, { quoted: msg });
    }

    usuario.cooldowns = usuario.cooldowns || {};
    usuario.cooldowns.robar = tiempoActual;

    // Guardar cambios
    fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));
    
  } catch (error) {
    console.error("‚ùå Error en el comando .robar:", error);
    await sock.sendMessage(msg.key.remoteJid, {
      text: "‚ùå *Ocurri√≥ un error al intentar robar. Int√©ntalo de nuevo m√°s tarde.*"
    }, { quoted: msg });
  }
  break;
}
      
case 'tran':
case 'transferir': {
  await sock.sendMessage(msg.key.remoteJid, { react: { text: "üí±", key: msg.key } });

  const amount = parseInt(args[0]);
  if (!amount || amount <= 0) {
    return await sock.sendMessage(msg.key.remoteJid, { text: `‚ö†Ô∏è Uso correcto: \`${global.prefix}tran <cantidad>\` (cita o menciona al usuario).` }, { quoted: msg });
  }

  const mentioned = msg.message.extendedTextMessage?.contextInfo?.mentionedJid?.[0];
  const quotedParticipant = msg.message.extendedTextMessage?.contextInfo?.participant;
  const targetJid = mentioned || quotedParticipant;
  if (!targetJid) {
    return await sock.sendMessage(msg.key.remoteJid, { text: "‚ö†Ô∏è Debes citar o mencionar al usuario al que quieres transferir." }, { quoted: msg });
  }

  const senderJid = `${sender}@s.whatsapp.net`;
  if (senderJid === targetJid) {
    return await sock.sendMessage(msg.key.remoteJid, { text: "‚ö†Ô∏è No puedes transferirte a ti mismo." }, { quoted: msg });
  }

  const rpgFile = "./rpg.json";
  const rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
  const usuarios = rpgData.usuarios || {};

  // Validar que remitente y destinatario est√©n registrados
  if (!usuarios[senderJid]) {
    return await sock.sendMessage(msg.key.remoteJid, { text: `‚ùå No est√°s registrado en el gremio. Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` }, { quoted: msg });
  }
  if (!usuarios[targetJid]) {
    return await sock.sendMessage(msg.key.remoteJid, { text: `‚ùå El usuario @${targetJid.split("@")[0]} no est√° registrado en el gremio.` }, { quoted: msg, mentions: [targetJid] });
  }

  const senderBalance = usuarios[senderJid].diamantes || 0;
  if (senderBalance < amount) {
    return await sock.sendMessage(msg.key.remoteJid, { text: `‚ùå No tienes suficientes diamantes. Tu saldo actual: ${senderBalance}` }, { quoted: msg });
  }

  // Realizar transferencia
  usuarios[senderJid].diamantes -= amount;
  usuarios[targetJid].diamantes += amount;
  fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

  await sock.sendMessage(msg.key.remoteJid, {
    text: `‚úÖ Transferencia exitosa de *${amount}* diamante(s) a @${targetJid.split("@")[0]}.\nüíé Tu nuevo saldo: ${usuarios[senderJid].diamantes}`,
    mentions: [targetJid]
  }, { quoted: msg });

  await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚úÖ", key: msg.key } });
  break;
}
case 'yts': 
case 'ytsearch': {
    const axios = require('axios');

    if (!args.length) {
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ö†Ô∏è *Uso incorrecto.*\nüìå Ejemplo: \`${global.prefix}yts <query>\`` 
        }, { quoted: msg });
        return;
    }

    const query = args.join(' ');
    const apiUrl = `https://api.dorratz.com/v3/yt-search?query=${encodeURIComponent(query)}`;

    await sock.sendMessage(msg.key.remoteJid, { 
        react: { text: "‚è≥", key: msg.key } 
    });

    try {
        const response = await axios.get(apiUrl);
        const { data } = response.data;

        if (!data || data.length === 0) {
            throw new Error('No se encontraron resultados para el texto proporcionado.');
        }

        let results = `üé¨ *Resultados de b√∫squeda para:* ${query}\n\n`;
        results += data.slice(0, 5).map((video, index) => `
üîπ *Resultado ${index + 1}:*
   > *T√≠tulo:* ${video.title}
   > *Canal:* ${video.author.name}
   > *Publicado en:* ${video.publishedAt}
   > *Duraci√≥n:* ${video.duration}
   > *Vistas:* ${video.views.toLocaleString()}
   > *Enlace:* ${video.url}
        `).join('\n\n');

        const thumbnail = data[0].thumbnail;

        await sock.sendMessage(msg.key.remoteJid, { 
            image: { url: thumbnail },
            caption: results,
            mimetype: 'image/jpeg'
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .yts:", error.message);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ùå *Error al buscar en YouTube:*\n_${error.message}_` 
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } 
        });
    }
    break;
}
case 'gifvideo': {
    try {
        // Reacci√≥n inicial
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "üéûÔ∏è", key: msg.key }
        });

        const quoted = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage;

        if (!quoted || !quoted.videoMessage) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: "‚ö†Ô∏è *Responde a un video para convertirlo en estilo GIF largo.*"
            }, { quoted: msg });
            return;
        }

        // Descargar el video citado
        const stream = await downloadContentFromMessage(quoted.videoMessage, "video");
        let buffer = Buffer.from([]);
        for await (const chunk of stream) {
            buffer = Buffer.concat([buffer, chunk]);
        }

        // Enviar como video estilo GIF largo (sin audio)
        await sock.sendMessage(msg.key.remoteJid, {
            video: buffer,
            gifPlayback: true,
            caption: "üé¨ *Video convertido a estilo GIF largo* (sin audio)"
        }, { quoted: msg });

    } catch (error) {
        console.error("‚ùå Error en .gifvideo:", error);
        await sock.sendMessage(msg.key.remoteJid, {
            text: "‚ùå *Ocurri√≥ un error al procesar el video.*"
        }, { quoted: msg });
    }
    break;
}
      
case 'gremio': {
    try {
        const rpgFile = "./rpg.json";

        // üîÑ Reacci√≥n inicial
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üè∞", key: msg.key }
        });

        // Verificar si existe el archivo RPG
        if (!fs.existsSync(rpgFile)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *El gremio a√∫n no tiene miembros.* Usa `" + global.prefix + "rpg <nombre> <edad>` para registrarte." 
            }, { quoted: msg });
            return;
        }

        // Leer datos del RPG
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        if (!rpgData.usuarios || Object.keys(rpgData.usuarios).length === 0) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "üìú *No hay miembros registrados en el Gremio Azura Ultra.*\nUsa `" + global.prefix + "rpg <nombre> <edad>` para unirte." 
            }, { quoted: msg });
            return;
        }

        let miembros = Object.values(rpgData.usuarios);
        miembros.sort((a, b) => b.nivel - a.nivel); // Orden por nivel descendente

        // Encabezado del mensaje con el total al principio
        let listaMiembros = 
`‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó  
‚ïë üè∞ *Gremio Azura Ultra* üè∞ ‚ïë  
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  

üìã *Total de miembros registrados:* ${miembros.length}\n`;

        // Lista detallada de cada usuario
        miembros.forEach((usuario, index) => {
            const numMascotas = usuario.mascotas ? usuario.mascotas.length : 0;
            const numPersonajes = usuario.personajes ? usuario.personajes.length : 0;

            listaMiembros += `\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
            listaMiembros += `üîπ *${index + 1}.* ${usuario.nombre}\n`;
            listaMiembros += `   üèÖ *Rango:* ${usuario.rango}\n`;
            listaMiembros += `   üéöÔ∏è *Nivel:* ${usuario.nivel}\n`;
            listaMiembros += `   üéÇ *Edad:* ${usuario.edad} a√±os\n`;
            listaMiembros += `   üêæ *Mascotas:* ${numMascotas}\n`;
            listaMiembros += `   üé≠ *Personajes:* ${numPersonajes}\n`;
        });

        // Enviar resultado con fondo animado
        await sock.sendMessage(msg.key.remoteJid, { 
            video: { url: "https://cdn.dorratz.com/files/1740565316697.mp4" }, 
            gifPlayback: true, 
            caption: listaMiembros 
        }, { quoted: msg });

    } catch (error) {
        console.error("‚ùå Error en el comando .gremio:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Hubo un error al obtener la lista del gremio. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });
    }
    break;
}
      
case 'infogrupo': {
  // Verifica que el comando se ejecute en un grupo
  if (!msg.key.remoteJid.endsWith("@g.us")) {
    await sock.sendMessage(msg.key.remoteJid, { 
      text: "‚ö†Ô∏è *Este comando solo funciona en grupos.*" 
    }, { quoted: msg });
    return;
  }
  
  // Env√≠a reacci√≥n inicial
  await sock.sendMessage(msg.key.remoteJid, { 
    react: { text: "üîç", key: msg.key } 
  });
  
  try {
    // Obtiene la metadata del grupo
    let meta = await sock.groupMetadata(msg.key.remoteJid);
    let subject = meta.subject || "Sin nombre";
    let description = meta.desc || "No hay descripci√≥n.";
    
    // Construye el mensaje de informaci√≥n del grupo
    let messageText = `*Informaci√≥n del Grupo:*\n\n*Nombre:* ${subject}\n*Descripci√≥n:* ${description}`;
    
    // Env√≠a el mensaje con la informaci√≥n
    await sock.sendMessage(msg.key.remoteJid, { text: messageText }, { quoted: msg });
    
    // Env√≠a reacci√≥n final de √©xito
    await sock.sendMessage(msg.key.remoteJid, { 
      react: { text: "‚úÖ", key: msg.key } 
    });
  } catch (err) {
    console.error("Error en el comando infogrupo:", err);
    await sock.sendMessage(msg.key.remoteJid, { 
      text: "‚ùå *Error al obtener la informaci√≥n del grupo.*" 
    }, { quoted: msg });
  }
  break;
}
      
          case 'tiktokstalk': {
    const fetch = require('node-fetch');

    if (!text) {
        return sock.sendMessage(msg.key.remoteJid, {
            text: `‚ö†Ô∏è *Uso incorrecto.*\n\nüìå *Ejemplo:* *${global.prefix}tiktokstalk russellxzpty*`
        }, { quoted: msg });
    }

    const username = text.trim();
    const apiUrl = `https://api.dorratz.com/v3/tiktok-stalk?username=${encodeURIComponent(username)}`;

    await sock.sendMessage(msg.key.remoteJid, {
        react: { text: '‚è≥', key: msg.key }
    });

    try {
        const response = await fetch(apiUrl);
        if (!response.ok) {
            throw new Error(`Error de la API: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();

        if (!data.userInfo) {
            throw new Error("No se pudo obtener la informaci√≥n del usuario.");
        }

        const userInfo = data.userInfo;

        const caption = `*Informaci√≥n de TikTok:*\n\n` +
                        `üë§ *Nombre:* ${userInfo.nombre}\n` +
                        `üìå *Usuario:* @${userInfo.username}\n` +
                        `üÜî *ID:* ${userInfo.id}\n` +
                        `üìù *Bio:* ${userInfo.bio}\n` +
                        `‚úÖ *Verificado:* ${userInfo.verificado ? 'S√≠' : 'No'}\n` +
                        `üë• *Seguidores:* ${userInfo.seguidoresTotales}\n` +
                        `üëÄ *Siguiendo:* ${userInfo.siguiendoTotal}\n` +
                        `‚ù§Ô∏è *Me gusta totales:* ${userInfo.meGustaTotales}\n` +
                        `üé• *Videos totales:* ${userInfo.videosTotales}\n` +
                        `ü§ù *Amigos totales:* ${userInfo.amigosTotales}\n\n` +
                        `‚ú® *Informaci√≥n obtenida por Azura Ultra 2.0 Bot*`;

        await sock.sendMessage(msg.key.remoteJid, {
            image: { url: userInfo.avatar },
            caption: caption,
            mimetype: 'image/jpeg'
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚úÖ', key: msg.key }
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .tiktokstalk:", error);
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ùå *Ocurri√≥ un error:* ${error.message}\n\nüîπ Int√©ntalo de nuevo m√°s tarde.`
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚ùå', key: msg.key }
        });
    }
    break;
}  
case 'vision2':
case 'visi√≥n2': {
    const fetch = require('node-fetch');

    if (!args.length) {
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ö†Ô∏è *Uso incorrecto.*\nüìå Ejemplo: \`${global.prefix}visi√≥n mujer cabello plateado\`` 
        }, { quoted: msg });
        return;
    }

    const query = args.join(" ");
    const apiUrl = `https://api.neoxr.eu/api/ai-anime?q=${encodeURIComponent(query)}&apikey=russellxz`;

    await sock.sendMessage(msg.key.remoteJid, { 
        react: { text: "‚è≥", key: msg.key } 
    });

    try {
        const response = await fetch(apiUrl);

        if (!response.ok) {
            throw new Error(`Error de la API: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();

        if (!data.status || !data.data || !data.data.url) {
            throw new Error("No se pudo generar la imagen.");
        }

        const imageUrl = data.data.url;
        const caption = `üé® *Prompt:* ${data.data.prompt}\nüîó *Enlace de la imagen:* ${imageUrl}`;

        await sock.sendMessage(msg.key.remoteJid, { 
            image: { url: imageUrl },
            caption: caption,
            mimetype: 'image/png'
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .visi√≥n:", error.message);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ùå *Error al generar la imagen:*\n_${error.message}_\n\nüîπ Int√©ntalo m√°s tarde.` 
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } 
        });
    }
    break;
}
case 'spotify': {
    const fetch = require('node-fetch');

    if (!text) {
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ö†Ô∏è *Uso incorrecto del comando.*\n\nüìå *Ejemplo:* *${global.prefix}spotify* https://open.spotify.com/track/3NDEO1QeVlxskfRHHGm7KS`
        }, { quoted: msg });
        return;
    }

    if (!/^https?:\/\/(www\.)?open\.spotify\.com\/track\//.test(text)) {
        return sock.sendMessage(msg.key.remoteJid, {
            text: `‚ö†Ô∏è *Enlace no v√°lido.*\n\nüìå Aseg√∫rate de ingresar una URL de Spotify v√°lida.\n\nEjemplo: *${global.prefix}spotify* https://open.spotify.com/track/3NDEO1QeVlxskfRHHGm7KS`
        }, { quoted: msg });
    }

    await sock.sendMessage(msg.key.remoteJid, {
        react: { text: '‚è≥', key: msg.key }
    });

    try {
        const apiUrl = `https://api.neoxr.eu/api/spotify?url=${encodeURIComponent(text)}&apikey=russellxz`;
        const response = await fetch(apiUrl);

        if (!response.ok) {
            throw new Error(`Error de la API: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();

        if (!data.status || !data.data || !data.data.url) {
            throw new Error("No se pudo obtener el enlace de descarga.");
        }

        const songInfo = data.data;

        const caption = `üéµ *T√≠tulo:* ${songInfo.title}\n` +
                        `üé§ *Artista:* ${songInfo.artist.name}\n` +
                        `‚è±Ô∏è *Duraci√≥n:* ${songInfo.duration}\n` +
                        `üîó *Enlace de descarga:* ${songInfo.url}`;

        await sock.sendMessage(msg.key.remoteJid, {
            image: { url: songInfo.thumbnail },
            caption: caption,
            mimetype: 'image/jpeg'
        }, { quoted: msg });

        const audioResponse = await fetch(songInfo.url);
        if (!audioResponse.ok) {
            throw new Error("No se pudo descargar el archivo de audio.");
        }

        const audioBuffer = await audioResponse.buffer();

        await sock.sendMessage(msg.key.remoteJid, {
            audio: audioBuffer,
            mimetype: 'audio/mpeg',
            fileName: `${songInfo.title}.mp3`
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚úÖ', key: msg.key }
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .spotify:", error);
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ùå *Ocurri√≥ un error:* ${error.message}\n\nüîπ Int√©ntalo de nuevo m√°s tarde.`
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚ùå', key: msg.key }
        });
    }
    break;
}
case 'mediafire': {
    const fetch = require('node-fetch');

    if (!text) {
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ö†Ô∏è *Uso incorrecto.*\nüìå Ejemplo: \`${global.prefix}mediafire https://www.mediafire.com/file/ejemplo/file.zip\`` 
        }, { quoted: msg });
        return;
    }

    if (!/^https?:\/\/(www\.)?mediafire\.com/.test(text)) {
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ö†Ô∏è *Enlace no v√°lido.*\nüìå Aseg√∫rate de ingresar una URL de MediaFire v√°lida.\n\nEjemplo: \`${global.prefix}mediafire https://www.mediafire.com/file/ejemplo/file.zip\`` 
        }, { quoted: msg });
        return;
    }

    await sock.sendMessage(msg.key.remoteJid, { 
        react: { text: '‚è≥', key: msg.key } 
    });

    const mediafireUrl = text;

    try {
        const apiUrl = `https://api.neoxr.eu/api/mediafire?url=${encodeURIComponent(mediafireUrl)}&apikey=russellxz`;
        const response = await fetch(apiUrl);

        if (!response.ok) {
            throw new Error(`Error de la API: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();

        if (!data.status || !data.data || !data.data.url) {
            throw new Error("No se pudo obtener el enlace de descarga.");
        }

        const fileInfo = data.data;
        const fileResponse = await fetch(fileInfo.url);
        if (!fileResponse.ok) {
            throw new Error("No se pudo descargar el archivo.");
        }

        const fileBuffer = await fileResponse.buffer();
        const caption = `üìÇ *Nombre del archivo:* ${fileInfo.title}\n` +
                        `üì¶ *Tama√±o:* ${fileInfo.size}\n` +
                        `üìè *Tipo:* ${fileInfo.mime}\n` +
                        `üîó *Extensi√≥n:* ${fileInfo.extension}\n`;

        await sock.sendMessage(msg.key.remoteJid, { 
            text: caption 
        }, { quoted: msg });
        await sock.sendMessage(msg.key.remoteJid, {
            document: fileBuffer,
            mimetype: fileInfo.mime,
            fileName: fileInfo.title
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: '‚úÖ', key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .mediafire:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ùå *Ocurri√≥ un error al procesar la solicitud:*\n_${error.message}_\n\nüîπ Int√©ntalo de nuevo m√°s tarde.` 
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: '‚ùå', key: msg.key } 
        });
    }
    break;
}
                
                        
            


case 'totalper': {
  try {
    // Agrega una reacci√≥n para indicar que el comando se ha activado
    await sock.sendMessage(msg.key.remoteJid, { react: { text: "üî¢", key: msg.key } });
    
    const fs = require('fs');
    const rpgFile = "./rpg.json";
    if (!fs.existsSync(rpgFile)) {
      await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå No se encontr√≥ el archivo de RPG." }, { quoted: msg });
      return;
    }
    
    // Carga de datos RPG
    let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
    
    // Cuenta la cantidad de personajes en la tienda
    let totalStore = Array.isArray(rpgData.tiendaPersonajes) ? rpgData.tiendaPersonajes.length : 0;
    
    // Cuenta la cantidad de personajes en las carteras de los usuarios
    let totalUsers = 0;
    if (rpgData.usuarios && typeof rpgData.usuarios === "object") {
      for (let user in rpgData.usuarios) {
        if (rpgData.usuarios[user].personajes && Array.isArray(rpgData.usuarios[user].personajes)) {
          totalUsers += rpgData.usuarios[user].personajes.length;
        }
      }
    }
    
    let totalCharacters = totalStore + totalUsers;
    
    let messageText = `üìä *TOTAL DE PERSONAJES EN EL SISTEMA* üìä\n\n`;
    messageText += `*En la tienda:* ${totalStore}\n`;
    messageText += `*En las carteras de usuarios:* ${totalUsers}\n`;
    messageText += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
    messageText += `*Total:* ${totalCharacters}`;
    
    // Env√≠a el mensaje con los resultados
    await sock.sendMessage(msg.key.remoteJid, { text: messageText }, { quoted: msg });
    
    // Reacci√≥n final de √©xito
    await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚úÖ", key: msg.key } });
  } catch (error) {
    console.error("Error en el comando totalper:", error);
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå Ocurri√≥ un error al calcular el total de personajes." }, { quoted: msg });
  }
  break;
}
            
// Comando para cambiar la foto del perfil del bot
case 'botfoto': {
  // Verifica que el usuario sea owner
  if (!global.isOwner(sender)) {
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ö†Ô∏è Solo el owner puede usar este comando." });
    return;
  }
  // Env√≠a una reacci√≥n para indicar que se activ√≥ el comando
  await sock.sendMessage(msg.key.remoteJid, { react: { text: "üì∏", key: msg.key } });
  
  // Verifica que se haya respondido a un mensaje que contenga una imagen
  let quotedMsg = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage;
  if (!quotedMsg || !quotedMsg.imageMessage) {
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ö†Ô∏è Debes responder a un mensaje que contenga una imagen para actualizar la foto del bot." });
    return;
  }
  
  try {
    // Descarga la imagen del mensaje citado
    const stream = await downloadContentFromMessage(quotedMsg.imageMessage, 'image');
    let buffer = Buffer.alloc(0);
    for await (const chunk of stream) {
      buffer = Buffer.concat([buffer, chunk]);
    }
    // Actualiza la foto del bot usando su ID (sock.user.id)
    await sock.updateProfilePicture(sock.user.id, buffer);
    await sock.sendMessage(msg.key.remoteJid, { text: "‚úÖ Foto del bot actualizada correctamente." });
    // Reacci√≥n final de √©xito
    await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚úÖ", key: msg.key } });
  } catch (error) {
    console.error("Error en botfoto:", error);
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå Error al actualizar la foto del bot." });
  }
  break;
}

// Comando para cambiar el nombre del bot
case 'botname': {
  // Verifica que el usuario sea owner
  if (!global.isOwner(sender)) {
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ö†Ô∏è Solo el owner puede usar este comando." });
    return;
  }
  // Env√≠a una reacci√≥n para indicar que se activ√≥ el comando
  await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚úèÔ∏è", key: msg.key } });
  
  // Verifica que se haya proporcionado un nuevo nombre en los argumentos
  let newName = args.join(" ").trim();
  if (!newName) {
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ö†Ô∏è Debes proporcionar un nuevo nombre para el bot." });
    return;
  }
  
  try {
    // Actualiza el nombre del bot (asumiendo que sock.updateProfileName existe)
    await sock.updateProfileName(newName);
    await sock.sendMessage(msg.key.remoteJid, { text: `‚úÖ Nombre del bot actualizado a: ${newName}` });
    // Reacci√≥n final de √©xito
    await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚úÖ", key: msg.key } });
  } catch (error) {
    console.error("Error en botname:", error);
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå Error al actualizar el nombre del bot." });
  }
  break;
}
            
case 'vergrupos': {
  if (!global.isOwner(sender)) {
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ö†Ô∏è Solo el owner puede usar este comando." });
    return;
  }

  await sock.sendMessage(msg.key.remoteJid, { react: { text: "üëÄ", key: msg.key } });

  const fs = require("fs");
  const activosPath = "./activos.json";
  let activos = {};
  if (fs.existsSync(activosPath)) {
    activos = JSON.parse(fs.readFileSync(activosPath, "utf-8"));
  }

  let groups;
  try {
    groups = await sock.groupFetchAllParticipating();
  } catch (error) {
    console.error("Error al obtener grupos:", error);
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå Error al obtener la lista de grupos." });
    return;
  }

  let groupIds = Object.keys(groups);
  if (groupIds.length === 0) {
    await sock.sendMessage(msg.key.remoteJid, { text: "No estoy en ning√∫n grupo." });
    return;
  }

  let messageText = "*üìã Lista de Grupos y Estados Activos:*\n\n";

  for (const groupId of groupIds) {
    let subject = groupId;
    try {
      const meta = await sock.groupMetadata(groupId);
      subject = meta.subject || groupId;
    } catch (e) {}

    const estado = (key) => (activos[key] && activos[key][groupId]) ? "‚úÖ" : "‚ùå";
    const globalEstado = (key) => (activos[key]) ? "‚úÖ" : "‚ùå";

    messageText += `*Grupo:* ${subject}\n`;
    messageText += `*ID:* ${groupId}\n`;
    messageText += `üîí *modoAdmins:* ${estado("modoAdmins")}\n`;
    messageText += `‚õî *apagado:* ${estado("apagado")}\n`;
    messageText += `üö´ *antilink:* ${estado("antilink")}\n`;
    messageText += `üßë‚Äçü¶± *antiarabe:* ${estado("antiarabe")}\n`;
    messageText += `üîû *antiporno:* ${estado("antiporno")}\n`;
    messageText += `üîÑ *antidelete:* ${estado("antidelete")}\n`;
    messageText += `üéÆ *rpgazura:* ${estado("rpgazura")}\n`;
    messageText += `üõë *antis (spam stickers):* ${estado("antis")}\n`;
    messageText += `üëã *welcome:* ${estado("welcome")}\n`;
    messageText += `üåê *modoPrivado (global):* ${globalEstado("modoPrivado")}\n`;
    messageText += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
  }

  await sock.sendMessage(msg.key.remoteJid, { text: messageText });
  break;
}
        
case 'bc': {
  // Verifica que el usuario sea owner
  if (!global.isOwner(sender)) {
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ö†Ô∏è Solo el owner puede usar este comando." });
    return;
  }
  
  // Agrega una reacci√≥n para indicar que el comando ha sido activado
  await sock.sendMessage(msg.key.remoteJid, { react: { text: "üöÄ", key: msg.key } });
  
  // Verifica que se haya citado un mensaje
  let quotedMsg = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage;
  if (!quotedMsg) {
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ö†Ô∏è Debes citar el mensaje que deseas enviar en el comando bc." });
    return;
  }
  
  // Obt√©n la fecha actual en un formato bonito
  const fecha = new Date().toLocaleString("es-ES", { timeZone: "America/Argentina/Buenos_Aires" });
  const header = `üì¢ *COMUNICADO OFICIAL DEL DUE√ëO* üì¢\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nFecha: ${fecha}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;
  
  // Prepara el mensaje a enviar dependiendo del tipo de contenido citado
  let broadcastMsg = {};
  if (quotedMsg.conversation) {
    // Texto simple
    broadcastMsg = { text: header + quotedMsg.conversation };
  } else if (quotedMsg.extendedTextMessage && quotedMsg.extendedTextMessage.text) {
    broadcastMsg = { text: header + quotedMsg.extendedTextMessage.text };
  } else if (quotedMsg.imageMessage) {
    // Imagen con posible caption
    try {
      const stream = await downloadContentFromMessage(quotedMsg.imageMessage, 'image');
      let buffer = Buffer.alloc(0);
      for await (const chunk of stream) {
        buffer = Buffer.concat([buffer, chunk]);
      }
      const imageCaption = quotedMsg.imageMessage.caption ? quotedMsg.imageMessage.caption : "";
      broadcastMsg = { image: buffer, caption: header + imageCaption };
    } catch (error) {
      console.error("Error al descargar imagen:", error);
      await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå Error al procesar la imagen." });
      return;
    }
  } else if (quotedMsg.videoMessage) {
    // Video o GIF con posible caption
    try {
      const stream = await downloadContentFromMessage(quotedMsg.videoMessage, 'video');
      let buffer = Buffer.alloc(0);
      for await (const chunk of stream) {
        buffer = Buffer.concat([buffer, chunk]);
      }
      const videoCaption = quotedMsg.videoMessage.caption ? quotedMsg.videoMessage.caption : "";
      // Si es un GIF (si tiene la propiedad gifPlayback activa), se a√±ade esa opci√≥n
      if (quotedMsg.videoMessage.gifPlayback) {
        broadcastMsg = { video: buffer, caption: header + videoCaption, gifPlayback: true };
      } else {
        broadcastMsg = { video: buffer, caption: header + videoCaption };
      }
    } catch (error) {
      console.error("Error al descargar video:", error);
      await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå Error al procesar el video." });
      return;
    }
  } else if (quotedMsg.audioMessage) {
    // Audio o nota de audio
    try {
      const stream = await downloadContentFromMessage(quotedMsg.audioMessage, 'audio');
      let buffer = Buffer.alloc(0);
      for await (const chunk of stream) {
        buffer = Buffer.concat([buffer, chunk]);
      }
      // Los mensajes de audio no admiten caption, as√≠ que se env√≠a el header aparte
      broadcastMsg = { audio: buffer, mimetype: 'audio/mpeg' };
      await sock.sendMessage(msg.key.remoteJid, { text: header });
    } catch (error) {
      console.error("Error al descargar audio:", error);
      await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå Error al procesar el audio." });
      return;
    }
  } else if (quotedMsg.stickerMessage) {
    // Sticker (los stickers no admiten caption, se env√≠a el header por separado)
    try {
      const stream = await downloadContentFromMessage(quotedMsg.stickerMessage, 'sticker');
      let buffer = Buffer.alloc(0);
      for await (const chunk of stream) {
        buffer = Buffer.concat([buffer, chunk]);
      }
      broadcastMsg = { sticker: buffer };
      // Env√≠a el header en un mensaje aparte
      await sock.sendMessage(msg.key.remoteJid, { text: header });
    } catch (error) {
      console.error("Error al descargar sticker:", error);
      await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå Error al procesar el sticker." });
      return;
    }
  } else {
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå No se reconoce el tipo de mensaje citado." });
    return;
  }
  
  // Obt√©n todos los grupos en los que est√° el bot
  let groups;
  try {
    groups = await sock.groupFetchAllParticipating();
  } catch (error) {
    console.error("Error al obtener grupos:", error);
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå Error al obtener la lista de grupos." });
    return;
  }
  let groupIds = Object.keys(groups);
  
  // Env√≠a el broadcast a cada grupo con un delay de 1 segundo
  for (const groupId of groupIds) {
    try {
      await sock.sendMessage(groupId, broadcastMsg);
      // Delay de 1 segundo
      await new Promise(resolve => setTimeout(resolve, 1000));
    } catch (error) {
      console.error(`Error enviando broadcast a ${groupId}:`, error);
    }
  }
  
  // Notifica al owner que el broadcast se envi√≥ correctamente
  await sock.sendMessage(msg.key.remoteJid, { text: `‚úÖ Broadcast enviado a ${groupIds.length} grupos.` });
  break;
}
        
case 'allmenu': {
    try {
        const fs = require("fs");

        // Verificar archivo de comandos
        const mainFilePath = "./main.js";
        if (!fs.existsSync(mainFilePath)) {
            await sock.sendMessage2(
                msg.key.remoteJid,
                "‚ùå *Error:* No se encontr√≥ el archivo de comandos.",
                msg
            );
            return;
        }

        const chatId = msg.key.remoteJid;

        // Reacci√≥n inicial (se mantiene sendMessage normal)
        await sock.sendMessage(chatId, { 
            react: { text: "üìú", key: msg.key }
        });

        // Leer y procesar comandos
        const mainFileContent = fs.readFileSync(mainFilePath, "utf-8");
        const commandRegex = /case\s+['"]([^'"]+)['"]:/g;
        let commands = [];
        let match;

        while ((match = commandRegex.exec(mainFileContent)) !== null) {
            commands.push(match[1]);
        }

        commands = [...new Set(commands)].sort();
        let totalComandos = commands.length;

        // Construir men√∫
        let commandList = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó  
‚ïë  ùòºùôïùôêùôçùòº ùôêùôáùôèùôçùòº & ùòæùôäùôçùôèùòºùôâùòº  ‚ïë  
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  
        üìú *Men√∫ Completo*  
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  
üìå ùóßùó¢ùóßùóîùóü ùóóùóò ùóñùó¢ùó†ùóîùó°ùóóùó¢ùó¶: ${totalComandos}  
üìå ùó£ùóøùó≤ùó≥ùó∂ùó∑ùóº ùóîùó∞ùòÅùòÇùóÆùóπ: „Äé${global.prefix}„Äè  
üìå ùó®ùòÄùóÆ „Äé${global.prefix}„Äè ùóÆùóªùòÅùó≤ùòÄ ùó±ùó≤ ùó∞ùóÆùó±ùóÆ ùó∞ùóºùó∫ùóÆùóªùó±ùóº.  
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  
`;

        commands.forEach(cmd => {
            commandList += `‚û´ *${global.prefix}${cmd}*\n`;
        });

        commandList += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  
üë®‚Äçüíª ùòøùôöùô®ùôñùôßùôßùô§ùô°ùô°ùôñùôôùô§ ùô•ùô§ùôß ùôçùô™ùô®ùô®ùôöùô°ùô° ùôìùôï  
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îÇ ùòºùôïùôêùôçùòº ùôêùôáùôèùôçùòº & ùòæùôäùôçùôèùòºùôâùòº ‚îÇ  
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;

        // Enviar usando sendMessage2
        await sock.sendMessage2(
  chatId,
  {
    image: { url: "https://cdn.dorratz.com/files/1744666819010.jpg" }, 
    caption: commandList 
  },
  msg 
);
    } catch (error) {
        console.error("Error en comando allmenu:", error);
        await sock.sendMessage2(
            msg.key.remoteJid,
            "‚ùå *Ocurri√≥ un error al obtener la lista de comandos. Int√©ntalo de nuevo.*",
            msg
        );
    }
    break;
}
case 'menuowner': {
  try {
    await sock.sendMessage(msg.key.remoteJid, {
      react: { text: "üëë", key: msg.key }
    });

    const chatId = msg.key.remoteJid;
    const captionText = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó  
‚ïë     ùòºùôïùôêùôçùòº ùôêùôáùôèùôçùòº & ùòæùôäùôçùôèùòºùôâùòº    ‚ïë  
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  

            ùêåùêÑùêçùêî ùêéùêñùêçùêÑùêë  
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  
üìå ùóñùó¢ùó†ùóîùó°ùóóùó¢ùó¶ ùóòùó¶ùó£ùóòùóñùóúùóîùóüùóòùó¶  
        (ùêèùêÄùêëùêÄ ùêÑùêã ùêÉùêîùêÑ√ëùêé)  
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  
‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ  
‚û† ${global.prefix}bc  
‚û† ${global.prefix}rest  
‚û† ${global.prefix}carga
‚û† ${global.prefix}cargabots
‚û† ${global.prefix}delsesion
‚û† ${global.prefix}delsubbots
‚û† ${global.prefix}deltmp
‚û† ${global.prefix}modoprivado on/off  
‚û† ${global.prefix}addmascota  
‚û† ${global.prefix}addper  
‚û† ${global.prefix}botfoto  
‚û† ${global.prefix}botname  
‚û† ${global.prefix}git  
‚û† ${global.prefix}dar  
‚û† ${global.prefix}dame  
‚û† ${global.prefix}addlista  
‚û† ${global.prefix}deletelista
‚û† ${global.prefix}setprefix
‚û† ${global.prefix}re
‚û† ${global.prefix}antideletepri on o off
‚û† ${global.prefix}unre
‚û† ${global.prefix}apagar
‚û† ${global.prefix}prender

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ  

      ùóóùó≤ùòÄùóÆùóøùóøùóºùóπùóπùóÆùó±ùóº ùóΩùóºùóø:  ≥·µòÀ¢À¢·µâÀ°À° À£·∂ª  

         ùôñùôØùô™ùôßùôñ ùô™ùô°ùô©ùôßùôñ & ùòæùô§ùôßùô©ùôñùô£ùôñ`;

    const videoResponse = await axios.get(
      "https://cdn.dorratz.com/files/1741471185939.mp4",
      { responseType: 'arraybuffer' }
    );

await sock.sendMessage2(
  chatId,
  {
    image: { url: "https://cdn.dorratz.com/files/1744667309694.jpg" }, 
    caption: captionText 
  },
  msg 
);

  } catch (error) {
    console.error("Error en menuowner:", error);
    await sock.sendMessage2(
      msg.key.remoteJid,
      "‚ùå Ocurri√≥ un error al mostrar el men√∫ Owner",
      msg
    );
  }
  break;
}
case 'menurpg': {
  try {
    await sock.sendMessage(msg.key.remoteJid, {
      react: { text: "‚öîÔ∏è", key: msg.key }
    });

    const chatId = msg.key.remoteJid;
    const menuText = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó  
‚ïë   ùòºùôïùôêùôçùòº ùôêùôáùôèùôçùòº & ùòæùôäùôçùôèùòºùôâùòº ‚ïë  
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  

‚ú¶ ùêÅùêàùêÑùêçùêïùêÑùêçùêàùêÉùêé ùêÄùêã ùêåùêÑùêçùêî ùêëùêèùêÜ ‚ú¶  
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  
‚û§ ùó£ùó•ùóòùóôùóúùóùùó¢ ùóîùóñùóßùó®ùóîùóü: ${global.prefix}  
‚û§ ùó£ùóîùó•ùóî ùóòùó†ùó£ùóòùó≠ùóîùó•, ùó®ùó¶ùóî:  
${global.prefix}rpg <nombre> <edad>  
As√≠ te registras  
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  

üìå ùóñùó¢ùó†ùóîùó°ùóóùó¢ùó¶ ùóóùóò ùó®ùó¶ùó®ùóîùó•ùóúùó¢ùó¶  
‚û§ ${global.prefix}nivel ‚û§ ${global.prefix}picar  
‚û§ ${global.prefix}minar ‚û§ ${global.prefix}minar2  
‚û§ ${global.prefix}work ‚û§ ${global.prefix}crime  
‚û§ ${global.prefix}robar ‚û§ ${global.prefix}cofre  
‚û§ ${global.prefix}claim ‚û§ ${global.prefix}batallauser  
‚û§ ${global.prefix}hospital ‚û§ ${global.prefix}hosp  

üìå ùóñùó¢ùó†ùóîùó°ùóóùó¢ùó¶ ùóóùóò ùó£ùóòùó•ùó¶ùó¢ùó°ùóîùóùùóòùó¶  
‚û§ ${global.prefix}luchar ‚û§ ${global.prefix}poder  
‚û§ ${global.prefix}volar ‚û§ ${global.prefix}otromundo  
‚û§ ${global.prefix}otrouniverso ‚û§ ${global.prefix}mododios  
‚û§ ${global.prefix}mododiablo ‚û§ ${global.prefix}podermaximo  
‚û§ ${global.prefix}enemigos ‚û§ ${global.prefix}nivelper  
‚û§ ${global.prefix}per ‚û§ ${global.prefix}bolasdeldragon  
‚û§ ${global.prefix}vender ‚û§ ${global.prefix}quitarventa  
‚û§ ${global.prefix}batallaanime ‚û§ ${global.prefix}comprar  
‚û§ ${global.prefix}tiendaper ‚û§ ${global.prefix}alaventa  
‚û§ ${global.prefix}verper

üìå ùóñùó¢ùó†ùóîùó°ùóóùó¢ùó¶ ùóóùóò ùó†ùóîùó¶ùóñùó¢ùóßùóîùó¶  
‚û§ ${global.prefix}daragua ‚û§ ${global.prefix}darcari√±o  
‚û§ ${global.prefix}darcomida ‚û§ ${global.prefix}presumir  
‚û§ ${global.prefix}cazar ‚û§ ${global.prefix}entrenar  
‚û§ ${global.prefix}pasear ‚û§ ${global.prefix}supermascota  
‚û§ ${global.prefix}mascota ‚û§ ${global.prefix}curar  
‚û§ ${global.prefix}nivelmascota ‚û§ ${global.prefix}batallamascota  
‚û§ ${global.prefix}compra ‚û§ ${global.prefix}tiendamascotas  
‚û§ ${global.prefix}vermascotas

üìå ùó¢ùóßùó•ùó¢ùó¶ ùóñùó¢ùó†ùóîùó°ùóóùó¢ùó¶
‚û§ ${global.prefix}addmascota ‚û§ ${global.prefix}addper  
‚û§ ${global.prefix}deleteuser ‚û§ ${global.prefix}deleteper  
‚û§ ${global.prefix}deletemascota ‚û§ ${global.prefix}totalper  
‚û§ ${global.prefix}tran ‚û§ ${global.prefix}transferir  
‚û§ ${global.prefix}dame ‚û§ ${global.prefix}dep
‚û§ ${global.prefix}bal ‚û§ ${global.prefix}saldo
‚û§ ${global.prefix}retirar ‚û§ ${global.prefix}depositar
‚û§ ${global.prefix}retirar ‚û§ ${global.prefix}delrpg
‚û§ ${global.prefix}rpgazura on o off

üìå ùóñùó¢ùó†ùóîùó°ùóóùó¢ùó¶ ùóóùóò ùóßùó¢ùó£  
‚û§ ${global.prefix}topuser ‚û§ ${global.prefix}topmascotas  
‚û§ ${global.prefix}topper  

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  
ùóóùóòùó¶ùóîùó•ùó•ùó¢ùóüùóüùóîùóóùó¢ ùó£ùó¢ùó•: russell xz  

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îÇ ùòºùôïùôêùôçùòº ùôêùôáùôèùôçùòº & ùòæùôäùôçùôèùòºùôâùòº ‚îÇ  
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;

    const videoUrl = "https://cdn.dorratz.com/files/1741474416069.mp4";
    const videoBuffer = (await axios.get(videoUrl, { responseType: 'arraybuffer' })).data;

await sock.sendMessage2(
  chatId,
  {
    image: { url: "https://cdn.dorratz.com/files/1744667713683.jpg" }, 
    caption: menuText
  },
  msg 
);

  } catch (error) {
    console.error("Error en menurpg:", error);
    await sock.sendMessage2(
      msg.key.remoteJid,
      "‚ùå Error al mostrar el men√∫ RPG",
      msg
    );
  }
  break;
}        
case 'menu': {
  try {
    // Reacci√≥n inicial (se mantiene sendMessage normal)
    await sock.sendMessage(msg.key.remoteJid, {
      react: { text: "üìú", key: msg.key }
    });

    const chatId = msg.key.remoteJid;
    const captionText = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó  
‚ïë ùêÄùêôùêîùêëùêÄ ùêîùêãùêìùêëùêÄ & ùêÇùêéùêëùêìùêÄùêçùêÄ  ‚ïë  
‚ïë   ü§ñ ùòºùôéùôÑùôéùôèùôÄùôâùôèùôÄ ü§ñ   ‚ïë  
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îÇ ‚ú¶ ùôàùôÄùôâùôê ùôÇùôÄùôâùôÄùôçùòºùôá ‚ú¶ ‚îÇ  
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ  

‚éî ùó£ùóøùó≤ùó≥ùó∂ùó∑ùóº ùóîùó∞ùòÅùòÇùóÆùóπ: „Äé${global.prefix}„Äè  
‚éî ùó®ùòÄùóÆ „Äé${global.prefix}„Äè ùóÆùóªùòÅùó≤ùòÄ ùó±ùó≤ ùó∞ùóÆùó±ùóÆ ùó∞ùóºùó∫ùóÆùóªùó±ùóº.  

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îÇ ‚ú¶ ùó®ùó°ùóòùóßùóò ùóî ùó°ùó®ùóòùó¶ùóßùó•ùó¢ ùó¶ùóúùó¶ùóßùóòùó†ùóî ùóóùóò ùó¶ùó®ùóïùóïùó¢ùóßùó¶(ùóõùóîùó≠ùóßùóò ùóïùó¢ùóß) ‚ú¶ ‚îÇ  
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ  

üëæ *Hazte subbot en nuestro sistema, te voy a mostrar la lista de comandos para gesti√≥nar/hacerte subbot: 

‚éî ${global.prefix}serbot / ${global.prefix}jadibot
‚éî ${global.prefix}sercode / ${global.prefix}code
‚éî ${global.prefix}delbots
¬∞ mas comandos en el menu de subbots...

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îÇ ‚ú¶ ùôÑùôâùôÅùôäùôçùôàùòºùòæùôÑùôäùôâ ‚ú¶ ‚îÇ  
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚éî ${global.prefix}speedtest  
‚éî ${global.prefix}ping  
‚éî ${global.prefix}creador    

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îÇ ‚ú¶ ùôàùôÄùôâùôêùôé ùòøùôÑùôéùôãùôäùôâùôÑùòΩùôáùôÄùôé ‚ú¶ ‚îÇ  
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ  
‚éî ${global.prefix}allmenu  
‚éî ${global.prefix}menugrupo  
‚éî ${global.prefix}menuaudio  
‚éî ${global.prefix}menurpg  
‚éî ${global.prefix}info  
‚éî ${global.prefix}menuowner  
‚éî ${global.prefix}menufree

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îÇ ‚ú¶ PARA VENTAS ‚ú¶ ‚îÇ  
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ  
‚éî ${global.prefix}setstock
‚éî ${global.prefix}stock
‚éî ${global.prefix}setnetflix
‚éî ${global.prefix}netflix
‚éî ${global.prefix}setpago
‚éî ${global.prefix}pago
‚éî ${global.prefix}setcombos
‚éî ${global.prefix}setreglas
‚éî ${global.prefix}reglas
‚éî ${global.prefix}combos
‚éî ${global.prefix}sorteo

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îÇ ‚ú¶ ùôÑùòº - ùòæùôÉùòºùôè ùòΩùôäùôè ‚ú¶ ‚îÇ  
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ  
‚éî ${global.prefix}gemini  
‚éî ${global.prefix}chatgpt
‚éî ${global.prefix}dalle
‚éî ${global.prefix}visi√≥n 
‚éî ${global.prefix}simi
‚éî ${global.prefix}visi√≥n2
‚éî ${global.prefix}chat on o off
‚éî ${global.prefix}lumi on o off
‚éî ${global.prefix}luminai

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îÇ ‚ú¶ ùòøùôÄùôéùòæùòºùôçùôÇùòº ‚ú¶ ‚îÇ  
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ  
‚éî ${global.prefix}play ‚Üí t√≠tulo  
‚éî ${global.prefix}playdoc ‚Üí t√≠tulo  
‚éî ${global.prefix}play1 ‚Üí t√≠tulo  
‚éî ${global.prefix}play2 ‚Üí t√≠tulo  
‚éî ${global.prefix}play2doc ‚Üí t√≠tulo  
‚éî ${global.prefix}play3 spotify ‚Üí titulo
‚éî ${global.prefix}play5 ‚Üí titulo
‚éî ${global.prefix}play6 ‚Üí titulo
‚éî ${global.prefix}ytmp3 ‚Üí link  
‚éî ${global.prefix}ytmp3doc ‚Üí link
‚éî ${global.prefix}ytmp35 ‚Üí link  
‚éî ${global.prefix}get ‚Üí responder a un estado.
‚éî ${global.prefix}ytmp4 ‚Üí link  
‚éî ${global.prefix}ytmp4doc ‚Üí link  
‚éî ${global.prefix}ytmp45 ‚Üí link  
‚éî ${global.prefix}tiktok ‚Üí link  
‚éî ${global.prefix}fb ‚Üí link  
‚éî ${global.prefix}ig ‚Üí link  
‚éî ${global.prefix}spotify ‚Üí link
‚éî ${global.prefix}mediafire ‚Üí link
‚éî ${global.prefix}apk ‚Üí t√≠tulo

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îÇ ‚ú¶ ùòΩùôêùôéùòæùòºùòøùôäùôçùôÄùôé  ‚ú¶ ‚îÇ  
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ  

‚éî ${global.prefix}pixai ‚Üí titulo
‚éî ${global.prefix}Tiktoksearch ‚Üí t√≠tulo
‚éî ${global.prefix}Yts ‚Üí t√≠tulo
‚éî ${global.prefix}tiktokstalk ‚Üí usuario

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îÇ ‚ú¶ ùòæùôäùôâùôëùôÄùôçùôèùôÑùòøùôäùôçùôÄùôé ‚ú¶ ‚îÇ  
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ 
 
‚éî ${global.prefix}tomp3  
‚éî ${global.prefix}tts  
‚éî ${global.prefix}tovideo
‚éî ${global.prefix}toimg
‚éî ${global.prefix}gifvideo ‚Üí responde a un video.
‚éî ${global.prefix}ff
‚éî ${global.prefix}ff2

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îÇ ‚ú¶ ùôéùôèùôÑùòæùôÜùôÄùôçùôé ‚ú¶ ‚îÇ  
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ  

‚éî ${global.prefix}s
‚éî ${global.prefix}newpack
‚éî ${global.prefix}addsticker
‚éî ${global.prefix}listpacks
‚éî ${global.prefix}sendpack
‚éî ${global.prefix}qc
‚éî ${global.prefix}qc2
‚éî ${global.prefix}texto

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îÇ ‚ú¶ ùôÉùôÄùôçùôçùòºùôàùôÑùôÄùôâùôèùòºùôé ‚ú¶ ‚îÇ  
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ  

‚éî ${global.prefix}ver ‚Üí responder a un mensaje  
‚éî ${global.prefix}tourl ‚Üí responder a una imagen/video/musica
‚éî ${global.prefix}whatmusic ‚Üí Responder a un audio(mp3)/video(mp4)
‚éî ${global.prefix}perfil 
‚éî ${global.prefix}get
‚éî ${global.prefix}xxx
‚éî ${global.prefix}carga
‚éî ${global.prefix}addco
‚éî ${global.prefix}delco

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îÇ ‚ú¶ ùôàùôÑùôâùôÑ ùôÖùôêùôÄùôÇùôäùôé ‚ú¶ ‚îÇ  
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ  
‚éî ${global.prefix}verdad  
‚éî ${global.prefix}reto  
‚éî ${global.prefix}personalidad  
‚éî ${global.prefix}ship  
‚éî ${global.prefix}parejas  
‚éî ${global.prefix}menurpg

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
‚îÇ ‚ú¶ COMANDO +18 ‚ú¶ ‚îÇ  
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ  
‚éî ${global.prefix}videoxxx
‚éî ${global.prefix}pornololi
‚éî ${global.prefix}nsfwneko
‚éî ${global.prefix}Nsfwwaifu
‚éî ${global.prefix}Waifu
‚éî ${global.prefix}Neko

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ  
 ‚ú¶ ùòºùôïùôêùôçùòº ùôêùôáùôèùôçùòº & ùòæùôäùôçùôèùòºùôâùòº ùôÄùôéùôè√Å ùôÄùôâ ùòæùôäùôâùôéùôèùòºùôâùôèùôÄ ùòøùôÄùôéùòºùôçùôçùôäùôáùôáùôä. 
  ùôéùôÄ ùòºùôÇùôçùôÄùôÇùòºùôç√Åùôâ ùôà√Åùôé ùôÅùôêùôâùòæùôÑùôäùôâùôÄùôé ùôãùôçùôäùôâùôèùôä.   
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ  

üë®‚Äçüíª ùòøùôöùô®ùôñùôßùôßùô§ùô°ùô°ùôñùôôùô§ ùô•ùô§ùôß ùôçùô™ùô®ùô®ùôöùô°ùô° ùôìùôï`;

    // Enviar usando sendMessage2
    await sock.sendMessage2(
  chatId,
  {
    image: { url: "https://cdn.dorratz.com/files/1744672917987.jpg" }, 
    caption: captionText 
  },
  msg 
)

  } catch (error) {
    console.error("Error en comando menu:", error);
    await sock.sendMessage2(
      msg.key.remoteJid,
      "‚ùå *Ocurri√≥ un error al mostrar el men√∫. Int√©ntalo de nuevo.*",
      msg
    );
  }
  break;
}
case 'menugrupo': {
  try {
    await sock.sendMessage(msg.key.remoteJid, {
      react: { text: "üìú", key: msg.key }
    });

    const chatId = msg.key.remoteJid;
    const captionText = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó  
‚ïë  ùêÄùêôùêîùêëùêÄ ùêîùêãùêìùêëùêÄ &  ùêÇùêéùêëùêìùêÄùêçùêÄ   ‚ïë  
‚ïë   üé≠ ùôºùô¥ùôΩùöÑ ùô≥ùô¥ ùô∂‚ÑùùöÑùôøùôæ üé≠   ‚ïë  
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  

üõ† ùêÇùêéùêçùêÖùêàùêÜùêîùêëùêÄùêÇùêà√ìùêç  
‚ï≠‚ú¶ ${global.prefix}setinfo  
‚îú‚ú¶ ${global.prefix}infogrupo
‚îú‚ú¶ ${global.prefix}setname  
‚îú‚ú¶ ${global.prefix}delwelcome
‚îú‚ú¶ ${global.prefix}setwelcome
‚îú‚ú¶ ${global.prefix}antiporno on o off
‚îú‚ú¶ ${global.prefix}antidelete on o off
‚îú‚ú¶ ${global.prefix}setfoto  
‚îú‚ú¶ ${global.prefix}setreglas
‚îú‚ú¶ ${global.prefix}reglas
‚îú‚ú¶ ${global.prefix}welcome on/off  
‚îú‚ú¶ ${global.prefix}despedidas on/off
‚îú‚ú¶ ${global.prefix}modocaliente on/off
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

üî± ùêÄùêÉùêåùêàùêçùêàùêíùêìùêëùêÄùêÇùêà√ìùêç  
‚ï≠‚ú¶ ${global.prefix}daradmins  
‚îú‚ú¶ ${global.prefix}quitaradmins  
‚îú‚ú¶ ${global.prefix}tag  
‚îú‚ú¶ ${global.prefix}tagall  
‚îú‚ú¶ ${global.prefix}modoadmins on o off
‚îú‚ú¶ ${global.prefix}invocar  
‚îú‚ú¶ ${global.prefix}todos  
‚îú‚ú¶ ${global.prefix}totalmensaje
‚îú‚ú¶ ${global.prefix}fantasmas
‚îú‚ú¶ ${global.prefix}fankick
‚îú‚ú¶ ${global.prefix}okfan
‚îú‚ú¶ ${global.prefix}delete
‚îú‚ú¶ ${global.prefix}damelink  
‚îú‚ú¶ ${global.prefix}mute
‚îú‚ú¶ ${global.prefix}unmute
‚îú‚ú¶ ${global.prefix}ban
‚îú‚ú¶ ${global.prefix}unban
‚îú‚ú¶ ${global.prefix}abrir/ automaticamente
‚îú‚ú¶ ${global.prefix}cerrar/ automaticamente
‚îú‚ú¶ ${global.prefix}abrirgrupo  
‚ï∞‚ú¶ ${global.prefix}cerrargrupo  

üõ° ùêíùêÑùêÜùêîùêëùêàùêÉùêÄùêÉ  
‚ï≠‚ú¶ ${global.prefix}antilink on/off  
‚îú‚ú¶ ${global.prefix}antiarabe on/off  
‚îú‚ú¶ ${global.prefix}antis on/off  
‚îú‚ú¶ ${global.prefix}antidelete on/off
‚îú‚ú¶ ${global.prefix}kick  
‚ï∞‚ú¶ ${global.prefix}add

üìå ùêå√Åùêí ùêÇùêéùêåùêÄùêçùêÉùêéùêí ùêèùêë√ìùêóùêàùêåùêÄùêåùêÑùêçùêìùêÑ...

‚ü¢ ùêÄùêôùêîùêëùêÄ ùêîùêãùêìùêëùêÄ & ùêÇùêéùêëùêìùêÄùêçùêÄ ‚ü£`;

    const videoResponse = await axios.get("https://cdn.dorratz.com/files/1741471817068.mp4", { 
      responseType: 'arraybuffer' 
    });

    await sock.sendMessage2(
  chatId,
  {
    image: { url: "https://cdn.dorratz.com/files/1744666186448.jpg" }, 
    caption: captionText 
  },
  msg
)

  } catch (error) {
    console.error("Error en menugrupo:", error);
    await sock.sendMessage2(
      msg.key.remoteJid,
      "‚ùå Ocurri√≥ un error al mostrar el men√∫ de grupo",
      msg
    );
  }
  break;
}
            
case 'setinfo': {
  try {
    const chatId = msg.key.remoteJid;

    // Verificar que se use en un grupo
    if (!chatId.endsWith("@g.us")) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è *Este comando solo se puede usar en grupos.*" }, { quoted: msg });
      return;
    }

    // Obtener metadata del grupo para verificar permisos
    const groupMetadata = await sock.groupMetadata(chatId);
    const senderId = msg.key.participant || msg.key.remoteJid;
    const senderParticipant = groupMetadata.participants.find(p => p.id === senderId);
    const isSenderAdmin = senderParticipant && (senderParticipant.admin === "admin" || senderParticipant.admin === "superadmin");

    // Solo los admins y el isOwner pueden usar este comando
    if (!isSenderAdmin && !isOwner(senderId)) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è *Solo los administradores o el propietario pueden cambiar la descripci√≥n del grupo.*" }, { quoted: msg });
      return;
    }

    // Verificar que se haya proporcionado una nueva descripci√≥n
    let newDescription = args.join(" ");
    if (!newDescription) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è *Debes proporcionar una nueva descripci√≥n para el grupo.*\nEjemplo: `.setinfo Nueva descripci√≥n del grupo`" }, { quoted: msg });
      return;
    }

    // Enviar reacci√≥n inicial
    await sock.sendMessage(chatId, { react: { text: "üìù", key: msg.key } });

    // Cambiar la descripci√≥n del grupo
    await sock.groupUpdateDescription(chatId, newDescription);

    // Confirmar el cambio
    await sock.sendMessage(chatId, { text: `‚úÖ *Descripci√≥n del grupo actualizada con √©xito.*\n\nüìå *Nueva descripci√≥n:* ${newDescription}` }, { quoted: msg });

    // Enviar reacci√≥n de √©xito
    await sock.sendMessage(chatId, { react: { text: "‚úÖ", key: msg.key } });

  } catch (error) {
    console.error("‚ùå Error en el comando setinfo:", error);
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al actualizar la descripci√≥n del grupo.*" }, { quoted: msg });

    // Enviar reacci√≥n de error
    await sock.sendMessage(chatId, { react: { text: "‚ùå", key: msg.key } });
  }
  break;
}
        
case 'daradmin':
case 'daradmins': {
  try {
    const chatId = msg.key.remoteJid;
    // Verificar que se use en un grupo
    if (!chatId.endsWith("@g.us")) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è Este comando solo se puede usar en grupos." }, { quoted: msg });
      return;
    }
    // Enviar reacci√≥n inicial
    await sock.sendMessage(chatId, { react: { text: "üîë", key: msg.key } });
    
    // Obtener metadata del grupo y verificar permisos del emisor
    const groupMetadata = await sock.groupMetadata(chatId);
    const senderId = msg.key.participant || msg.key.remoteJid;
    const senderParticipant = groupMetadata.participants.find(p => p.id === senderId);
    const isSenderAdmin = senderParticipant && (senderParticipant.admin === "admin" || senderParticipant.admin === "superadmin");
    if (!isSenderAdmin && !isOwner(senderId)) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è Solo los administradores o el propietario pueden otorgar derechos de admin." }, { quoted: msg });
      return;
    }
    
    // Obtener el usuario objetivo (por reply o menci√≥n)
    let targetId = msg.message?.extendedTextMessage?.contextInfo?.participant || (msg.mentionedJid && msg.mentionedJid[0]);
    if (!targetId) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è Debes responder a un mensaje o mencionar a un usuario para promoverlo." }, { quoted: msg });
      return;
    }
    
    // Promover al usuario a admin
    await sock.groupParticipantsUpdate(chatId, [targetId], "promote");
    await sock.sendMessage(
      chatId,
      { text: `‚úÖ Se ha promovido a @${targetId.split("@")[0]} a administrador.`, mentions: [targetId] },
      { quoted: msg }
    );
    // Enviar reacci√≥n de √©xito
    await sock.sendMessage(chatId, { react: { text: "‚úÖ", key: msg.key } });
  } catch (error) {
    console.error("‚ùå Error en el comando daradmin(s):", error);
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå Ocurri√≥ un error al otorgar derechos de admin." }, { quoted: msg });
  }
  break;
}

// Comando para quitar derechos de admin (quitaradmin / quitaradmins)

case 'damelink': {
  try {
    const chatId = msg.key.remoteJid;
    // Verificar que se use en un grupo
    if (!chatId.endsWith("@g.us")) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è *Este comando solo se puede usar en grupos.*" }, { quoted: msg });
      return;
    }
    
    // Enviar reacci√≥n inicial
    await sock.sendMessage(chatId, { react: { text: "üîó", key: msg.key } });
    
    // Esperar un poco para simular "carga"
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Obtener el c√≥digo de invitaci√≥n del grupo
    let code = await sock.groupInviteCode(chatId);
    if (!code) {
      throw new Error("No se pudo obtener el c√≥digo de invitaci√≥n.");
    }
    let link = "https://chat.whatsapp.com/" + code;
    
    // Enviar el mensaje con el enlace
    await sock.sendMessage(
      chatId,
      { text: `üîó *Aqu√≠ tienes el enlace del grupo:*\n${link}` },
      { quoted: msg }
    );
    
    // Enviar reacci√≥n final
    await sock.sendMessage(chatId, { react: { text: "‚úÖ", key: msg.key } });
  } catch (error) {
    console.error("‚ùå Error en el comando damelink:", error);
    await sock.sendMessage(
      msg.key.remoteJid,
      { text: "‚ùå *Ocurri√≥ un error al generar el enlace del grupo.*" },
      { quoted: msg }
    );
  }
  break;
}

case 'add': {
  try {
    const chatId = msg.key.remoteJid;
    // Verificar que se use en un grupo
    if (!chatId.endsWith("@g.us")) {
      await sock.sendMessage(
        chatId,
        { text: "‚ö†Ô∏è *Este comando solo se puede usar en grupos.*" },
        { quoted: msg }
      );
      return;
    }
    
    // Enviar reacci√≥n inicial al recibir el comando
    await sock.sendMessage(
      chatId,
      { react: { text: "üöÄ", key: msg.key } }
    );
    
    // Obtener metadata del grupo para verificar permisos
    const groupMetadata = await sock.groupMetadata(chatId);
    const senderId = msg.key.participant || msg.key.remoteJid;
    const senderParticipant = groupMetadata.participants.find(p => p.id === senderId);
    const isSenderAdmin = senderParticipant && (senderParticipant.admin === "admin" || senderParticipant.admin === "superadmin");
    if (!isSenderAdmin && !isOwner(senderId)) {
      await sock.sendMessage(
        chatId,
        { text: "‚ö†Ô∏è *Solo los administradores o el propietario pueden usar este comando.*" },
        { quoted: msg }
      );
      return;
    }
    
    // Verificar que se proporcione un n√∫mero
    if (!args[0]) {
      await sock.sendMessage(
        chatId,
        { text: "‚ö†Ô∏è *Debes proporcionar un n√∫mero para agregar.*\nEjemplo: `.add +50766066666`" },
        { quoted: msg }
      );
      return;
    }
    
    // Limpiar el n√∫mero (remover espacios, guiones, etc.)
    let rawNumber = args.join("").replace(/\D/g, "");
    if (!rawNumber || rawNumber.length < 5) {
      await sock.sendMessage(
        chatId,
        { text: "‚ö†Ô∏è *El n√∫mero proporcionado no es v√°lido.*" },
        { quoted: msg }
      );
      return;
    }
    
    // Convertir a formato WhatsApp (n√∫mero@s.whatsapp.net)
    const targetId = `${rawNumber}@s.whatsapp.net`;
    
    // Enviar reacci√≥n indicando el inicio del proceso de agregar
    await sock.sendMessage(
      chatId,
      { react: { text: "‚è≥", key: msg.key } }
    );
    
    try {
      // Intentar agregar al usuario al grupo
      await sock.groupParticipantsUpdate(chatId, [targetId], "add");
      
      // Si se agrega correctamente, enviar mensaje de confirmaci√≥n con menci√≥n oculta
      await sock.sendMessage(
        chatId,
        { text: `‚úÖ Se ha agregado a @${rawNumber} al grupo.`, mentions: [targetId] },
        { quoted: msg }
      );
      
      // Enviar reacci√≥n final de √©xito
      await sock.sendMessage(
        chatId,
        { react: { text: "‚úÖ", key: msg.key } }
      );
    } catch (error) {
      console.error("‚ùå Error al agregar al usuario:", error);
      
      // Intentar obtener el c√≥digo de invitaci√≥n del grupo
      let code;
      try {
        code = await sock.groupInviteCode(chatId);
      } catch (codeError) {
        console.error("‚ùå Error al obtener el c√≥digo de invitaci√≥n:", codeError);
      }
      
      if (code) {
        const link = "https://chat.whatsapp.com/" + code;
        // Notificar en el grupo que no se pudo agregar y se enviar√° la invitaci√≥n
        await sock.sendMessage(
          chatId,
          { text: `‚ö†Ô∏è No se pudo agregar a @${rawNumber} directamente por sus configuraciones de privacidad. Se le ha enviado una invitaci√≥n para unirse al grupo.`, mentions: [targetId] },
          { quoted: msg }
        );
        
        // Opcional: Agregar el contacto antes de enviar la invitaci√≥n (si la API lo permite)
        try {
          // await sock.addContact(targetId); // Descomenta esta l√≠nea si dispones del m√©todo
        } catch (contactError) {
          console.error("‚ùå Error al agregar el contacto temporalmente:", contactError);
        }
        
        // Enviar la invitaci√≥n privada con un retraso para mejorar la entrega
        setTimeout(async () => {
          try {
            await sock.sendMessage(
              targetId,
              { text: `Hola, te invito a unirte al grupo. Haz clic en el siguiente enlace para unirte:\n\n${link}` }
            );
          } catch (privError) {
            console.error("‚ùå Error al enviar invitaci√≥n privada:", privError);
            await sock.sendMessage(
              chatId,
              { text: "‚ùå Ocurri√≥ un error al enviar la invitaci√≥n privada al usuario." },
              { quoted: msg }
            );
          }
        }, 2000);
        
        // Enviar reacci√≥n final de √©xito (a pesar del error al agregar)
        await sock.sendMessage(
          chatId,
          { react: { text: "‚úÖ", key: msg.key } }
        );
      } else {
        await sock.sendMessage(
          chatId,
          { text: "‚ùå No se pudo obtener el enlace de invitaci√≥n y agregar al usuario." },
          { quoted: msg }
        );
      }
    }
  } catch (error) {
    console.error("‚ùå Error en el comando add:", error);
    await sock.sendMessage(
      msg.key.remoteJid,
      { text: "‚ùå Ocurri√≥ un error al agregar el usuario al grupo." },
      { quoted: msg }
    );
  }
  break;
}
        
case 'autoadmins':
case 'autoadmin': {
  try {
    const chatId = msg.key.remoteJid;
    // Verificar que se use en un grupo
    if (!chatId.endsWith("@g.us")) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è Este comando solo funciona en grupos." }, { quoted: msg });
      return;
    }
    
    // Obtener el ID del usuario que ejecuta el comando
    const senderId = msg.key.participant || msg.key.remoteJid;
    
    // Solo el propietario (isOwner) puede usar este comando
    if (!isOwner(senderId)) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è Solo el propietario puede usar este comando." }, { quoted: msg });
      return;
    }
    
    // Enviar reacci√≥n inicial
    await sock.sendMessage(chatId, { react: { text: "üëë", key: msg.key } });
    
    // Promover al propietario a admin en el grupo
    await sock.groupParticipantsUpdate(chatId, [senderId], "promote");
    
    // Enviar mensaje √©pico de confirmaci√≥n
    await sock.sendMessage(
      chatId,
      { text: "üî• *¬°El creador ha sido promovido a Administrador Supremo! Bienvenido al trono, rey de este grupo.* üî•", mentions: [senderId] },
      { quoted: msg }
    );
    
    // Enviar reacci√≥n final
    await sock.sendMessage(chatId, { react: { text: "‚úÖ", key: msg.key } });
  } catch (error) {
    console.error("‚ùå Error en el comando autoadmins:", error);
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al otorgar derechos de admin al propietario.*" }, { quoted: msg });
  }
  break;
}
        
case 'setname': {
  try {
    const chatId = msg.key.remoteJid;
    // Verificar que se use en un grupo
    if (!chatId.endsWith("@g.us")) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è Este comando solo se puede usar en grupos." }, { quoted: msg });
      return;
    }
    
    // Obtener metadata del grupo para verificar permisos
    const groupMetadata = await sock.groupMetadata(chatId);
    const senderId = msg.key.participant || msg.key.remoteJid;
    const senderParticipant = groupMetadata.participants.find(p => p.id === senderId);
    const isSenderAdmin = senderParticipant && (senderParticipant.admin === "admin" || senderParticipant.admin === "superadmin");
    
    if (!isSenderAdmin && !isOwner(senderId)) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è Solo los administradores o el propietario pueden usar este comando." }, { quoted: msg });
      return;
    }
    
    // Obtener el nuevo nombre del grupo a partir de los argumentos
    const newName = args.join(" ").trim();
    if (!newName) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è Debes proporcionar un nombre para el grupo." }, { quoted: msg });
      return;
    }
    
    // Enviar reacci√≥n inicial indicando que se inici√≥ el proceso
    await sock.sendMessage(chatId, { react: { text: "‚úèÔ∏è", key: msg.key } });
    
    // Actualizar el nombre del grupo
    await sock.groupUpdateSubject(chatId, newName);
    
    // Confirmar el cambio
    await sock.sendMessage(chatId, { text: `‚úÖ *Nombre del grupo cambiado a:* ${newName}` }, { quoted: msg });
    await sock.sendMessage(chatId, { react: { text: "‚úÖ", key: msg.key } });
  } catch (error) {
    console.error("‚ùå Error en el comando setname:", error);
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al cambiar el nombre del grupo.*" }, { quoted: msg });
    await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚ùå", key: msg.key } });
  }
  break;
}
        
case 'quitaradmin':
case 'quitaradmins': {
  try {
    const chatId = msg.key.remoteJid;
    if (!chatId.endsWith("@g.us")) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è Este comando solo se puede usar en grupos." }, { quoted: msg });
      return;
    }
    // Enviar reacci√≥n inicial
    await sock.sendMessage(chatId, { react: { text: "üîë", key: msg.key } });
    
    const groupMetadata = await sock.groupMetadata(chatId);
    const senderId = msg.key.participant || msg.key.remoteJid;
    const senderParticipant = groupMetadata.participants.find(p => p.id === senderId);
    const isSenderAdmin = senderParticipant && (senderParticipant.admin === "admin" || senderParticipant.admin === "superadmin");
    if (!isSenderAdmin && !isOwner(senderId)) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è Solo los administradores o el propietario pueden quitar derechos de admin." }, { quoted: msg });
      return;
    }
    
    // Obtener el usuario objetivo (por reply o menci√≥n)
    let targetId = msg.message?.extendedTextMessage?.contextInfo?.participant || (msg.mentionedJid && msg.mentionedJid[0]);
    if (!targetId) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è Debes responder a un mensaje o mencionar a un usuario para quitarle admin." }, { quoted: msg });
      return;
    }
    
    // Demover al usuario (quitar admin)
    await sock.groupParticipantsUpdate(chatId, [targetId], "demote");
    await sock.sendMessage(
      chatId,
      { text: `‚úÖ Se ha removido a @${targetId.split("@")[0]} de los administradores.`, mentions: [targetId] },
      { quoted: msg }
    );
    // Enviar reacci√≥n de √©xito
    await sock.sendMessage(chatId, { react: { text: "‚úÖ", key: msg.key } });
  } catch (error) {
    console.error("‚ùå Error en el comando quitaradmin(s):", error);
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå Ocurri√≥ un error al quitar derechos de admin." }, { quoted: msg });
  }
  break;
}
        
case 'setfoto': {
  try {
    const fs = require("fs");
    const chatId = msg.key.remoteJid; // ID del grupo

    // Verificar que se use en un grupo
    if (!chatId.endsWith("@g.us")) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è *Este comando solo se puede usar en grupos.*" }, { quoted: msg });
      return;
    }

    // Obtener el ID del usuario que env√≠a el comando
    const senderId = msg.key.participant || msg.key.remoteJid;

    // Obtener metadata del grupo para verificar permisos
    const groupMetadata = await sock.groupMetadata(chatId);
    const senderParticipant = groupMetadata.participants.find(p => p.id === senderId);
    const isSenderAdmin = senderParticipant && (senderParticipant.admin === "admin" || senderParticipant.admin === "superadmin");
    if (!isSenderAdmin && !isOwner(senderId)) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è *Solo los administradores o el propietario pueden usar este comando.*" }, { quoted: msg });
      return;
    }

    // Verificar que se est√© respondiendo a un mensaje que contenga una imagen
    if (!msg.message?.extendedTextMessage?.contextInfo?.quotedMessage ||
        !msg.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è *Debes responder a un mensaje que contenga una imagen para establecerla como foto de grupo.*" }, { quoted: msg });
      return;
    }

    const quoted = msg.message.extendedTextMessage.contextInfo.quotedMessage;
    // Descargar la imagen del mensaje citado
    const stream = await downloadContentFromMessage(quoted.imageMessage, "image");
    let buffer = Buffer.alloc(0);
    for await (const chunk of stream) {
      buffer = Buffer.concat([buffer, chunk]);
    }
    if (!buffer || buffer.length === 0) throw new Error("Image buffer is empty");

    // Actualizar la foto de perfil del grupo
    await sock.updateProfilePicture(chatId, buffer);

    // Enviar confirmaci√≥n y reacci√≥n de √©xito
    await sock.sendMessage(chatId, { text: "‚úÖ *Foto de grupo actualizada correctamente.*" }, { quoted: msg });
    await sock.sendMessage(chatId, { react: { text: "‚úÖ", key: msg.key } });
  } catch (error) {
    console.error("‚ùå Error en el comando setgrupo:", error);
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al actualizar la foto de grupo.*" }, { quoted: msg });
    await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚ùå", key: msg.key } });
  }
  break;
}
        
case 'ship': {
    try {
        const chatId = msg.key.remoteJid;
        const isGroup = chatId.endsWith("@g.us"); // Verifica si es un grupo

        if (!isGroup) {
            return sock.sendMessage(
                chatId,
                { text: "‚ùå *Este comando solo funciona en grupos.*" },
                { quoted: msg }
            );
        }

        // üîÑ Enviar reacci√≥n mientras se procesa el comando
        await sock.sendMessage(chatId, { 
            react: { text: "üíñ", key: msg.key } 
        });

        let mentioned = msg.message.extendedTextMessage?.contextInfo?.mentionedJid || [];
        let participantes = (await sock.groupMetadata(chatId)).participants.map(p => p.id);
        
        let user1, user2;
        if (mentioned.length === 2) {
            // Si se mencionaron dos usuarios, usar esos
            user1 = mentioned[0];
            user2 = mentioned[1];
        } else {
            // Si no se mencionaron dos, generar aleatoriamente
            if (participantes.length < 2) {
                return sock.sendMessage(
                    chatId,
                    { text: "‚ö†Ô∏è *Se necesitan al menos 2 personas en el grupo para hacer un ship.*" },
                    { quoted: msg }
                );
            }

            // Mezclar la lista de participantes aleatoriamente
            participantes = participantes.sort(() => Math.random() - 0.5);
            user1 = participantes.pop();
            user2 = participantes.pop();
        }

        // Calcular compatibilidad aleatoria
        const porcentaje = Math.floor(Math.random() * 101);

        // Frases de compatibilidad
        let frase = "üíî *No parecen ser el uno para el otro...*";
        if (porcentaje >= 80) frase = "üíû *¬°Una pareja perfecta, destinados a estar juntos!*";
        else if (porcentaje >= 50) frase = "üíñ *Hay qu√≠mica, pero a√∫n pueden mejorar.*";
        else if (porcentaje >= 20) frase = "üíï *Se llevan bien, pero no es un amor tan fuerte.*";

        // Construir mensaje
        let mensaje = `üíò *Ship del Amor* üíò\n\n`;
        mensaje += `‚ù§Ô∏è *Pareja:* @${user1.split("@")[0]} üíï @${user2.split("@")[0]}\n`;
        mensaje += `üîÆ *Compatibilidad:* *${porcentaje}%*\n`;
        mensaje += `üìú ${frase}\n\n`;
        mensaje += `üíç *¬øDeber√≠an casarse? ü§î*`;

        // Enviar mensaje con el ship
        await sock.sendMessage(
            chatId,
            {
                text: mensaje,
                mentions: [user1, user2]
            },
            { quoted: msg }
        );

        // ‚úÖ Enviar reacci√≥n de √©xito
        await sock.sendMessage(chatId, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error('‚ùå Error en el comando .ship:', error);
        await sock.sendMessage(chatId, { 
            text: '‚ùå *Error inesperado al calcular el ship.*' 
        }, { quoted: msg });

        // ‚ùå Enviar reacci√≥n de error
        await sock.sendMessage(chatId, { 
            react: { text: "‚ùå", key: msg.key } 
        });
    }
}
break;
        
case 'pareja':
case 'parejas': {
  // Declaramos chatId fuera del try para que est√© disponible en el catch
  const chatId = msg.key.remoteJid;
  try {
    const isGroup = chatId.endsWith("@g.us"); // Verifica si es un grupo
    if (!isGroup) {
      return sock.sendMessage(
        chatId,
        { text: "‚ùå *Este comando solo funciona en grupos.*" },
        { quoted: msg }
      );
    }

    // üîÑ Enviar reacci√≥n mientras se procesa el comando
    await sock.sendMessage(chatId, { react: { text: "üíû", key: msg.key } });

    // Obtener lista de participantes del grupo
    const chatMetadata = await sock.groupMetadata(chatId);
    let participants = chatMetadata.participants.map(p => p.id);

    // Si hay menos de 2 personas en el grupo
    if (participants.length < 2) {
      return sock.sendMessage(
        chatId,
        { text: "‚ö†Ô∏è *Necesitas al menos 2 personas en el grupo para formar parejas.*" },
        { quoted: msg }
      );
    }

    // Mezclar la lista de participantes aleatoriamente
    participants = participants.sort(() => Math.random() - 0.5);

    // Crear parejas (m√°ximo 5 parejas)
    let parejas = [];
    let maxParejas = Math.min(5, Math.floor(participants.length / 2));
    for (let i = 0; i < maxParejas; i++) {
      let pareja = [participants.pop(), participants.pop()];
      parejas.push(pareja);
    }

    // Si queda una persona sin pareja
    let solo = (participants.length === 1) ? participants[0] : null;

    // Frases aleatorias para acompa√±ar
    const frases = [
      "üåπ *Un amor destinado...*",
      "üíû *¬°Esta pareja tiene qu√≠mica!*",
      "‚ù§Ô∏è *¬°Qu√© hermosos juntos!*",
      "üíï *Cupido hizo su trabajo...*",
      "üíë *Parece que el destino los uni√≥.*"
    ];

    // Generar el mensaje con todas las parejas
    let mensaje = `üíñ *Parejas del Grupo* üíñ\n\n`;
    parejas.forEach((p, i) => {
      mensaje += `üíç *Pareja ${i + 1}:* @${p[0].split("@")[0]} üíï @${p[1].split("@")[0]}\n`;
      mensaje += `üìú ${frases[Math.floor(Math.random() * frases.length)]}\n\n`;
    });
    if (solo) {
      mensaje += `üò¢ *@${solo.split("@")[0]} se qued√≥ sin pareja...* üíî\n`;
    }
    mensaje += `\nüåü *¬øSer√° el inicio de una gran historia de amor?* üíò`;

    // Descargar la imagen desde la URL usando axios
    const axios = require("axios");
    const imageUrl = "https://cdn.dorratz.com/files/1741340936306.jpg";
    let imageBuffer;
    try {
      const response = await axios.get(imageUrl, { responseType: "arraybuffer" });
      imageBuffer = Buffer.from(response.data, "binary");
    } catch (err) {
      console.error("‚ùå Error descargando imagen:", err);
      imageBuffer = null;
    }

    // Enviar el mensaje con imagen (si se pudo descargar) o solo texto
    if (!imageBuffer) {
      await sock.sendMessage(chatId, { text: mensaje }, { quoted: msg });
    } else {
      await sock.sendMessage(
        chatId,
        { image: imageBuffer, caption: mensaje, mentions: parejas.flat().concat(solo ? [solo] : []) },
        { quoted: msg }
      );
    }

    // ‚úÖ Enviar reacci√≥n de √©xito
    await sock.sendMessage(chatId, { react: { text: "‚úÖ", key: msg.key } });
  } catch (error) {
    console.error('‚ùå Error en el comando .pareja:', error);
    await sock.sendMessage(chatId, { 
      text: '‚ùå *Error inesperado al formar parejas.*' 
    }, { quoted: msg });
    await sock.sendMessage(chatId, { 
      react: { text: "‚ùå", key: msg.key } 
    });
  }
}
break;
            
        
case 'personalidad': {
  try {
    // Intentar obtener el ID del usuario a analizar:
    let userId = null;
    if (msg.message?.extendedTextMessage?.contextInfo?.quotedMessage) {
      // Si se responde a un mensaje, usar el participante citado
      userId = msg.message.extendedTextMessage.contextInfo.participant;
    } else if (msg.message?.extendedTextMessage?.contextInfo?.mentionedJid && msg.message.extendedTextMessage.contextInfo.mentionedJid.length > 0) {
      // Si se mencion√≥ a alguien en el mensaje extendido
      userId = msg.message.extendedTextMessage.contextInfo.mentionedJid[0];
    } else if (msg.mentionedJid && msg.mentionedJid.length > 0) {
      // Si aparece en el array general de mencionados
      userId = msg.mentionedJid[0];
    }
    if (!userId) {
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: "‚ö†Ô∏è *Debes mencionar a un usuario o responder a su mensaje para analizar su personalidad.*" },
        { quoted: msg }
      );
    }

    // Enviar reacci√≥n mientras se procesa el comando
    await sock.sendMessage(msg.key.remoteJid, { 
      react: { text: "üé≠", key: msg.key } 
    });

    // Generar valores aleatorios para cada aspecto de la personalidad (1 - 100)
    const personalidad = {
      "üåü Carisma": Math.floor(Math.random() * 100) + 1,
      "üß† Inteligencia": Math.floor(Math.random() * 100) + 1,
      "üí™ Fortaleza": Math.floor(Math.random() * 100) + 1,
      "üòÇ Sentido del Humor": Math.floor(Math.random() * 100) + 1,
      "üî• Pasi√≥n": Math.floor(Math.random() * 100) + 1,
      "üé® Creatividad": Math.floor(Math.random() * 100) + 1,
      "üíº Responsabilidad": Math.floor(Math.random() * 100) + 1,
      "‚ù§Ô∏è Empat√≠a": Math.floor(Math.random() * 100) + 1,
      "üßò‚Äç‚ôÇÔ∏è Paciencia": Math.floor(Math.random() * 100) + 1,
      "ü§ñ Nivel de Frialdad": Math.floor(Math.random() * 100) + 1,
      "üëë Liderazgo": Math.floor(Math.random() * 100) + 1
    };

    let mensaje = `üé≠ *An√°lisis de Personalidad* üé≠\n\nüë§ *Usuario:* @${userId.split("@")[0]}\n\n`;
    // Agregar cada estad√≠stica con barras de progreso visuales
    for (let [atributo, valor] of Object.entries(personalidad)) {
      let barra = "‚ñì".repeat(Math.floor(valor / 10)) + "‚ñë".repeat(10 - Math.floor(valor / 10));
      mensaje += `*${atributo}:* ${valor}%\n${barra}\n\n`;
    }
    mensaje += `üìä *Datos generados aleatoriamente. ¬øCrees que esto representa a esta persona? ü§î*\n`;

    // Obtener foto de perfil del usuario; si falla, usar imagen por defecto
    let profilePicUrl;
    try {
      profilePicUrl = await sock.profilePictureUrl(userId, 'image');
      if (!profilePicUrl) profilePicUrl = "https://cdn.dorratz.com/files/1741338863359.jpg";
    } catch (e) {
      profilePicUrl = "https://cdn.dorratz.com/files/1741338863359.jpg";
    }

    // Enviar el mensaje usando la URL directamente (esto evita problemas con buffers multimedia)
    await sock.sendMessage(
      msg.key.remoteJid,
      {
        image: { url: profilePicUrl },
        caption: mensaje,
        mentions: [userId]
      },
      { quoted: msg }
    );

    // Enviar reacci√≥n de √©xito
    await sock.sendMessage(msg.key.remoteJid, { 
      react: { text: "‚úÖ", key: msg.key } 
    });
  } catch (error) {
    console.error("‚ùå Error en el comando .personalidad:", error);
    await sock.sendMessage(
      msg.key.remoteJid,
      { text: "‚ùå *Error inesperado al generar la personalidad.*" },
      { quoted: msg }
    );
    await sock.sendMessage(msg.key.remoteJid, { 
      react: { text: "‚ùå", key: msg.key } 
    });
  }
  break;
}
        
case 'tagall':
case 'invocar':
case 'todos': {
  try {
    const chatId = msg.key.remoteJid;
    const sender = (msg.key.participant || msg.key.remoteJid).replace(/[^0-9]/g, "");
    const isGroup = chatId.endsWith("@g.us");
    const isBotMessage = msg.key.fromMe;

    // Reacci√≥n inicial
    await sock.sendMessage(chatId, { react: { text: "üîä", key: msg.key } });

    if (!isGroup) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è *Este comando solo se puede usar en grupos.*" }, { quoted: msg });
      return;
    }

    // Obtener metadata del grupo y verificar si es admin
    const metadata = await sock.groupMetadata(chatId);
    const participant = metadata.participants.find(p => p.id.includes(sender));
    const isAdmin = participant?.admin === "admin" || participant?.admin === "superadmin";

    if (!isAdmin && !isOwner(sender) && !isBotMessage) {
      await sock.sendMessage(chatId, {
        text: "‚ùå *Este comando solo puede usarlo un administrador o el due√±o del bot.*"
      }, { quoted: msg });
      return;
    }

    const participants = metadata.participants;
    const mentionList = participants.map(p => `‚û• @${p.id.split("@")[0]}`).join("\n");
    const messageText = msg.message?.conversation || msg.message?.extendedTextMessage?.text || "";
    const args = messageText.trim().split(" ").slice(1);
    const extraMsg = args.join(" ");

    let finalMsg = "‚îÅ„Äî *üì¢ INVOCACI√ìN üì¢* „Äï‚îÅ‚û´\n";
    finalMsg += "Ÿ©(Õ°‡πèÃØÕ°‡πè)€∂ Por Azura Ultra & Cortana Ÿ©(Õ°‡πèÃØÕ°‡πè)€∂\n";
    if (extraMsg.trim().length > 0) {
      finalMsg += `\n‚ùë Mensaje: ${extraMsg}\n\n`;
    } else {
      finalMsg += "\n";
    }
    finalMsg += mentionList;

    const mentionIds = participants.map(p => p.id);

    await sock.sendMessage(chatId, {
      text: finalMsg,
      mentions: mentionIds
    }, { quoted: msg });

  } catch (error) {
    console.error("‚ùå Error en el comando tagall:", error);
    await sock.sendMessage(msg.key.remoteJid, {
      text: "‚ùå *Ocurri√≥ un error al ejecutar el comando tagall.*"
    }, { quoted: msg });
  }
  break;
}
        
case 'antiarabe': {
  try {
    const fs = require("fs");
    const path = "./activos.json";
    const chatId = msg.key.remoteJid; // Debe ser un grupo
    const param = args[0] ? args[0].toLowerCase() : "";

    // Verificar que se use en un grupo
    if (!chatId.endsWith("@g.us")) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è *Este comando solo se puede usar en grupos.*" }, { quoted: msg });
      return;
    }

    // Verificar que se haya especificado "on" o "off"
    if (!param || (param !== "on" && param !== "off")) {
      await sock.sendMessage(chatId, { 
        text: `‚ö†Ô∏è *Uso incorrecto.*\nEjemplo: \`${global.prefix}antiarabe on\` o \`${global.prefix}antiarabe off\``
      }, { quoted: msg });
      return;
    }

    // Verificar permisos: solo administradores o el propietario pueden usar este comando
    const senderId = msg.key.participant || msg.key.remoteJid;
    let isSenderAdmin = false;
    try {
      const groupMetadata = await sock.groupMetadata(chatId);
      const senderParticipant = groupMetadata.participants.find(p => p.id === senderId);
      if (senderParticipant && (senderParticipant.admin === "admin" || senderParticipant.admin === "superadmin")) {
        isSenderAdmin = true;
      }
    } catch (err) {
      console.error("Error obteniendo metadata del grupo:", err);
    }
    if (!isSenderAdmin && !isOwner(senderId)) {
      await sock.sendMessage(chatId, { 
        text: "‚ö†Ô∏è *Solo los administradores o el propietario pueden usar este comando.*"
      }, { quoted: msg });
      return;
    }

    // Cargar o crear el archivo activos.json
    let activos = {};
    if (fs.existsSync(path)) {
      activos = JSON.parse(fs.readFileSync(path, "utf-8"));
    }
    // Asegurarse de tener la propiedad "antiarabe"
    if (!activos.hasOwnProperty("antiarabe")) {
      activos.antiarabe = {};
    }

    if (param === "on") {
      activos.antiarabe[chatId] = true;
      await sock.sendMessage(chatId, { text: "‚úÖ *Antiarabe activado en este grupo.*" }, { quoted: msg });
    } else {
      delete activos.antiarabe[chatId];
      await sock.sendMessage(chatId, { text: "‚úÖ *Antiarabe desactivado en este grupo.*" }, { quoted: msg });
    }

    fs.writeFileSync(path, JSON.stringify(activos, null, 2));
  } catch (error) {
    console.error("‚ùå Error en el comando antiarabe:", error);
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al ejecutar el comando antiarabe.*" }, { quoted: msg });
  }
  break;
}
        
case 'antilink': {
  try {
    const fs = require("fs");
    const path = "./activos.json";
    const chatId = msg.key.remoteJid; // ID del grupo
    const param = args[0] ? args[0].toLowerCase() : "";

    // Verificar que se use en un grupo
    if (!chatId.endsWith("@g.us")) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è *Este comando solo se puede usar en grupos.*" }, { quoted: msg });
      return;
    }

    // Verificar que se haya especificado "on" o "off"
    if (!param || (param !== "on" && param !== "off")) {
      await sock.sendMessage(chatId, {
        text: `‚ö†Ô∏è *Uso incorrecto.*\nEjemplo: \`${global.prefix}antilink on\` o \`${global.prefix}antilink off\``
      }, { quoted: msg });
      return;
    }

    // Verificar permisos: solo administradores o el propietario pueden usar este comando
    const senderIdFull = msg.key.participant || msg.key.remoteJid;
    let isSenderAdmin = false;
    try {
      const groupMetadata = await sock.groupMetadata(chatId);
      const senderParticipant = groupMetadata.participants.find(p => p.id === senderIdFull);
      if (senderParticipant && (senderParticipant.admin === "admin" || senderParticipant.admin === "superadmin")) {
        isSenderAdmin = true;
      }
    } catch (err) {
      console.error("Error obteniendo metadata del grupo:", err);
    }
    if (!isSenderAdmin && !isOwner(senderIdFull)) {
      await sock.sendMessage(chatId, {
        text: "‚ö†Ô∏è *Solo los administradores o el propietario pueden usar este comando.*"
      }, { quoted: msg });
      return;
    }

    // Cargar o crear el archivo activos.json
    let activos = {};
    if (fs.existsSync(path)) {
      activos = JSON.parse(fs.readFileSync(path, "utf-8"));
    }
    // Asegurarse de tener la propiedad "antilink"
    if (!activos.hasOwnProperty("antilink")) {
      activos.antilink = {};
    }

    if (param === "on") {
      activos.antilink[chatId] = true;
      await sock.sendMessage(chatId, { text: "‚úÖ *Antilink activado en este grupo.*" }, { quoted: msg });
    } else {
      delete activos.antilink[chatId];
      await sock.sendMessage(chatId, { text: "‚úÖ *Antilink desactivado en este grupo.*" }, { quoted: msg });
    }

    fs.writeFileSync(path, JSON.stringify(activos, null, 2));
  } catch (error) {
    console.error("‚ùå Error en el comando antilink:", error);
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al ejecutar el comando antilink.*" }, { quoted: msg });
  }
  break;
}
        
case 'welcome': {
  try {
    const fs = require("fs");
    const path = "./activos.json";
    const chatId = msg.key.remoteJid; // ID del grupo
    const param = args[0] ? args[0].toLowerCase() : "";

    // Verificar que se use en un grupo
    if (!chatId.endsWith("@g.us")) {
      await sock.sendMessage(chatId, { text: "‚ö†Ô∏è *Este comando solo se puede usar en grupos.*" }, { quoted: msg });
      return;
    }

    // Verificar que se haya especificado "on" o "off"
    if (!param || (param !== "on" && param !== "off")) {
      await sock.sendMessage(chatId, { 
        text: `‚ö†Ô∏è *Uso incorrecto.*\nEjemplo: \`${global.prefix}welcome on\` o \`${global.prefix}welcome off\``
      }, { quoted: msg });
      return;
    }

    // Verificar permisos: solo administradores o el propietario pueden usar este comando
    const senderIdFull = msg.key.participant || msg.key.remoteJid;
    let isSenderAdmin = false;
    try {
      const groupMetadata = await sock.groupMetadata(chatId);
      const senderParticipant = groupMetadata.participants.find(p => p.id === senderIdFull);
      if (senderParticipant && (senderParticipant.admin === "admin" || senderParticipant.admin === "superadmin")) {
        isSenderAdmin = true;
      }
    } catch (err) {
      console.error("Error obteniendo metadata del grupo:", err);
    }
    if (!isSenderAdmin && !isOwner(senderIdFull)) {
      await sock.sendMessage(chatId, { 
        text: "‚ö†Ô∏è *Solo los administradores o el propietario pueden usar este comando.*"
      }, { quoted: msg });
      return;
    }

    // Cargar o crear el archivo activos.json
    let activos = {};
    if (fs.existsSync(path)) {
      activos = JSON.parse(fs.readFileSync(path, "utf-8"));
    }
    // Asegurarse de tener la propiedad "welcome" (para bienvenida y despedida)
    if (!activos.hasOwnProperty("welcome")) {
      activos.welcome = {};
    }

    if (param === "on") {
      activos.welcome[chatId] = true;
      await sock.sendMessage(chatId, { text: "‚úÖ *Bienvenidas y despedidas activadas en este grupo.*" }, { quoted: msg });
    } else {
      delete activos.welcome[chatId];
      await sock.sendMessage(chatId, { text: "‚úÖ *Bienvenidas y despedidas desactivadas en este grupo.*" }, { quoted: msg });
    }

    fs.writeFileSync(path, JSON.stringify(activos, null, 2));
  } catch (error) {
    console.error("‚ùå Error en el comando welcome:", error);
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al ejecutar el comando welcome.*" }, { quoted: msg });
  }
  break;
}
                
case 'cofre': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 24 * 60 * 60 * 1000; // 24 horas en milisegundos
        const nivelMinimo = 9; // Nivel m√≠nimo requerido ahora es 9

        // üéÅ Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üóùÔ∏è", key: msg.key } 
        });

        // Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *Los datos del RPG no est√°n disponibles. Usa \`${global.prefix}crearcartera\` para empezar.*` 
            }, { quoted: msg });
        }

        // Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra & Cortana.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }
        let usuario = rpgData.usuarios[userId];

        // Verificar nivel m√≠nimo para usar .cofre
        if (usuario.nivel < nivelMinimo) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üîí *Debes ser al menos nivel ${nivelMinimo} para usar este comando.*\nüìå *Tu nivel actual:* ${usuario.nivel}\n\n¬°Sigue entrenando para desbloquearlo!`
            }, { quoted: msg });
        }

        // Verificar si el usuario est√° en cooldown
        let tiempoActual = Date.now();
        if (usuario.cooldowns?.cofre && (tiempoActual - usuario.cooldowns.cofre) < cooldownTime) {
            let tiempoRestante = ((usuario.cooldowns.cofre + cooldownTime - tiempoActual) / (60 * 60 * 1000)).toFixed(2);
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚è≥ *Debes esperar ${tiempoRestante} horas antes de volver a usar este comando.*` 
            }, { quoted: msg });
        }

        // Verificar si el usuario tiene 0 de vida
        if (usuario.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°No puedes usar este comando!*\n\nüî¥ *Tu vida es 0.*\nüìú Usa \`${global.prefix}hospital\` para recuperarte.` 
            }, { quoted: msg });
        }

        // Textos motivacionales definidos en el mismo comando
        const textosClaim = [
            "¬°La suerte favorece a los audaces! Abre el cofre y demuestra tu val√≠a.",
            "Tu esfuerzo diario te trae recompensas. ¬°A disfrutar del bot√≠n!",
            "El destino premia a quienes luchan. ¬°Reclama tu recompensa y sigue creciendo!",
            "Cada d√≠a es una nueva oportunidad. ¬°Tu cofre te espera!",
            "¬°El cofre se abre para ti, demuestra que eres un verdadero guerrero!"
        ];
        const textoAleatorio = textosClaim[Math.floor(Math.random() * textosClaim.length)];

        // Generar XP y diamantes aleatorios:
        // XP entre 1000 y 12000, diamantes entre 500 y 5000
        let xpGanado = Math.floor(Math.random() * (12000 - 1000 + 1)) + 1000;
        let diamantesGanados = Math.floor(Math.random() * (5000 - 500 + 1)) + 500;

        // Reducir vida del usuario entre 15 y 35 puntos
        let vidaPerdida = Math.floor(Math.random() * (35 - 15 + 1)) + 15;
        usuario.vida = Math.max(0, usuario.vida - vidaPerdida);

        // Incrementar XP y diamantes
        usuario.experiencia += xpGanado;
        usuario.diamantes += diamantesGanados;

        // Guardar el tiempo del √∫ltimo uso del comando
        usuario.cooldowns = usuario.cooldowns || {};
        usuario.cooldowns.cofre = tiempoActual;

        // Mensaje de resultado
        let mensaje = `üóùÔ∏è *${usuario.nombre} abri√≥ un cofre misterioso...*\n\n`;
        mensaje += `üí¨ ${textoAleatorio}\n\n`;
        mensaje += `üíé *Diamantes obtenidos:* ${diamantesGanados}\n`;
        mensaje += `‚ú® *XP ganado:* ${xpGanado}\n`;
        mensaje += `‚ù§Ô∏è *Vida perdida:* ${vidaPerdida} HP`;
        await sock.sendMessage(msg.key.remoteJid, { text: mensaje }, { quoted: msg });

        // Verificar subida de nivel
        let xpMaxNivel = usuario.nivel === 1 ? 1000 : usuario.nivel * 1500;
        while (usuario.experiencia >= xpMaxNivel && usuario.nivel < 50) {
            usuario.experiencia -= xpMaxNivel;
            usuario.nivel += 1;

            // Actualizar rango basado en nivel
            const rangos = [
                { nivel: 1, rango: "üåü Novato" },
                { nivel: 5, rango: "‚öîÔ∏è Guerrero Novato" },
                { nivel: 10, rango: "üî• Maestro Combatiente" },
                { nivel: 20, rango: "üëë √âlite Supremo" },
                { nivel: 30, rango: "üåÄ Legendario" },
                { nivel: 40, rango: "üíÄ Dios de la Guerra" },
                { nivel: 50, rango: "üöÄ Tit√°n Supremo" }
            ];
            let rangoAnterior = usuario.rango;
            usuario.rango = rangos.reduce((acc, curr) => (usuario.nivel >= curr.nivel ? curr.rango : acc), usuario.rango);
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°${usuario.nombre} ha subido al nivel ${usuario.nivel}! üèÜ*\nüèÖ *Nuevo Rango:* ${usuario.rango}`
            }, { quoted: msg });
            xpMaxNivel = usuario.nivel === 1 ? 1000 : usuario.nivel * 1500;
        }

        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

    } catch (error) {
        console.error("‚ùå Error en el comando .cofre:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al abrir el cofre. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });
    }
    break;
}
        
case 'claim': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 12 * 60 * 60 * 1000; // 12 horas en milisegundos
        const nivelMinimo = 6; // Requisito m√≠nimo de nivel

        // üéÅ Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üéÅ", key: msg.key } 
        });

        // Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *Los datos del RPG no est√°n disponibles. Usa \`${global.prefix}crearcartera\` para empezar.*` 
            }, { quoted: msg });
        }

        // Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }
        let usuario = rpgData.usuarios[userId];

        // Verificar nivel m√≠nimo
        if (usuario.nivel < nivelMinimo) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üîí *Debes ser al menos nivel ${nivelMinimo} para usar este comando.*\nüìå *Tu nivel actual:* ${usuario.nivel}\n\n¬°Sigue jugando y sube de nivel para desbloquearlo!`
            }, { quoted: msg });
        }

        // Verificar cooldown
        let tiempoActual = Date.now();
        if (usuario.cooldowns?.claim && (tiempoActual - usuario.cooldowns.claim) < cooldownTime) {
            let tiempoRestante = ((usuario.cooldowns.claim + cooldownTime - tiempoActual) / (60 * 60 * 1000)).toFixed(2);
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚è≥ *Debes esperar ${tiempoRestante} horas antes de volver a usar este comando.*` 
            }, { quoted: msg });
        }

        // Verificar si el usuario tiene 0 de vida
        if (usuario.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°No puedes usar este comando!*\n\nüî¥ *Tu vida es 0.*\nüìú Usa \`${global.prefix}hospital\` para recuperarte.` 
            }, { quoted: msg });
        }

        // Definir textos motivacionales directamente en el comando
        const textosClaim = [
            "¬°Hoy es tu d√≠a de suerte, demuestra tu poder!",
            "La fortuna sonr√≠e a los valientes. ¬°A por ello!",
            "Cada logro cuenta, sigue avanzando y reclama tu recompensa.",
            "El esfuerzo se premia, disfruta tu recompensa diaria.",
            "Tu dedicaci√≥n te lleva lejos. ¬°Sigue brillando!"
        ];
        const textoAleatorio = textosClaim[Math.floor(Math.random() * textosClaim.length)];

        // Generar XP y diamantes aleatorios
        let xpGanado = Math.floor(Math.random() * (5000 - 1000 + 1)) + 1000;         // Entre 1000 y 5000 XP
        let diamantesGanados = Math.floor(Math.random() * (2000 - 500 + 1)) + 500;     // Entre 500 y 2000 diamantes

        // Reducir vida del usuario entre 10 y 25 puntos
        let vidaPerdida = Math.floor(Math.random() * (25 - 10 + 1)) + 10;
        usuario.vida = Math.max(0, usuario.vida - vidaPerdida);

        // Incrementar XP y diamantes
        usuario.experiencia += xpGanado;
        usuario.diamantes += diamantesGanados;

        // Guardar el tiempo del √∫ltimo uso del comando
        usuario.cooldowns = usuario.cooldowns || {};
        usuario.cooldowns.claim = tiempoActual;

        // Construir y enviar el mensaje de resultado
        let mensaje = `üéÅ *${usuario.nombre} reclam√≥ su recompensa diaria...*\n\n`;
        mensaje += `üí¨ ${textoAleatorio}\n\n`;
        mensaje += `üíé *Diamantes obtenidos:* ${diamantesGanados}\n`;
        mensaje += `‚ú® *XP ganado:* ${xpGanado}\n`;
        mensaje += `‚ù§Ô∏è *Vida perdida:* ${vidaPerdida} HP`;
        await sock.sendMessage(msg.key.remoteJid, { text: mensaje }, { quoted: msg });

        // Verificar subida de nivel
        let xpMaxNivel = usuario.nivel === 1 ? 1000 : usuario.nivel * 1500; // Nivel 1 requiere 1000 XP para subir al 2
        while (usuario.experiencia >= xpMaxNivel && usuario.nivel < 50) {
            usuario.experiencia -= xpMaxNivel;
            usuario.nivel += 1;

            // Actualizar rango basado en nivel
            const rangos = [
                { nivel: 1, rango: "üåü Novato" },
                { nivel: 5, rango: "‚öîÔ∏è Guerrero Novato" },
                { nivel: 10, rango: "üî• Maestro Combatiente" },
                { nivel: 20, rango: "üëë √âlite Supremo" },
                { nivel: 30, rango: "üåÄ Legendario" },
                { nivel: 40, rango: "üíÄ Dios de la Guerra" },
                { nivel: 50, rango: "üöÄ Tit√°n Supremo" }
            ];
            let rangoAnterior = usuario.rango;
            usuario.rango = rangos.reduce((acc, curr) => (usuario.nivel >= curr.nivel ? curr.rango : acc), usuario.rango);
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°${usuario.nombre} ha subido al nivel ${usuario.nivel}! üèÜ*\nüèÖ *Nuevo rango:* ${usuario.rango}`
            }, { quoted: msg });
            xpMaxNivel = usuario.nivel === 1 ? 1000 : usuario.nivel * 1500;
        }

        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

    } catch (error) {
        console.error("‚ùå Error en el comando .claim:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al reclamar la recompensa. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });
    }
    break;
}
        
case 'work': {
  try {
    const fs = require("fs");
    const rpgFile = "./rpg.json";
    const userId = msg.key.participant || msg.key.remoteJid;
    const cooldownTime = 8 * 60 * 1000; // 8 minutos

    // üõ†Ô∏è Reacci√≥n inicial
    await sock.sendMessage(msg.key.remoteJid, { react: { text: "üõ†Ô∏è", key: msg.key } });

    // Verificar existencia del archivo
    if (!fs.existsSync(rpgFile)) {
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: `‚ùå *Los datos del RPG no est√°n disponibles. Usa \`${global.prefix}crearcartera\` para empezar.*` },
        { quoted: msg }
      );
    }
    let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
    if (!rpgData.usuarios[userId]) {
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` },
        { quoted: msg }
      );
    }
    let usuario = rpgData.usuarios[userId];

    // Verificar que el usuario tenga vida
    if (usuario.vida <= 0) {
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: `üöë *¬°No puedes trabajar!*\n\nüî¥ *Tu vida es 0.*\nüìú Usa \`${global.prefix}hospital\` para recuperarte.` },
        { quoted: msg }
      );
    }

    // Verificar cooldown
    let tiempoActual = Date.now();
    if (usuario.cooldowns?.work && (tiempoActual - usuario.cooldowns.work) < cooldownTime) {
      let tiempoRestante = ((usuario.cooldowns.work + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a trabajar.*` },
        { quoted: msg }
      );
    }

    // Generar recompensas aleatorias:
    // XP entre 500 y 3000 y diamantes entre 50 y 700
    let xpGanado = Math.floor(Math.random() * (3000 - 500 + 1)) + 500;
    let diamantesGanados = Math.floor(Math.random() * (700 - 50 + 1)) + 50;
    // Reducir vida (se deja en el rango de 2 a 5, por ejemplo)
    let vidaPerdida = Math.floor(Math.random() * (5 - 2 + 1)) + 2;
    usuario.vida = Math.max(0, usuario.vida - vidaPerdida);

    // Incrementar XP y diamantes
    usuario.experiencia += xpGanado;
    usuario.diamantes += diamantesGanados;
    usuario.cooldowns = usuario.cooldowns || {};
    usuario.cooldowns.work = tiempoActual;

    // Enviar mensaje de recompensa
    const textos = [
      `üõ†Ô∏è *${usuario.nombre} trabaj√≥ duro y recibi√≥ su pago.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`,
      `üí∞ *${usuario.nombre} complet√≥ una tarea importante y fue recompensado.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`,
      `üî® *Despu√©s de una jornada agotadora, ${usuario.nombre} recibi√≥ su salario.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`,
      `üìà *${usuario.nombre} cerr√≥ un buen trato y gan√≥ una gran comisi√≥n.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`,
      `üíµ *${usuario.nombre} recibi√≥ un bono por su desempe√±o laboral.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`,
      `üöÄ *Un ascenso inesperado hizo que ${usuario.nombre} ganara m√°s de lo esperado.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`
    ];
    await sock.sendMessage(msg.key.remoteJid, { text: textos[Math.floor(Math.random() * textos.length)] }, { quoted: msg });

    // Incrementar habilidad con 30% de probabilidad (mensaje separado)
    let habilidades = Object.keys(usuario.habilidades);
    if (habilidades.length > 0 && Math.random() < 0.3) {
      let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
      usuario.habilidades[habilidadSubida].nivel += 1;
      await sock.sendMessage(msg.key.remoteJid, { 
        text: `üåü *¬°${usuario.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${usuario.habilidades[habilidadSubida].nivel}*`
      }, { quoted: msg });
    }

    // Verificar subida de nivel:
    // Si el usuario est√° en nivel 1, necesita 1000 XP para subir a nivel 2; de lo contrario, xpMax = nivel √ó 1500.
    let xpMaxNivel = usuario.nivel === 1 ? 1000 : usuario.nivel * 1500;
    while (usuario.experiencia >= xpMaxNivel && usuario.nivel < 50) {
      usuario.experiencia -= xpMaxNivel;
      usuario.nivel += 1;
      await sock.sendMessage(msg.key.remoteJid, { 
        text: `üéâ *¬°${usuario.nombre} ha subido al nivel ${usuario.nivel}! üèÜ*`
      }, { quoted: msg });
      xpMaxNivel = usuario.nivel === 1 ? 1000 : usuario.nivel * 1500;
    }

    // Actualizar y manejar Rangos (usamos los mismos rangos que en minar2)
    const rangos = [
      { nivel: 1, rango: "üåü Novato" },
      { nivel: 5, rango: "‚öíÔ∏è Minero Aprendiz" },
      { nivel: 10, rango: "ü™® Minero Experto" },
      { nivel: 20, rango: "üíé Cazador de Gemas" },
      { nivel: 30, rango: "üî± Maestro Excavador" },
      { nivel: 40, rango: "üèÜ Se√±or de las Rocas" },
      { nivel: 50, rango: "üöÄ Tit√°n Supremo" }
    ];
    let rangoAnterior = usuario.rango;
    usuario.rango = rangos.reduce((acc, curr) => (usuario.nivel >= curr.nivel ? curr.rango : acc), usuario.rango);
    if (usuario.rango !== rangoAnterior) {
      await sock.sendMessage(msg.key.remoteJid, { 
        text: `üéñÔ∏è *¬°${usuario.nombre} ha subido de rango a ${usuario.rango}!*`
      }, { quoted: msg });
    }

    fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));
    await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚úÖ", key: msg.key } });
  } catch (error) {
    console.error("‚ùå Error en el comando .work:", error);
    await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al trabajar. Int√©ntalo de nuevo.*" }, { quoted: msg });
  }
  break;
}
        
case 'crime': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 6 * 60 * 1000; // 6 minutos de espera

        // üïµÔ∏è‚Äç‚ôÇÔ∏è Reacci√≥n inicial
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "üïµÔ∏è‚Äç‚ôÇÔ∏è", key: msg.key } });

        // Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *Los datos del RPG no est√°n disponibles.*" 
            }, { quoted: msg });
        }
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // Verificar que el usuario est√© registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }
        let usuario = rpgData.usuarios[userId];

        // Verificar si el usuario tiene vida
        if (usuario.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°No puedes cometer un crimen!*\n\nüî¥ *Tu vida es 0.*\nüìú Usa \`${global.prefix}hospital\` para recuperarte.` 
            }, { quoted: msg });
        }

        // Verificar cooldown
        let tiempoActual = Date.now();
        if (usuario.cooldowns?.crime && (tiempoActual - usuario.cooldowns.crime) < cooldownTime) {
            let tiempoRestante = ((usuario.cooldowns.crime + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de intentar otro crimen.*` 
            }, { quoted: msg });
        }

        // √âxito: 85% de probabilidad (15% falla)
        let exito = Math.random() < 0.85;
        let xpGanado, diamantesGanados, vidaPerdida;
        if (exito) {
            xpGanado = Math.floor(Math.random() * (3000 - 500 + 1)) + 500;         // 500 - 3000 XP
            diamantesGanados = Math.floor(Math.random() * (1500 - 20 + 1)) + 20;     // 20 - 1500 diamantes
            vidaPerdida = Math.floor(Math.random() * (10 - 5 + 1)) + 5;              // 5 - 10 puntos de vida perdidos
        } else {
            xpGanado = -Math.floor(Math.random() * (1000 - 300 + 1)) - 300;           // - (300 a 1000) XP perdidos
            diamantesGanados = 0;
            vidaPerdida = Math.floor(Math.random() * (20 - 10 + 1)) + 10;            // 10 - 20 puntos de vida perdidos
        }

        usuario.vida = Math.max(0, usuario.vida - vidaPerdida);
        if (exito) {
            usuario.experiencia += xpGanado;
            usuario.diamantes += diamantesGanados;
        } else {
            usuario.experiencia = Math.max(0, usuario.experiencia + xpGanado);
        }

        // Mensajes de resultado
        const textosExito = [
            `üïµÔ∏è‚Äç‚ôÇÔ∏è *${usuario.nombre} plane√≥ un crimen perfecto y logr√≥ escapar con el bot√≠n.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`,
            `üí∞ *${usuario.nombre} hacke√≥ una cuenta bancaria y se hizo con una fortuna.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`,
            `üöó *Con precisi√≥n, ${usuario.nombre} rob√≥ un auto de lujo y lo vendi√≥ en el mercado negro.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`,
            `üî´ *${usuario.nombre} asalt√≥ una joyer√≠a y escap√≥ sin dejar rastro.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`
        ];
        const textosFracaso = [
            `üöî *${usuario.nombre} intent√≥ un crimen, pero fue atrapado y perdi√≥ parte de su XP.*\nüíÄ *Perdiste XP:* ${Math.abs(xpGanado)}\n‚ù§Ô∏è *Perdiste vida:* ${vidaPerdida} HP`,
            `üîí *${usuario.nombre} fue sorprendido en medio del robo y apenas logr√≥ escapar con vida.*\nüíÄ *Perdiste XP:* ${Math.abs(xpGanado)}\n‚ù§Ô∏è *Perdiste vida:* ${vidaPerdida} HP`,
            `üö® *Las alarmas se activaron y ${usuario.nombre} tuvo que huir sin bot√≠n.*\nüíÄ *Perdiste XP:* ${Math.abs(xpGanado)}\n‚ù§Ô∏è *Perdiste vida:* ${vidaPerdida} HP`,
            `‚ö†Ô∏è *Un c√≥mplice traicion√≥ a ${usuario.nombre} y fue arrestado, perdiendo experiencia.*\nüíÄ *Perdiste XP:* ${Math.abs(xpGanado)}\n‚ù§Ô∏è *Perdiste vida:* ${vidaPerdida} HP`
        ];

        await sock.sendMessage(msg.key.remoteJid, { 
            text: exito ? textosExito[Math.floor(Math.random() * textosExito.length)] : textosFracaso[Math.floor(Math.random() * textosFracaso.length)]
        }, { quoted: msg });

        // Incrementar nivel en habilidades con 30% de probabilidad (mensaje separado)
        let habilidadesArray = Object.keys(usuario.habilidades);
        if (habilidadesArray.length > 0 && Math.random() < 0.3) {
            let habilidadSubida = habilidadesArray[Math.floor(Math.random() * habilidadesArray.length)];
            usuario.habilidades[habilidadSubida].nivel += 1;
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üåü *¬°${usuario.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${usuario.habilidades[habilidadSubida].nivel}*`
            }, { quoted: msg });
        }

        // Actualizar y manejar Rangos
        const rangos = [
            { nivel: 1, rango: "üåü Novato" },
            { nivel: 5, rango: "‚öîÔ∏è Guerrero Novato" },
            { nivel: 10, rango: "üî• Maestro Criminal" },
            { nivel: 20, rango: "üëë √âlite del Crimen" },
            { nivel: 30, rango: "üåÄ Genio del Robo" },
            { nivel: 40, rango: "üíÄ Rey del Crimen" },
            { nivel: 50, rango: "üöÄ Se√±or Supremo" }
        ];
        let rangoAnterior = usuario.rango;
        usuario.rango = rangos.reduce((acc, curr) => (usuario.nivel >= curr.nivel ? curr.rango : acc), usuario.rango);
        if (usuario.rango !== rangoAnterior) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéñÔ∏è *¬°${usuario.nombre} ha subido de rango a ${usuario.rango}!* üöÄ`
            }, { quoted: msg });
        }

        // Verificar si el usuario sube de nivel
        let xpMaxNivel = usuario.nivel === 1 ? 1000 : usuario.nivel * 1500;
        while (usuario.experiencia >= xpMaxNivel && usuario.nivel < 50) {
            usuario.experiencia -= xpMaxNivel;
            usuario.nivel += 1;
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°${usuario.nombre} ha subido al nivel ${usuario.nivel}! üèÜ*\nüèÖ *Nuevo Rango:* ${usuario.rango}`
            }, { quoted: msg });
            xpMaxNivel = usuario.nivel === 1 ? 1000 : usuario.nivel * 1500;
        }

        usuario.cooldowns = usuario.cooldowns || {};
        usuario.cooldowns.crime = tiempoActual;
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));
    } catch (error) {
        console.error("‚ùå Error en el comando .crime:", error);
    }
    break;
}
        
case 'picar': {
  try {
    const fs = require("fs");
    const rpgFile = "./rpg.json";
    const userId = msg.key.participant || msg.key.remoteJid;
    const cooldownTime = 5 * 60 * 1000; // 5 minutos

    // ‚õèÔ∏è Reacci√≥n inicial
    await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚õèÔ∏è", key: msg.key } });

    if (!fs.existsSync(rpgFile)) {
      return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
    }
    let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
    if (!rpgData.usuarios[userId]) {
      return sock.sendMessage(msg.key.remoteJid, { 
        text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
      }, { quoted: msg });
    }
    let usuario = rpgData.usuarios[userId];

    if (usuario.vida <= 0) {
      return sock.sendMessage(msg.key.remoteJid, { 
        text: `üöë *¬°No puedes picar piedras!*\n\nüî¥ *Tu vida es 0.*\nüìú Usa \`${global.prefix}hospital\` para recuperarte.` 
      }, { quoted: msg });
    }

    let tiempoActual = Date.now();
    if (usuario.cooldowns?.picar && (tiempoActual - usuario.cooldowns.picar) < cooldownTime) {
      let tiempoRestante = ((usuario.cooldowns.picar + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
      return sock.sendMessage(msg.key.remoteJid, { 
        text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a picar.*` 
      }, { quoted: msg });
    }

    // Generar recompensas aleatorias:
    let xpGanado = Math.floor(Math.random() * (3000 - 300 + 1)) + 300; // Entre 300 y 3000 XP
    let diamantesGanados = Math.floor(Math.random() * (500 - 1 + 1)) + 1; // Entre 1 y 500 diamantes
    let vidaPerdida = Math.floor(Math.random() * (7 - 3 + 1)) + 3; // Entre 3 y 7 puntos
    usuario.vida = Math.max(0, usuario.vida - vidaPerdida);

    usuario.experiencia += xpGanado;
    usuario.diamantes += diamantesGanados;
    usuario.cooldowns = usuario.cooldowns || {};
    usuario.cooldowns.picar = tiempoActual;

    // Enviar mensaje de recompensa
    const textos = [
      `‚õèÔ∏è *${usuario.nombre} trabaj√≥ arduamente picando piedras en la cantera.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`,
      `üíé *Tras una larga jornada, ${usuario.nombre} encontr√≥ gemas valiosas entre las rocas.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`,
      `ü™® *Piedra tras piedra, ${usuario.nombre} logr√≥ extraer un buen bot√≠n.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`,
      `üî® *Golpeando con su pico, ${usuario.nombre} descubri√≥ minerales ocultos.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`,
      `‚õ∞Ô∏è *Explorando la cantera, ${usuario.nombre} hall√≥ una veta de diamantes.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`,
      `üí∞ *La fortuna sonri√≥ a ${usuario.nombre}, quien extrajo un tesoro de la roca.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`
    ];
    await sock.sendMessage(msg.key.remoteJid, { 
      text: textos[Math.floor(Math.random() * textos.length)]
    }, { quoted: msg });

    // Incrementar habilidad con 25% de probabilidad (mensaje separado)
    let habilidades = Object.keys(usuario.habilidades);
    if (habilidades.length > 0 && Math.random() < 0.25) {
      let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
      usuario.habilidades[habilidadSubida].nivel += 1;
      await sock.sendMessage(msg.key.remoteJid, { 
        text: `üåü *¬°${usuario.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${usuario.habilidades[habilidadSubida].nivel}*`
      }, { quoted: msg });
    }

    // Verificar subida de nivel:
    // Nivel 1 a 2 requiere 1000 XP; para niveles posteriores, xpMax = nivel * 1500.
    let xpMaxNivel = usuario.nivel === 1 ? 1000 : usuario.nivel * 1500;
    while (usuario.experiencia >= xpMaxNivel && usuario.nivel < 50) {
      usuario.experiencia -= xpMaxNivel;
      usuario.nivel += 1;
      await sock.sendMessage(msg.key.remoteJid, { 
        text: `üéâ *¬°${usuario.nombre} ha subido al nivel ${usuario.nivel}! üèÜ*`
      }, { quoted: msg });
      xpMaxNivel = usuario.nivel === 1 ? 1000 : usuario.nivel * 1500;
    }

    // Actualizar y manejar rangos (usando los mismos rangos que en minar2)
    const rangos = [
      { nivel: 1, rango: "üåü Novato" },
      { nivel: 5, rango: "‚öíÔ∏è Minero Aprendiz" },
      { nivel: 10, rango: "ü™® Minero Experto" },
      { nivel: 20, rango: "üíé Cazador de Gemas" },
      { nivel: 30, rango: "üî± Maestro Excavador" },
      { nivel: 40, rango: "üèÜ Se√±or de las Rocas" },
      { nivel: 50, rango: "üöÄ Tit√°n Supremo" }
    ];
    let rangoAnterior = usuario.rango;
    usuario.rango = rangos.reduce((acc, curr) => (usuario.nivel >= curr.nivel ? curr.rango : acc), usuario.rango);
    if (usuario.rango !== rangoAnterior) {
      await sock.sendMessage(msg.key.remoteJid, { 
        text: `üéñÔ∏è *¬°${usuario.nombre} ha subido de rango a ${usuario.rango}!*`
      }, { quoted: msg });
    }

    fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));
    await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚úÖ", key: msg.key } });
  } catch (error) {
    console.error("‚ùå Error en el comando .picar:", error);
    await sock.sendMessage(msg.key.remoteJid, { 
      text: "‚ùå *Ocurri√≥ un error al picar. Int√©ntalo de nuevo.*" 
    }, { quoted: msg });
  }
  break;
}
        
case 'minar': {
  try {
    const fs = require("fs");
    const rpgFile = "./rpg.json";
    const userId = msg.key.participant || msg.key.remoteJid;
    const cooldownTime = 5 * 60 * 1000; // 5 minutos

    // ‚õèÔ∏è Reacci√≥n inicial
    await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚õèÔ∏è", key: msg.key } });

    if (!fs.existsSync(rpgFile)) {
      return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
    }
    let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
    if (!rpgData.usuarios[userId]) {
      return sock.sendMessage(msg.key.remoteJid, { 
        text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
      }, { quoted: msg });
    }
    let usuario = rpgData.usuarios[userId];

    if (usuario.vida <= 0) {
      return sock.sendMessage(msg.key.remoteJid, { 
        text: `üöë *¬°No puedes minar!*\n\nüî¥ *Tu vida es 0.*\nüìú Usa \`${global.prefix}hospital\` para recuperarte.` 
      }, { quoted: msg });
    }

    let tiempoActual = Date.now();
    if (usuario.cooldowns?.minar && (tiempoActual - usuario.cooldowns.minar) < cooldownTime) {
      let tiempoRestante = ((usuario.cooldowns.minar + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
      return sock.sendMessage(msg.key.remoteJid, { 
        text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a minar.*` 
      }, { quoted: msg });
    }

    // Generar recompensas aleatorias:
    let xpGanado = Math.floor(Math.random() * (1000 - 200 + 1)) + 200; // 200 - 1000 XP
    let diamantesGanados = Math.floor(Math.random() * (500 - 1 + 1)) + 1; // 1 - 500 diamantes
    let vidaPerdida = Math.floor(Math.random() * (7 - 3 + 1)) + 3; // 3 - 7
    usuario.vida = Math.max(0, usuario.vida - vidaPerdida);

    usuario.experiencia += xpGanado;
    usuario.diamantes += diamantesGanados;
    usuario.cooldowns = usuario.cooldowns || {};
    usuario.cooldowns.minar = tiempoActual;

    // Enviar mensaje de recompensa
    const textos = [
      `‚õèÔ∏è *${usuario.nombre} encontr√≥ una mina de oro y trabaj√≥ duro en ella.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`,
      `üíé *Despu√©s de cavar durante horas, ${usuario.nombre} descubri√≥ piedras preciosas.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`,
      `üåã *Explorando una cueva profunda, ${usuario.nombre} hall√≥ minerales raros.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`,
      `üî® *Golpeando con su pico, ${usuario.nombre} consigui√≥ una gran cantidad de recursos.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`,
      `üí∞ *La suerte estuvo del lado de ${usuario.nombre}, quien encontr√≥ un fil√≥n de diamantes.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`,
      `üöÄ *Tras una larga jornada, ${usuario.nombre} extrajo una cantidad impresionante de minerales.*\nüíé *${diamantesGanados} diamantes obtenidos*\n‚ú® *${xpGanado} XP ganados*`
    ];
    await sock.sendMessage(msg.key.remoteJid, { 
      text: textos[Math.floor(Math.random() * textos.length)]
    }, { quoted: msg });

    // Mejora de habilidad con 25% de probabilidad (mensaje inmediato)
    let habilidades = Object.keys(usuario.habilidades);
    if (habilidades.length > 0 && Math.random() < 0.25) {
      let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
      usuario.habilidades[habilidadSubida].nivel += 1;
      await sock.sendMessage(msg.key.remoteJid, { 
        text: `üåü *¬°${usuario.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${usuario.habilidades[habilidadSubida].nivel}*`
      }, { quoted: msg });
    }

    // Verificar subida de nivel
    let xpMaxNivel = usuario.nivel * 1000;
    while (usuario.experiencia >= xpMaxNivel && usuario.nivel < 50) {
      usuario.experiencia -= xpMaxNivel;
      usuario.nivel += 1;
      await sock.sendMessage(msg.key.remoteJid, { 
        text: `üéâ *¬°${usuario.nombre} ha subido al nivel ${usuario.nivel}! üèÜ*`
      }, { quoted: msg });
      xpMaxNivel = usuario.nivel * 1500;
    }

    // Actualizar rango general
    const rangos = [
            { nivel: 1, rango: "üåü Novato" },
            { nivel: 5, rango: "‚öîÔ∏è Guerrero Novato" },
            { nivel: 10, rango: "üî• Maestro Combatiente" },
            { nivel: 20, rango: "üëë √âlite Supremo" },
            { nivel: 30, rango: "üåÄ Legendario" },
            { nivel: 40, rango: "üíÄ Dios de la Batalla" },
            { nivel: 50, rango: "üöÄ Tit√°n Supremo" }
    ];
    let rangoAnterior = usuario.rango;
    usuario.rango = rangos.reduce((acc, curr) => (usuario.nivel >= curr.nivel ? curr.rango : acc), usuario.rango);
    if (usuario.rango !== rangoAnterior) {
      await sock.sendMessage(msg.key.remoteJid, { 
        text: `üéñÔ∏è *¬°${usuario.nombre} ha subido de rango a ${usuario.rango}!*`
      }, { quoted: msg });
    }

    fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));
    await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚úÖ", key: msg.key } });
  } catch (error) {
    console.error("‚ùå Error en el comando .minar:", error);
    await sock.sendMessage(msg.key.remoteJid, { 
      text: "‚ùå *Ocurri√≥ un error al minar. Int√©ntalo de nuevo.*" 
    }, { quoted: msg });
  }
  break;
}
        
case 'minar2': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 5 * 60 * 1000; // 5 minutos de espera

        // ‚õèÔ∏è Reacci√≥n inicial
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚õèÔ∏è", key: msg.key } });

        // Verificar existencia del archivo
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // Verificar que el usuario est√© registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }
        let usuario = rpgData.usuarios[userId];

        // Verificar vida del usuario
        if (usuario.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°No puedes minar!*\n\nüî¥ *Tu vida es 0.*\nüìú Usa \`${global.prefix}hospital\` para recuperarte.` 
            }, { quoted: msg });
        }

        // Verificar cooldown
        let tiempoActual = Date.now();
        if (usuario.cooldowns?.minar2 && (tiempoActual - usuario.cooldowns.minar2) < cooldownTime) {
            let tiempoRestante = ((usuario.cooldowns.minar2 + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a minar.*` 
            }, { quoted: msg });
        }

        // Generar recompensas aleatorias:
        let xpGanado = Math.floor(Math.random() * (2000 - 500 + 1)) + 500; // Entre 500 y 2000 XP
        let diamantesGanados = Math.floor(Math.random() * (500 - 1 + 1)) + 1; // Entre 1 y 500 diamantes
        let vidaPerdida = Math.floor(Math.random() * (7 - 3 + 1)) + 3; // Entre 3 y 7 puntos
        usuario.vida = Math.max(0, usuario.vida - vidaPerdida);

        // Incrementar XP y diamantes
        usuario.experiencia += xpGanado;
        usuario.diamantes += diamantesGanados;
        usuario.cooldowns = usuario.cooldowns || {};
        usuario.cooldowns.minar2 = tiempoActual;

        // Enviar mensaje de recompensa
        const textos = [
            `‚õèÔ∏è *${usuario.nombre} encontr√≥ una mina secreta y extrae minerales valiosos.*\nüíé *${diamantesGanados} diamantes ganados*\n‚ú® *${xpGanado} XP obtenidos*`,
            `üèîÔ∏è *Despu√©s de un duro trabajo, ${usuario.nombre} encontr√≥ piedras preciosas.*\nüíé *${diamantesGanados} diamantes ganados*\n‚ú® *${xpGanado} XP obtenidos*`,
            `‚õèÔ∏è *Golpe tras golpe, ${usuario.nombre} extrae tesoros ocultos en la cueva.*\nüíé *${diamantesGanados} diamantes ganados*\n‚ú® *${xpGanado} XP obtenidos*`,
            `üåã *Las profundidades de la mina revelan una gran sorpresa para ${usuario.nombre}.*\nüíé *${diamantesGanados} diamantes ganados*\n‚ú® *${xpGanado} XP obtenidos*`,
            `üî¶ *${usuario.nombre} explora una mina abandonada y descubre minerales raros.*\nüíé *${diamantesGanados} diamantes ganados*\n‚ú® *${xpGanado} XP obtenidos*`,
            `‚öíÔ∏è *Un golpe certero y ${usuario.nombre} saca un mont√≥n de diamantes de la roca.*\nüíé *${diamantesGanados} diamantes ganados*\n‚ú® *${xpGanado} XP obtenidos*`
        ];
        await sock.sendMessage(msg.key.remoteJid, { 
            text: textos[Math.floor(Math.random() * textos.length)]
        }, { quoted: msg });

        // Mejorar habilidad con 30% de probabilidad (mensaje separado)
        let habilidades = Object.keys(usuario.habilidades);
        if (habilidades.length > 0 && Math.random() < 0.3) {
            let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
            usuario.habilidades[habilidadSubida].nivel += 1;
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ú® *¬°${usuario.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${usuario.habilidades[habilidadSubida].nivel}*`
            }, { quoted: msg });
        }

        // Verificar subida de nivel
        // Para el segundo nivel se requieren 1000 XP, luego se usa nivel * 1500
        let xpMaxNivel = usuario.nivel === 1 ? 1000 : usuario.nivel * 1500;
        while (usuario.experiencia >= xpMaxNivel && usuario.nivel < 50) {
            usuario.experiencia -= xpMaxNivel;
            usuario.nivel += 1;
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°${usuario.nombre} ha subido al nivel ${usuario.nivel}! üèÜ*`
            }, { quoted: msg });
            xpMaxNivel = usuario.nivel === 1 ? 1000 : usuario.nivel * 1500;
        }

        // Actualizar y manejar rangos (rango general)
        const rangos = [
            { nivel: 1, rango: "üåü Novato" },
            { nivel: 5, rango: "‚öîÔ∏è Guerrero Novato" },
            { nivel: 10, rango: "üî• Maestro Combatiente" },
            { nivel: 20, rango: "üëë √âlite Supremo" },
            { nivel: 30, rango: "üåÄ Legendario" },
            { nivel: 40, rango: "üíÄ Dios de la Batalla" },
            { nivel: 50, rango: "üöÄ Tit√°n Supremo" }
        ];
        let rangoAnterior = usuario.rango;
        usuario.rango = rangos.reduce((acc, curr) => (usuario.nivel >= curr.nivel ? curr.rango : acc), usuario.rango);
        if (usuario.rango !== rangoAnterior) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéñÔ∏è *¬°${usuario.nombre} ha subido de rango a ${usuario.rango}!*`
            }, { quoted: msg });
        }

        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚úÖ", key: msg.key } });
    } catch (error) {
        console.error("‚ùå Error en el comando .minar2:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al minar. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });
    }
    break;
}
        
case 'topuser': {
  try {
    // Reacci√≥n inicial
    await sock.sendMessage(msg.key.remoteJid, { 
      react: { text: "üèÜ", key: msg.key } 
    });
    
    const rpgFile = "./rpg.json";
    if (!fs.existsSync(rpgFile)) {
      return sock.sendMessage(msg.key.remoteJid, {
        text: `‚ùå *No hay datos de RPG. Usa \`${global.prefix}crearcartera\` para empezar.*`
      }, { quoted: msg });
    }
    
    let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
    let usuarios = rpgData.usuarios;
    if (!usuarios || Object.keys(usuarios).length === 0) {
      return sock.sendMessage(msg.key.remoteJid, {
        text: "‚ùå *No hay usuarios registrados a√∫n.*"
      }, { quoted: msg });
    }
    
    // Crear array para el ranking de usuarios basado en su nivel
    let ranking = [];
    for (let id in usuarios) {
      let user = usuarios[id];
      // Solo consideramos usuarios que tengan datos b√°sicos de nivel y habilidades
      if (typeof user.nivel === "number") {
        let habilidades = Object.entries(user.habilidades || {})
          .map(([key, value]) => `${key} (Nivel ${value.nivel || value})`)
          .join(", ");
        ranking.push({
          id,
          nombre: user.nombre,
          nivel: user.nivel,
          rango: user.rango || "Sin rango",
          habilidades: habilidades || "Sin habilidades"
        });
      }
    }
    
    // Ordenar el ranking por nivel descendente
    ranking.sort((a, b) => b.nivel - a.nivel);
    
    // Construir mensaje del ranking
    let mensajeRanking = "üèÜ *Ranking de Jugadores* üèÜ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
    ranking.forEach((user, index) => {
      mensajeRanking += `ü•á *#${index + 1} - @${user.id.split('@')[0]}*\n`;
      mensajeRanking += `üéÆ *Nivel:* ${user.nivel}\n`;
      mensajeRanking += `üìä *Rango:* ${user.rango}\n`;
      mensajeRanking += `‚ö° *Habilidades:* ${user.habilidades}\n`;
      mensajeRanking += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
    });
    
    // Enviar el ranking con la imagen de fondo
    await sock.sendMessage(msg.key.remoteJid, { 
      image: { url: "https://cdn.dorratz.com/files/1741194763651.jpg" },
      caption: mensajeRanking,
      mentions: ranking.map(u => u.id)
    }, { quoted: msg });
    
  } catch (error) {
    console.error("‚ùå Error en el comando .topuser:", error);
    await sock.sendMessage(msg.key.remoteJid, { 
      text: `‚ùå *Ocurri√≥ un error al generar el ranking de jugadores. Int√©ntalo de nuevo.*`
    }, { quoted: msg });
    await sock.sendMessage(msg.key.remoteJid, { 
      react: { text: "‚ùå", key: msg.key }
    });
  }
  break;
}

case 'topmascotas': {
  try {
    // Reacci√≥n inicial
    await sock.sendMessage(msg.key.remoteJid, { 
      react: { text: "üèÜ", key: msg.key }
    });
    
    const rpgFile = "./rpg.json";
    if (!fs.existsSync(rpgFile)) {
      return sock.sendMessage(msg.key.remoteJid, {
        text: `‚ùå *No hay datos de RPG. Usa \`${global.prefix}crearcartera\` para empezar.*`
      }, { quoted: msg });
    }
    
    let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
    let usuarios = rpgData.usuarios;
    if (!usuarios || Object.keys(usuarios).length === 0) {
      return sock.sendMessage(msg.key.remoteJid, {
        text: "‚ùå *No hay usuarios registrados a√∫n.*"
      }, { quoted: msg });
    }
    
    // Construir array de ranking para mascotas: cantidad y total nivel
    let ranking = [];
    for (let id in usuarios) {
      let user = usuarios[id];
      if (user.mascotas && user.mascotas.length > 0) {
        let cantidad = user.mascotas.length;
        let totalNivel = user.mascotas.reduce((sum, m) => sum + (m.nivel || 1), 0);
        // Listado de mascotas: nombre y nivel de cada una
        let listado = user.mascotas.map(m => `üé≠ ${m.nombre} (Nivel ${m.nivel})`).join("\n");
        ranking.push({
          id,
          nombre: user.nombre,
          cantidad,
          totalNivel,
          listado
        });
      }
    }
    
    // Ordenar ranking: primero por cantidad descendente; si hay empate, por totalNivel descendente
    ranking.sort((a, b) => {
      if (b.cantidad !== a.cantidad) return b.cantidad - a.cantidad;
      return b.totalNivel - a.totalNivel;
    });
    
    // Construir mensaje final
    let mensajeFinal = "üèÜ *Ranking de Jugadores con M√°s y Mejores Mascotas* üèÜ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
    ranking.forEach((u, index) => {
      mensajeFinal += `ü•á *#${index + 1} - @${u.id.split('@')[0]}*\n`;
      mensajeFinal += `üêæ *Mascotas:* ${u.cantidad}\n`;
      mensajeFinal += `üî• *Total Nivel:* ${u.totalNivel}\n`;
      mensajeFinal += `${u.listado}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
    });
    
    // Enviar la imagen con el ranking en el caption y mencionar a todos los usuarios incluidos
    await sock.sendMessage(msg.key.remoteJid, { 
      image: { url: "https://cdn.dorratz.com/files/1741194332982.jpg" },
      caption: mensajeFinal,
      mentions: ranking.map(u => u.id)
    }, { quoted: msg });
    
  } catch (error) {
    console.error("‚ùå Error en el comando .topmascotas:", error);
    await sock.sendMessage(msg.key.remoteJid, { 
      text: `‚ùå *Ocurri√≥ un error al generar el ranking de mascotas. Int√©ntalo de nuevo.*`
    }, { quoted: msg });
    await sock.sendMessage(msg.key.remoteJid, { 
      react: { text: "‚ùå", key: msg.key }
    });
  }
  break;
}            

        
case 'topper': {
  try {
    // Reacci√≥n inicial
    await sock.sendMessage(msg.key.remoteJid, { 
      react: { text: "üèÜ", key: msg.key }
    });
    
    const rpgFile = "./rpg.json";
    if (!fs.existsSync(rpgFile)) {
      return sock.sendMessage(msg.key.remoteJid, {
        text: `‚ùå *No hay datos de RPG. Usa \`${global.prefix}crearcartera\` para empezar.*`
      }, { quoted: msg });
    }
    
    let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
    let usuarios = rpgData.usuarios;
    if (!usuarios || Object.keys(usuarios).length === 0) {
      return sock.sendMessage(msg.key.remoteJid, {
        text: "‚ùå *No hay usuarios registrados a√∫n.*"
      }, { quoted: msg });
    }
    
    // Crear un array para el ranking con ambos criterios
    let ranking = [];
    for (let id in usuarios) {
      let user = usuarios[id];
      if (user.personajes && user.personajes.length > 0) {
        let cantidad = user.personajes.length;
        let totalNivel = user.personajes.reduce((sum, pers) => sum + (pers.nivel || 1), 0);
        // Listado de personajes: se muestra el nombre y el nivel de cada uno
        let listado = user.personajes.map(pers => `üé≠ ${pers.nombre} (Nivel ${pers.nivel})`).join("\n");
        ranking.push({
          id,
          nombre: user.nombre,
          cantidad,
          totalNivel,
          listado
        });
      }
    }
    
    // Ordenar ranking: primero por cantidad descendente y, en caso de empate, por totalNivel descendente
    ranking.sort((a, b) => {
      if (b.cantidad !== a.cantidad) return b.cantidad - a.cantidad;
      return b.totalNivel - a.totalNivel;
    });
    
    // Construir el mensaje del ranking
    let mensajeRanking = "üèÜ *Ranking de Jugadores con M√°s y Mejores Personajes* üèÜ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
    ranking.forEach((user, index) => {
      mensajeRanking += `ü•á *#${index + 1} - @${user.id.split('@')[0]}*\n`;
      mensajeRanking += `üéÆ *Personajes:* ${user.cantidad}\n`;
      mensajeRanking += `üî• *Total Nivel:* ${user.totalNivel}\n`;
      mensajeRanking += `${user.listado}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
    });
    
    // Enviar el mensaje con la imagen de fondo y mencionar a todos los usuarios incluidos en el ranking
    await sock.sendMessage(msg.key.remoteJid, { 
      image: { url: "https://cdn.dorratz.com/files/1741194214880.jpg" },
      caption: mensajeRanking,
      mentions: ranking.map(u => u.id)
    }, { quoted: msg });
    
  } catch (error) {
    console.error("‚ùå Error en el comando .topper:", error);
    await sock.sendMessage(msg.key.remoteJid, { 
      text: `‚ùå *Ocurri√≥ un error al generar el ranking. Int√©ntalo de nuevo.*` 
    }, { quoted: msg });
    await sock.sendMessage(msg.key.remoteJid, { 
      react: { text: "‚ùå", key: msg.key }
    });
  }
  break;
}
        
case 'batallauser': {
  try {
    const rpgFile = "./rpg.json";
    if (!fs.existsSync(rpgFile)) {
      return sock.sendMessage(msg.key.remoteJid, {
        text: `‚ùå *No hay datos de RPG. Usa \`${global.prefix}crearcartera\` para empezar.*`
      }, { quoted: msg });
    }
    let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
    let userId = msg.key.participant || msg.key.remoteJid;
    
    // ‚è≥ Verificar cooldown (5 minutos) para batallas de usuarios
    if (rpgData.usuarios[userId]?.cooldowns?.batallaUser) {
      let cooldownTime = rpgData.usuarios[userId].cooldowns.batallaUser;
      if ((Date.now() - cooldownTime) < 5 * 60 * 1000) {
        let remainingTime = Math.ceil((5 * 60 * 1000 - (Date.now() - cooldownTime)) / 1000);
        return sock.sendMessage(msg.key.remoteJid, {
          text: `‚è≥ *Debes esperar ${remainingTime} segundos antes de usar \`${global.prefix}batallauser\` nuevamente.*`
        }, { quoted: msg });
      }
    }
    
    // Verificar que el usuario existe
    if (!rpgData.usuarios[userId]) {
      return sock.sendMessage(msg.key.remoteJid, {
        text: `‚ùå *No tienes una cuenta en el gremio Azura Ultra. Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.*`
      }, { quoted: msg });
    }
    let usuario = rpgData.usuarios[userId];
    
    // Extraer el ID del oponente: intenta primero por mensaje citado y, si no, por menciones
    let opponentId;
    if (msg.message?.extendedTextMessage?.contextInfo?.quotedMessage) {
      opponentId = msg.message.extendedTextMessage.contextInfo.participant;
    }
    if (!opponentId && msg.message?.extendedTextMessage?.contextInfo?.mentionedJid) {
      opponentId = msg.message.extendedTextMessage.contextInfo.mentionedJid[0];
    }
    if (!opponentId) {
      return sock.sendMessage(msg.key.remoteJid, {
        text: `‚öîÔ∏è *Menciona o responde (cita) a un usuario para retarlo a una batalla entre usuarios.*`
      }, { quoted: msg });
    }
    
    // Verificar que el oponente exista
    if (!rpgData.usuarios[opponentId]) {
      return sock.sendMessage(msg.key.remoteJid, {
        text: `‚ùå *El oponente no tiene una cuenta registrada en el gremio.*`
      }, { quoted: msg });
    }
    let oponente = rpgData.usuarios[opponentId];
    
    // Formatear habilidades de ambos usuarios
    let habilidadesUser = Object.entries(usuario.habilidades)
      .map(([nombre, datos]) => `‚ö° *${nombre}:* Nivel ${datos.nivel || 1}`)
      .join("\n");
    let habilidadesOponente = Object.entries(oponente.habilidades)
      .map(([nombre, datos]) => `‚ö° *${nombre}:* Nivel ${datos.nivel || 1}`)
      .join("\n");
    
    // Construir el mensaje de desaf√≠o usando el prefijo global
    let mensajeDesafio =
      `üõ°Ô∏è *¬°Desaf√≠o de Batalla entre Usuarios!* üõ°Ô∏è\n\n` +
      `üë§ *Retador:* @${userId.split('@')[0]}\n` +
      `üéØ *Retado:* @${opponentId.split('@')[0]}\n\n` +
      `üìä *Datos de @${userId.split('@')[0]}:*\n` +
      `   ‚Ä¢ *Nivel:* ${usuario.nivel}\n` +
      `   ‚Ä¢ *Vida:* ${usuario.vida}\n` +
      `   ‚Ä¢ *Habilidades:*\n${habilidadesUser}\n\n` +
      `üìä *Datos de @${opponentId.split('@')[0]}:*\n` +
      `   ‚Ä¢ *Nivel:* ${oponente.nivel}\n` +
      `   ‚Ä¢ *Vida:* ${oponente.vida}\n` +
      `   ‚Ä¢ *Habilidades:*\n${habilidadesOponente}\n\n` +
      `üõ°Ô∏è *@${opponentId.split('@')[0]}*, responde con \`${global.prefix}gouser\` para aceptar el desaf√≠o.\n` +
      `‚è≥ *Tienes 2 minutos para aceptar.*`;
      
    await sock.sendMessage(msg.key.remoteJid, { text: mensajeDesafio, mentions: [userId, opponentId] });
    
    // Guardar la solicitud de batalla en el usuario retador (tipo "user")
    usuario.battleRequest = {
      target: opponentId,
      time: Date.now(),
      type: "user"
    };
    fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));
    
    // Configurar expiraci√≥n de la solicitud (2 minutos)
    setTimeout(() => {
      let data = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
      if (
        data.usuarios[userId]?.battleRequest &&
        data.usuarios[userId].battleRequest.target === opponentId &&
        data.usuarios[userId].battleRequest.type === "user"
      ) {
        delete data.usuarios[userId].battleRequest;
        fs.writeFileSync(rpgFile, JSON.stringify(data, null, 2));
        sock.sendMessage(msg.key.remoteJid, {
          text: "‚è≥ *La solicitud de batalla entre usuarios ha expirado porque no fue aceptada a tiempo.*"
        }, { quoted: msg });
      }
    }, 120000);
    
  } catch (error) {
    console.error('‚ùå Error en .batallauser:', error);
  }
  break;
}

case 'gouser': {
  try {
    const rpgFile = "./rpg.json";
    if (!fs.existsSync(rpgFile)) {
      return sock.sendMessage(msg.key.remoteJid, {
        text: `‚ùå *No hay datos de RPG. Usa \`${global.prefix}crearcartera\` para empezar.*`
      }, { quoted: msg });
    }
    let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
    let userId = msg.key.participant || msg.key.remoteJid;
    
    // Buscar qui√©n desafi√≥ al usuario (tipo "user")
    const challengerId = Object.keys(rpgData.usuarios).find(
      (id) => rpgData.usuarios[id].battleRequest &&
              rpgData.usuarios[id].battleRequest.target === userId &&
              rpgData.usuarios[id].battleRequest.type === "user"
    );
    if (!challengerId) {
      return sock.sendMessage(msg.key.remoteJid, {
        text: "‚ö†Ô∏è *No tienes ninguna solicitud de batalla entre usuarios pendiente.*"
      }, { quoted: msg });
    }
    
    // Verificar que la solicitud siga activa (2 minutos)
    const requestTime = rpgData.usuarios[challengerId].battleRequest.time;
    if (Date.now() - requestTime > 120000) {
      delete rpgData.usuarios[challengerId].battleRequest;
      fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));
      return sock.sendMessage(msg.key.remoteJid, {
        text: "‚è≥ *La solicitud de batalla entre usuarios ha expirado.*"
      }, { quoted: msg });
    }
    
    // Eliminar la solicitud de batalla al aceptar
    delete rpgData.usuarios[challengerId].battleRequest;
    
    let userStats = rpgData.usuarios[userId];
    let challengerStats = rpgData.usuarios[challengerId];
    
    // Animaci√≥n de batalla
    const animaciones = [
      "üõ°Ô∏è *¬°La batalla entre usuarios comienza!* Los guerreros se preparan...",
      `üî• *${challengerStats.nombre}* lanza un ataque devastador.`,
      `üõ°Ô∏è *${userStats.nombre}* se defiende con gran habilidad.`,
      `üí• *Impacto cr√≠tico de ${userStats.nombre}!*`,
      `‚ö° *${challengerStats.nombre}* utiliza su t√©cnica secreta.`,
      `üå™Ô∏è *La batalla se intensifica...*`,
      `‚ú® *El enfrentamiento alcanza su punto √°lgido...*`,
      "üí• *¬°El destino de la batalla est√° por decidirse!*"
    ];
    let mensajeAnimado = await sock.sendMessage(
      msg.key.remoteJid,
      { text: animaciones[0] },
      { quoted: msg }
    );
    for (let i = 1; i < animaciones.length; i++) {
      await new Promise(resolve => setTimeout(resolve, 1500));
      await sock.sendMessage(
        msg.key.remoteJid,
        { text: animaciones[i], edit: mensajeAnimado.key },
        { quoted: msg }
      );
    }
    
    // **üí• C√°lculo de batalla para usuarios**
    const statsChallenger = challengerStats.nivel * 5 +
      Object.values(challengerStats.habilidades).reduce((total, h) => total + ((typeof h === 'object' ? h.nivel : h) * 2), 0);
    const statsUser = userStats.nivel * 5 +
      Object.values(userStats.habilidades).reduce((total, h) => total + ((typeof h === 'object' ? h.nivel : h) * 2), 0);
    
    let empate = false;
    let ganadorId, perdedorId;
    if (statsChallenger > statsUser) {
      ganadorId = challengerId;
      perdedorId = userId;
    } else if (statsChallenger < statsUser) {
      ganadorId = userId;
      perdedorId = challengerId;
    } else {
      empate = true;
    }
    
    let mensajeFinal = "";
    
    if (empate) {
      const xpTie = Math.floor(Math.random() * 301) + 200;     // 200 - 500 XP
      const diamondTie = Math.floor(Math.random() * 201) + 100;  // 100 - 300 diamantes
      
      rpgData.usuarios[userId].diamantes = (rpgData.usuarios[userId].diamantes || 0) + diamondTie;
      rpgData.usuarios[challengerId].diamantes = (rpgData.usuarios[challengerId].diamantes || 0) + diamondTie;
      
      userStats.experiencia = (userStats.experiencia || 0) + xpTie;
      challengerStats.experiencia = (challengerStats.experiencia || 0) + xpTie;
      
      mensajeFinal = 
        `ü§ù *¬°La batalla entre usuarios termin√≥ en empate!* ü§ù\n\n` +
        `Ambos reciben:\n` +
        `‚Ä¢ +${xpTie} XP ‚ú®\n` +
        `‚Ä¢ +${diamondTie} diamantes üíé\n\n` +
        `‚ù§Ô∏è *Estado actual:*\n` +
        `- ${userStats.nombre}: ${userStats.vida} HP\n` +
        `- ${challengerStats.nombre}: ${challengerStats.vida} HP`;
    } else {
      let ganador = rpgData.usuarios[ganadorId];
      let perdedor = rpgData.usuarios[perdedorId];
      
      // üîª Reducir vida de los usuarios
      ganador.vida -= Math.floor(Math.random() * 10) + 5;
      perdedor.vida -= Math.floor(Math.random() * 20) + 10;
      if (ganador.vida < 0) ganador.vida = 0;
      if (perdedor.vida < 0) perdedor.vida = 0;
      
      const xpGanador = Math.floor(Math.random() * 701) + 300; // 300 - 1000 XP
      const diamondGanador = Math.floor(Math.random() * 301) + 200; // 200 - 500 diamantes
      const xpPerdedor = Math.floor(Math.random() * 201) + 100; // 100 - 300 XP
      const diamondPerdedor = Math.floor(Math.random() * 151) + 50; // 50 - 200 diamantes
      
      ganador.experiencia = (ganador.experiencia || 0) + xpGanador;
      rpgData.usuarios[ganadorId].diamantes = (rpgData.usuarios[ganadorId].diamantes || 0) + diamondGanador;
      perdedor.experiencia = (perdedor.experiencia || 0) + xpPerdedor;
      rpgData.usuarios[perdedorId].diamantes = (rpgData.usuarios[perdedorId].diamantes || 0) + diamondPerdedor;
      
      mensajeFinal =
        `üéâ *¬°La batalla entre usuarios ha terminado!* üéâ\n\n` +
        `üèÜ *Ganador:* @${ganadorId.split('@')[0]}\n` +
        `üíî *Perdedor:* @${perdedorId.split('@')[0]}\n\n` +
        `*Recompensas:*\n` +
        `‚Ä¢ *Ganador:* +${xpGanador} XP ‚ú®, +${diamondGanador} diamantes üíé\n` +
        `‚Ä¢ *Perdedor:* +${xpPerdedor} XP ‚ú®, +${diamondPerdedor} diamantes üíé\n\n` +
        `‚ù§Ô∏è *Estado actual:*\n` +
        `- ${ganador.nombre}: ${ganador.vida} HP\n` +
        `- ${perdedor.nombre}: ${perdedor.vida} HP`;
    }
    
    // Subida de nivel autom√°tica para los usuarios (definimos xpMax para usuario como nivel * 1500)
    const usuariosEnBatalla = [userStats, challengerStats];
    for (const u of usuariosEnBatalla) {
      u.xpMax = u.xpMax || (u.nivel * 1500);
      while (u.experiencia >= u.xpMax && u.nivel < 70) {
        u.experiencia -= u.xpMax;
        u.nivel++;
        u.xpMax = u.nivel * 1500; // Ajusta seg√∫n tu sistema
        const rangos = ['üåü Principiante', '‚öîÔ∏è Guerrero', 'üî• Maestro', 'üëë √âlite', 'üåÄ Legendario', 'üíÄ Dios de la Batalla'];
        u.rango = rangos[Math.min(Math.floor(u.nivel / 10), rangos.length - 1)];
      }
    }
    
    await sock.sendMessage(
      msg.key.remoteJid,
      { text: mensajeFinal, mentions: empate ? [userId, challengerId] : [ganadorId, perdedorId] },
      { quoted: msg }
    );
    
    // ‚è≥ Guardar cooldown de batalla para ambos (5 minutos)
    rpgData.usuarios[userId].cooldowns = rpgData.usuarios[userId].cooldowns || {};
    rpgData.usuarios[challengerId].cooldowns = rpgData.usuarios[challengerId].cooldowns || {};
    rpgData.usuarios[userId].cooldowns.batallaUser = Date.now();
    rpgData.usuarios[challengerId].cooldowns.batallaUser = Date.now();
    
    fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));
    
  } catch (error) {
    console.error('‚ùå Error en .gouser:', error);
    return sock.sendMessage(
      msg.key.remoteJid,
      { text: '‚ùå *Error inesperado al procesar la batalla entre usuarios.*' },
      { quoted: msg }
    );
  }
  break;
}            
        
case 'batallaanime': {
  try {
    const rpgFile = "./rpg.json";
    if (!fs.existsSync(rpgFile)) {
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: `‚ùå *No hay datos de RPG. Usa \`${global.prefix}crearcartera\` para empezar.*` },
        { quoted: msg }
      );
    }
    let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
    let userId = msg.key.participant || msg.key.remoteJid;
    
    // ‚è≥ Verificar cooldown (5 minutos) para batallas de personajes
    if (rpgData.usuarios[userId]?.cooldowns?.batallaAnime) {
      let cooldownTime = rpgData.usuarios[userId].cooldowns.batallaAnime;
      if ((Date.now() - cooldownTime) < 5 * 60 * 1000) {
        let remainingTime = Math.ceil((5 * 60 * 1000 - (Date.now() - cooldownTime)) / 1000);
        return sock.sendMessage(
          msg.key.remoteJid,
          { text: `‚è≥ *Debes esperar ${remainingTime} segundos antes de usar \`${global.prefix}batallaanime\` nuevamente.*` },
          { quoted: msg }
        );
      }
    }
    
    // Verificar que el usuario tenga al menos un personaje
    if (!rpgData.usuarios[userId] || !rpgData.usuarios[userId].personajes || rpgData.usuarios[userId].personajes.length === 0) {
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: `‚ùå *No tienes un personaje registrado. Usa \`${global.prefix}rpg <nombre> <edad>\` para crear tu cuenta y obtener un personaje inicial.*` },
        { quoted: msg }
      );
    }
    
    // Extraer el ID del oponente: se intenta primero por mensaje citado y, si no, por menciones
    let opponentId;
    if (msg.message?.extendedTextMessage?.contextInfo?.quotedMessage) {
      opponentId = msg.message.extendedTextMessage.contextInfo.participant;
    }
    if (!opponentId && msg.message?.extendedTextMessage?.contextInfo?.mentionedJid) {
      opponentId = msg.message.extendedTextMessage.contextInfo.mentionedJid[0];
    }
    if (!opponentId) {
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: "‚öîÔ∏è *Menciona o responde (cita) a un usuario para retarlo a una batalla de personajes.*" },
        { quoted: msg }
      );
    }
    
    // Verificar que el oponente tenga un personaje
    if (!rpgData.usuarios[opponentId] || !rpgData.usuarios[opponentId].personajes || rpgData.usuarios[opponentId].personajes.length === 0) {
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: "‚ùå *El oponente no tiene un personaje registrado.*" },
        { quoted: msg }
      );
    }
    
    let userCharacter = rpgData.usuarios[userId].personajes[0];
    let opponentCharacter = rpgData.usuarios[opponentId].personajes[0];
    
    // Formatear habilidades (en personajes se guardan como n√∫meros)
    let habilidadesUser = Object.entries(userCharacter.habilidades)
      .map(([nombre, valor]) => `‚ö° *${nombre}:* Nivel ${valor}`)
      .join("\n");
    let habilidadesOpponent = Object.entries(opponentCharacter.habilidades)
      .map(([nombre, valor]) => `‚ö° *${nombre}:* Nivel ${valor}`)
      .join("\n");
    
    // Construir mensaje de desaf√≠o con el prefijo global para la respuesta
    let mensajeDesafio = 
      `üéå *¬°Desaf√≠o de Batalla Anime!* üéå\n\n` +
      `üë§ *Retador:* @${userId.split('@')[0]}\n` +
      `üéØ *Retado:* @${opponentId.split('@')[0]}\n\n` +
      `üó°Ô∏è *Personaje de @${userId.split('@')[0]}:*\n` +
      `   ‚Ä¢ *Nombre:* ${userCharacter.nombre}\n` +
      `   ‚Ä¢ *Nivel:* ${userCharacter.nivel}\n` +
      `   ‚Ä¢ *Rango:* ${userCharacter.rango}\n` +
      `   ‚Ä¢ *Habilidades:*\n${habilidadesUser}\n\n` +
      `üõ°Ô∏è *Personaje de @${opponentId.split('@')[0]}:*\n` +
      `   ‚Ä¢ *Nombre:* ${opponentCharacter.nombre}\n` +
      `   ‚Ä¢ *Nivel:* ${opponentCharacter.nivel}\n` +
      `   ‚Ä¢ *Rango:* ${opponentCharacter.rango}\n` +
      `   ‚Ä¢ *Habilidades:*\n${habilidadesOpponent}\n\n` +
      `üõ°Ô∏è *@${opponentId.split('@')[0]}*, responde con \`${global.prefix}goper\` para aceptar el desaf√≠o.\n` +
      `‚è≥ *Tienes 2 minutos para aceptar.*`;
      
    await sock.sendMessage(
      msg.key.remoteJid,
      { text: mensajeDesafio, mentions: [userId, opponentId] }
    );
    
    // Guardar la solicitud de batalla en el usuario retador (tipo "anime")
    rpgData.usuarios[userId].battleRequest = {
      target: opponentId,
      time: Date.now(),
      type: "anime"
    };
    fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));
    
    // Expiraci√≥n de la solicitud (2 minutos)
    setTimeout(() => {
      let data = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
      if (
        data.usuarios[userId]?.battleRequest &&
        data.usuarios[userId].battleRequest.target === opponentId &&
        data.usuarios[userId].battleRequest.type === "anime"
      ) {
        delete data.usuarios[userId].battleRequest;
        fs.writeFileSync(rpgFile, JSON.stringify(data, null, 2));
        sock.sendMessage(
          msg.key.remoteJid,
          { text: "‚è≥ *La solicitud de batalla anime ha expirado porque no fue aceptada a tiempo.*" },
          { quoted: msg }
        );
      }
    }, 120000);
    
  } catch (error) {
    console.error('‚ùå Error en .batallaanime:', error);
  }
  break;
}

case 'goper': {
  try {
    const rpgFile = "./rpg.json";
    if (!fs.existsSync(rpgFile)) {
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: `‚ùå *No hay datos de RPG. Usa \`${global.prefix}crearcartera\` para empezar.*` },
        { quoted: msg }
      );
    }
    let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
    let userId = msg.key.participant || msg.key.remoteJid;
    
    // Buscar qui√©n desafi√≥ al usuario (tipo "anime")
    const challengerId = Object.keys(rpgData.usuarios).find(
      (id) => rpgData.usuarios[id].battleRequest &&
              rpgData.usuarios[id].battleRequest.target === userId &&
              rpgData.usuarios[id].battleRequest.type === "anime"
    );
    if (!challengerId) {
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: "‚ö†Ô∏è *No tienes ninguna solicitud de batalla anime pendiente.*" },
        { quoted: msg }
      );
    }
    
    // Verificar que la solicitud siga activa (2 minutos)
    const requestTime = rpgData.usuarios[challengerId].battleRequest.time;
    if (Date.now() - requestTime > 120000) {
      delete rpgData.usuarios[challengerId].battleRequest;
      fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: "‚è≥ *La solicitud de batalla anime ha expirado.*" },
        { quoted: msg }
      );
    }
    
    // Eliminar la solicitud de batalla al aceptar
    delete rpgData.usuarios[challengerId].battleRequest;
    
    let userCharacter = rpgData.usuarios[userId].personajes[0];
    let challengerCharacter = rpgData.usuarios[challengerId].personajes[0];
    
    // üî• Animaci√≥n de batalla
    const animaciones = [
      "üéå *¬°La batalla anime comienza!* Los guerreros se preparan para el combate...",
      `üî• *${challengerCharacter.nombre}* lanza un ataque devastador.`,
      `üõ°Ô∏è *${userCharacter.nombre}* bloquea el ataque con gran habilidad.`,
      `üí• *Impacto cr√≠tico de ${userCharacter.nombre}!*`,
      `‚ö° *${challengerCharacter.nombre}* utiliza su t√©cnica especial.`,
      `üå™Ô∏è *La batalla se intensifica a cada segundo...*`,
      `‚ú® *El enfrentamiento alcanza su punto √°lgido...*`,
      "üí• *¬°El destino de la batalla est√° por decidirse!*"
    ];
    let mensajeAnimado = await sock.sendMessage(
      msg.key.remoteJid,
      { text: animaciones[0] },
      { quoted: msg }
    );
    for (let i = 1; i < animaciones.length; i++) {
      await new Promise(resolve => setTimeout(resolve, 1500));
      await sock.sendMessage(
        msg.key.remoteJid,
        { text: animaciones[i], edit: mensajeAnimado.key },
        { quoted: msg }
      );
    }
    
    // **üí• C√°lculo de batalla**
    const statsChallenger = challengerCharacter.nivel * 5 +
      Object.values(challengerCharacter.habilidades).reduce((total, h) => total + (h * 2), 0);
    const statsUser = userCharacter.nivel * 5 +
      Object.values(userCharacter.habilidades).reduce((total, h) => total + (h * 2), 0);
    
    let empate = false;
    let ganadorId, perdedorId;
    if (statsChallenger > statsUser) {
      ganadorId = challengerId;
      perdedorId = userId;
    } else if (statsChallenger < statsUser) {
      ganadorId = userId;
      perdedorId = challengerId;
    } else {
      empate = true;
    }
    
    let mensajeFinal = "";
    
    if (empate) {
      const xpTie = Math.floor(Math.random() * 301) + 200;      // 200 - 500 XP
      const diamondTie = Math.floor(Math.random() * 201) + 100;   // 100 - 300 diamantes
      
      rpgData.usuarios[userId].diamantes = (rpgData.usuarios[userId].diamantes || 0) + diamondTie;
      rpgData.usuarios[challengerId].diamantes = (rpgData.usuarios[challengerId].diamantes || 0) + diamondTie;
      
      userCharacter.experiencia = (userCharacter.experiencia || 0) + xpTie;
      challengerCharacter.experiencia = (challengerCharacter.experiencia || 0) + xpTie;
      
      mensajeFinal = 
        `ü§ù *¬°La batalla anime termin√≥ en empate!* ü§ù\n\n` +
        `Ambos reciben:\n` +
        `‚Ä¢ +${xpTie} XP ‚ú®\n` +
        `‚Ä¢ +${diamondTie} diamantes üíé\n\n` +
        `‚ù§Ô∏è *Estado actual de los guerreros:*\n` +
        `- ${userCharacter.nombre}: ${userCharacter.vida} HP\n` +
        `- ${challengerCharacter.nombre}: ${challengerCharacter.vida} HP`;
    } else {
      let ganadorCharacter = rpgData.usuarios[ganadorId].personajes[0];
      let perdedorCharacter = rpgData.usuarios[perdedorId].personajes[0];
      
      // üîª Reducir vida de los personajes
      ganadorCharacter.vida -= Math.floor(Math.random() * 10) + 5;
      perdedorCharacter.vida -= Math.floor(Math.random() * 20) + 10;
      if (ganadorCharacter.vida < 0) ganadorCharacter.vida = 0;
      if (perdedorCharacter.vida < 0) perdedorCharacter.vida = 0;
      
      const xpGanador = Math.floor(Math.random() * 701) + 300; // 300 - 1000 XP
      const diamondGanador = Math.floor(Math.random() * 301) + 200; // 200 - 500 diamantes
      const xpPerdedor = Math.floor(Math.random() * 201) + 100; // 100 - 300 XP
      const diamondPerdedor = Math.floor(Math.random() * 151) + 50; // 50 - 200 diamantes
      
      ganadorCharacter.experiencia = (ganadorCharacter.experiencia || 0) + xpGanador;
      rpgData.usuarios[ganadorId].diamantes = (rpgData.usuarios[ganadorId].diamantes || 0) + diamondGanador;
      perdedorCharacter.experiencia = (perdedorCharacter.experiencia || 0) + xpPerdedor;
      rpgData.usuarios[perdedorId].diamantes = (rpgData.usuarios[perdedorId].diamantes || 0) + diamondPerdedor;
      
      mensajeFinal =
        `üéâ *¬°La batalla anime ha terminado!* üéâ\n\n` +
        `üèÜ *Ganador:* @${ganadorId.split('@')[0]}\n` +
        `üíî *Perdedor:* @${perdedorId.split('@')[0]}\n\n` +
        `*Recompensas:*\n` +
        `‚Ä¢ *Ganador:* +${xpGanador} XP ‚ú®, +${diamondGanador} diamantes üíé\n` +
        `‚Ä¢ *Perdedor:* +${xpPerdedor} XP ‚ú®, +${diamondPerdedor} diamantes üíé\n\n` +
        `‚ù§Ô∏è *Estado actual de los guerreros:*\n` +
        `- ${ganadorCharacter.nombre}: ${ganadorCharacter.vida} HP\n` +
        `- ${perdedorCharacter.nombre}: ${perdedorCharacter.vida} HP`;
    }
    
    // Subida de nivel autom√°tica para ambos personajes
    const personajes = [userCharacter, challengerCharacter];
    for (const personaje of personajes) {
      personaje.xpMax = personaje.xpMax || 1000;
      while (personaje.experiencia >= personaje.xpMax && personaje.nivel < 70) {
        personaje.experiencia -= personaje.xpMax;
        personaje.nivel++;
        personaje.xpMax = personaje.nivel * 1500; // Ajusta seg√∫n tu sistema
        const rangos = ['üåü Principiante', '‚öîÔ∏è Guerrero', 'üî• Maestro', 'üëë √âlite', 'üåÄ Legendario', 'üíÄ Dios de la Batalla'];
        personaje.rango = rangos[Math.min(Math.floor(personaje.nivel / 10), rangos.length - 1)];
      }
    }
    
    await sock.sendMessage(
      msg.key.remoteJid,
      { text: mensajeFinal, mentions: empate ? [userId, challengerId] : [ganadorId, perdedorId] },
      { quoted: msg }
    );
    
    // ‚è≥ Guardar cooldown de batalla para ambos (5 minutos)
    rpgData.usuarios[userId].cooldowns = rpgData.usuarios[userId].cooldowns || {};
    rpgData.usuarios[challengerId].cooldowns = rpgData.usuarios[challengerId].cooldowns || {};
    rpgData.usuarios[userId].cooldowns.batallaAnime = Date.now();
    rpgData.usuarios[challengerId].cooldowns.batallaAnime = Date.now();
    
    fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));
    
  } catch (error) {
    console.error('‚ùå Error en .goper:', error);
    return sock.sendMessage(
      msg.key.remoteJid,
      { text: '‚ùå *Error inesperado al procesar la batalla anime.*' },
      { quoted: msg }
    );
  }
  break;
}
            
        
case 'batallamascota': {
  try {
    const rpgFile = "./rpg.json";
    if (!fs.existsSync(rpgFile)) {
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: `‚ùå *No hay datos de RPG. Usa \`${global.prefix}crearcartera\` para empezar.*` },
        { quoted: msg }
      );
    }
    let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
    let userId = msg.key.participant || msg.key.remoteJid;

    // ‚è≥ Verificar cooldown (5 minutos)
    if (rpgData.usuarios[userId]?.cooldowns?.batallaMascota) {
      let cooldownTime = rpgData.usuarios[userId].cooldowns.batallaMascota;
      if ((Date.now() - cooldownTime) < 5 * 60 * 1000) {
        let remainingTime = Math.ceil((5 * 60 * 1000 - (Date.now() - cooldownTime)) / 1000);
        return sock.sendMessage(
          msg.key.remoteJid,
          { text: `‚è≥ *Debes esperar ${remainingTime} segundos antes de usar \`${global.prefix}batallamascota\` nuevamente.*` },
          { quoted: msg }
        );
      }
    }

    // üìå Verificar si el usuario tiene mascota
    if (!rpgData.usuarios[userId] || !rpgData.usuarios[userId].mascotas || rpgData.usuarios[userId].mascotas.length === 0) {
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: `‚ùå *No tienes una mascota. Usa \`${global.prefix}tiendamascotas\` para comprar una.*` },
        { quoted: msg }
      );
    }

    // üìå Extraer ID del oponente: se intenta primero por mensaje citado y, de no haberlo, por menciones
    let opponentId;
    if (msg.message?.extendedTextMessage?.contextInfo?.quotedMessage) {
      opponentId = msg.message.extendedTextMessage.contextInfo.participant;
    }
    if (!opponentId && msg.message?.extendedTextMessage?.contextInfo?.mentionedJid) {
      opponentId = msg.message.extendedTextMessage.contextInfo.mentionedJid[0];
    }
    if (!opponentId) {
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: "‚öîÔ∏è *Menciona o responde (cita) a un usuario para retarlo a una batalla de mascotas.*" },
        { quoted: msg }
      );
    }

    // üìå Verificar que el oponente tenga mascota
    if (!rpgData.usuarios[opponentId] || !rpgData.usuarios[opponentId].mascotas || rpgData.usuarios[opponentId].mascotas.length === 0) {
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: "‚ùå *El oponente no tiene una mascota.*" },
        { quoted: msg }
      );
    }

    let userMascot = rpgData.usuarios[userId].mascotas[0];
    let opponentMascot = rpgData.usuarios[opponentId].mascotas[0];

    // Formatear habilidades (recorriendo el objeto)
    let habilidadesUser = Object.entries(userMascot.habilidades)
      .map(([nombre, datos]) => `‚ö° *${nombre}:* Nivel ${datos.nivel || datos}`)
      .join("\n");
    let habilidadesOpponent = Object.entries(opponentMascot.habilidades)
      .map(([nombre, datos]) => `‚ö° *${nombre}:* Nivel ${datos.nivel || datos}`)
      .join("\n");

    // Mensaje de desaf√≠o usando el prefijo global para el comando de respuesta
    let mensajeDesafio = 
      `‚öîÔ∏è *¬°Desaf√≠o de Batalla de Mascotas!* \n\n` +
      `üë§ *Retador:* @${userId.split('@')[0]}\n` +
      `üéØ *Retado:* @${opponentId.split('@')[0]}\n\n` +
      `üêæ *Mascota de @${userId.split('@')[0]}:*\n` +
      `   ‚Ä¢ *Nombre:* ${userMascot.nombre}\n` +
      `   ‚Ä¢ *Vida:* ${userMascot.vida}\n` +
      `   ‚Ä¢ *Nivel:* ${userMascot.nivel}\n` +
      `   ‚Ä¢ *Rango:* ${userMascot.rango}\n` +
      `   ‚Ä¢ *Habilidades:*\n${habilidadesUser}\n\n` +
      `üêæ *Mascota de @${opponentId.split('@')[0]}:*\n` +
      `   ‚Ä¢ *Nombre:* ${opponentMascot.nombre}\n` +
      `   ‚Ä¢ *Vida:* ${opponentMascot.vida}\n` +
      `   ‚Ä¢ *Nivel:* ${opponentMascot.nivel}\n` +
      `   ‚Ä¢ *Rango:* ${opponentMascot.rango}\n` +
      `   ‚Ä¢ *Habilidades:*\n${habilidadesOpponent}\n\n` +
      `üõ°Ô∏è *@${opponentId.split('@')[0]}*, responde con \`${global.prefix}gomascota\` para aceptar el desaf√≠o.\n` +
      `‚è≥ *Tienes 2 minutos para aceptar.*`;

    await sock.sendMessage(
      msg.key.remoteJid,
      { text: mensajeDesafio, mentions: [userId, opponentId] }
    );

    // Guardar la solicitud de batalla en el usuario retador
    rpgData.usuarios[userId].battleRequest = {
      target: opponentId,
      time: Date.now()
    };
    fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

    // Configurar expiraci√≥n de la solicitud (2 minutos)
    setTimeout(() => {
      let data = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
      if (data.usuarios[userId]?.battleRequest && data.usuarios[userId].battleRequest.target === opponentId) {
        delete data.usuarios[userId].battleRequest;
        fs.writeFileSync(rpgFile, JSON.stringify(data, null, 2));
        sock.sendMessage(
          msg.key.remoteJid,
          { text: "‚è≥ *La solicitud de batalla ha expirado porque no fue aceptada a tiempo.*" },
          { quoted: msg }
        );
      }
    }, 120000);

  } catch (error) {
    console.error('‚ùå Error en .batallamascota:', error);
  }
  break;
}

            
case 'gomascota': {
  try {
    const rpgFile = "./rpg.json";
    if (!fs.existsSync(rpgFile)) {
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: `‚ùå *No hay datos de RPG. Usa \`${global.prefix}crearcartera\` para empezar.*` },
        { quoted: msg }
      );
    }
    let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
    let userId = msg.key.participant || msg.key.remoteJid;
    
    // Buscar qui√©n desafi√≥ al usuario
    const challengerId = Object.keys(rpgData.usuarios).find(
      (id) => rpgData.usuarios[id].battleRequest && rpgData.usuarios[id].battleRequest.target === userId
    );
    if (!challengerId) {
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: "‚ö†Ô∏è *No tienes ninguna solicitud de batalla pendiente.*" },
        { quoted: msg }
      );
    }
    
    // Verificar si la solicitud sigue activa (2 minutos)
    const requestTime = rpgData.usuarios[challengerId].battleRequest.time;
    if (Date.now() - requestTime > 120000) {
      delete rpgData.usuarios[challengerId].battleRequest;
      fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));
      return sock.sendMessage(
        msg.key.remoteJid,
        { text: "‚è≥ *La solicitud de batalla ha expirado.*" },
        { quoted: msg }
      );
    }
    
    // Eliminar la solicitud de batalla al aceptar el desaf√≠o
    delete rpgData.usuarios[challengerId].battleRequest;
    
    let userMascot = rpgData.usuarios[userId].mascotas[0];
    let challengerMascot = rpgData.usuarios[challengerId].mascotas[0];
    
    // üî• Animaci√≥n de batalla
    const animaciones = [
      "‚öîÔ∏è *¬°La batalla comienza!* Las mascotas se preparan para el combate...",
      `üî• *${challengerMascot.nombre}* ataca con un feroz embate.`,
      `üõ°Ô∏è *${userMascot.nombre}* esquiva y responde con una contraofensiva.`,
      `üí• *${userMascot.nombre}* lanza un golpe cr√≠tico.`,
      `‚ö° *${challengerMascot.nombre}* usa su habilidad especial y ataca.`,
      `üå™Ô∏è *La batalla se intensifica...*`,
      `‚ú® *El combate alcanza su cl√≠max...*`,
      "üí• *¬°Impacto final! La batalla est√° por decidirse...*"
    ];
    let mensajeAnimado = await sock.sendMessage(
      msg.key.remoteJid,
      { text: animaciones[0] },
      { quoted: msg }
    );
    for (let i = 1; i < animaciones.length; i++) {
      await new Promise(resolve => setTimeout(resolve, 1500));
      await sock.sendMessage(
        msg.key.remoteJid,
        { text: animaciones[i], edit: mensajeAnimado.key },
        { quoted: msg }
      );
    }
    
    // **üí• C√°lculo de batalla**
    const statsChallenger = challengerMascot.nivel * 5 +
      Object.values(challengerMascot.habilidades).reduce((total, h) => total + ((typeof h === 'object' ? h.nivel : h) * 2), 0);
    const statsUser = userMascot.nivel * 5 +
      Object.values(userMascot.habilidades).reduce((total, h) => total + ((typeof h === 'object' ? h.nivel : h) * 2), 0);
    
    let empate = false;
    let ganadorId, perdedorId;
    if (statsChallenger > statsUser) {
      ganadorId = challengerId;
      perdedorId = userId;
    } else if (statsChallenger < statsUser) {
      ganadorId = userId;
      perdedorId = challengerId;
    } else {
      empate = true;
    }
    
    let mensajeFinal = "";
    
    if (empate) {
      // Recompensas de empate: ambos reciben XP y diamantes
      const xpTie = Math.floor(Math.random() * 301) + 200;      // 200 - 500 XP
      const diamondTie = Math.floor(Math.random() * 201) + 100;   // 100 - 300 diamantes
      
      rpgData.usuarios[userId].diamantes = (rpgData.usuarios[userId].diamantes || 0) + diamondTie;
      rpgData.usuarios[challengerId].diamantes = (rpgData.usuarios[challengerId].diamantes || 0) + diamondTie;
      
      userMascot.experiencia = (userMascot.experiencia || 0) + xpTie;
      challengerMascot.experiencia = (challengerMascot.experiencia || 0) + xpTie;
      
      mensajeFinal = 
        `ü§ù *¬°La batalla termin√≥ en empate!* ü§ù\n\n` +
        `Ambos reciben:\n` +
        `‚Ä¢ +${xpTie} XP ‚ú®\n` +
        `‚Ä¢ +${diamondTie} diamantes üíé\n\n` +
        `‚ù§Ô∏è *Estado de las mascotas:*\n` +
        `- ${userMascot.nombre}: ${userMascot.vida} HP\n` +
        `- ${challengerMascot.nombre}: ${challengerMascot.vida} HP`;
    } else {
      let ganadorMascota = rpgData.usuarios[ganadorId].mascotas[0];
      let perdedorMascota = rpgData.usuarios[perdedorId].mascotas[0];
      
      // üîª Reducir vida de las mascotas
      ganadorMascota.vida -= Math.floor(Math.random() * 10) + 5;
      perdedorMascota.vida -= Math.floor(Math.random() * 20) + 10;
      if (ganadorMascota.vida < 0) ganadorMascota.vida = 0;
      if (perdedorMascota.vida < 0) perdedorMascota.vida = 0;
      
      // Recompensas para ganador y perdedor
      const xpGanador = Math.floor(Math.random() * 701) + 300; // 300 - 1000 XP
      const diamondGanador = Math.floor(Math.random() * 301) + 200; // 200 - 500 diamantes
      const xpPerdedor = Math.floor(Math.random() * 201) + 100; // 100 - 300 XP
      const diamondPerdedor = Math.floor(Math.random() * 151) + 50; // 50 - 200 diamantes
      
      ganadorMascota.experiencia = (ganadorMascota.experiencia || 0) + xpGanador;
      rpgData.usuarios[ganadorId].diamantes = (rpgData.usuarios[ganadorId].diamantes || 0) + diamondGanador;
      perdedorMascota.experiencia = (perdedorMascota.experiencia || 0) + xpPerdedor;
      rpgData.usuarios[perdedorId].diamantes = (rpgData.usuarios[perdedorId].diamantes || 0) + diamondPerdedor;
      
      mensajeFinal =
        `üéâ *¬°La batalla ha terminado!* üéâ\n\n` +
        `üèÜ *Ganador:* @${ganadorId.split('@')[0]}\n` +
        `üíî *Perdedor:* @${perdedorId.split('@')[0]}\n\n` +
        `*Recompensas:*\n` +
        `‚Ä¢ *Ganador:* +${xpGanador} XP ‚ú®, +${diamondGanador} diamantes üíé\n` +
        `‚Ä¢ *Perdedor:* +${xpPerdedor} XP ‚ú®, +${diamondPerdedor} diamantes üíé\n\n` +
        `‚ù§Ô∏è *Estado de las mascotas:*\n` +
        `- ${ganadorMascota.nombre}: ${ganadorMascota.vida} HP\n` +
        `- ${perdedorMascota.nombre}: ${perdedorMascota.vida} HP`;
    }
    
    // Subida de nivel autom√°tica para ambas mascotas
    const mascotas = [userMascot, challengerMascot];
    for (const mascota of mascotas) {
      mascota.xpMax = mascota.xpMax || 500;
      while (mascota.experiencia >= mascota.xpMax && mascota.nivel < 80) {
        mascota.experiencia -= mascota.xpMax;
        mascota.nivel++;
        mascota.xpMax = mascota.nivel * 500; // Ajusta seg√∫n tu sistema
        const rangos = ['üêæ Principiante', 'üêæ Intermedio', 'üêæ Avanzado', 'üêæ Experto', 'üêæ Leyenda'];
        mascota.rango = rangos[Math.min(Math.floor(mascota.nivel / 10), rangos.length - 1)];
      }
    }
    
    // Enviar mensaje final con menciones y dise√±o bonito
    await sock.sendMessage(
      msg.key.remoteJid,
      { text: mensajeFinal, mentions: empate ? [userId, challengerId] : [ganadorId, perdedorId] },
      { quoted: msg }
    );
    
    // ‚è≥ Guardar cooldown de batalla para ambos (5 minutos)
    rpgData.usuarios[userId].cooldowns = rpgData.usuarios[userId].cooldowns || {};
    rpgData.usuarios[challengerId].cooldowns = rpgData.usuarios[challengerId].cooldowns || {};
    rpgData.usuarios[userId].cooldowns.batallaMascota = Date.now();
    rpgData.usuarios[challengerId].cooldowns.batallaMascota = Date.now();
    
    fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));
    
  } catch (error) {
    console.error('‚ùå Error en .gomascota:', error);
    return sock.sendMessage(
      msg.key.remoteJid,
      { text: '‚ùå *Error inesperado al procesar la batalla.*' },
      { quoted: msg }
    );
  }
  break;
}          
        
case 'addlista': {
  try {
    const fromMe = msg.key.fromMe; // Definir desde el mensaje
    const text = args.join(" ");
    // Permitir el comando si el remitente es owner o si el mensaje es enviado por el bot (fromMe)
    if (!isOwner(sender) && !fromMe) {
      await sock.sendMessage(
        msg.key.remoteJid,
        { text: "‚õî Solo el propietario del bot o el bot mismo pueden usar este comando." },
        { quoted: msg }
      );
      return;
    }

    // Intentamos extraer el n√∫mero del usuario objetivo:
    // Si se cita el mensaje, se toma el n√∫mero del participante citado.
    let target;
    if (msg.message?.extendedTextMessage?.contextInfo?.quotedMessage) {
      target =
        msg.message.extendedTextMessage.contextInfo.participant ||
        msg.key.participant ||
        msg.key.remoteJid;
    } else if (text && text.trim() !== "") {
      target = text;
    }

    if (!target) {
      await sock.sendMessage(
        msg.key.remoteJid,
        { text: "‚ö†Ô∏è Uso incorrecto. Cita el mensaje del usuario o proporciona el n√∫mero." },
        { quoted: msg }
      );
      return;
    }

    // Normalizamos para guardar solo d√≠gitos
    target = target.replace(/\D/g, "");

    // Ruta del archivo lista.json
    const listaFile = "./lista.json";
    let lista = [];
    if (fs.existsSync(listaFile)) {
      lista = JSON.parse(fs.readFileSync(listaFile, "utf-8"));
      if (!Array.isArray(lista)) {
        lista = [];
      }
    }

    // Verificar si el usuario ya est√° en la lista
    if (lista.includes(target)) {
      await sock.sendMessage(
        msg.key.remoteJid,
        { text: "‚ÑπÔ∏è El usuario ya est√° en la lista." },
        { quoted: msg }
      );
      return;
    }

    // Agregar el usuario a la lista y guardar el archivo
    lista.push(target);
    fs.writeFileSync(listaFile, JSON.stringify(lista, null, 2));

    await sock.sendMessage(
      msg.key.remoteJid,
      { text: `‚úÖ Usuario ${target} agregado a la lista.` },
      { quoted: msg }
    );
  } catch (error) {
    console.error("‚ùå Error en el comando .addlista:", error);
    await sock.sendMessage(
      msg.key.remoteJid,
      { text: "‚ùå Ocurri√≥ un error al agregar el usuario a la lista." },
      { quoted: msg }
    );
  }
  break;
}

// Comando para eliminar un usuario de la lista (deletelista)
case 'deletelista': {
  try {
    const fromMe = msg.key.fromMe; // Definir desde el mensaje
    const text = args.join(" ");
    // Permitir el comando si el remitente es owner o si el mensaje es enviado por el bot (fromMe)
    if (!isOwner(sender) && !fromMe) {
      await sock.sendMessage(
        msg.key.remoteJid,
        { text: "‚õî Solo el propietario del bot o el bot mismo pueden usar este comando." },
        { quoted: msg }
      );
      return;
    }

    // Intentamos extraer el n√∫mero del usuario objetivo
    let target;
    if (msg.message?.extendedTextMessage?.contextInfo?.quotedMessage) {
      target =
        msg.message.extendedTextMessage.contextInfo.participant ||
        msg.key.participant ||
        msg.key.remoteJid;
    } else if (text && text.trim() !== "") {
      target = text;
    }

    if (!target) {
      await sock.sendMessage(
        msg.key.remoteJid,
        { text: "‚ö†Ô∏è Uso incorrecto. Cita el mensaje del usuario o proporciona el n√∫mero." },
        { quoted: msg }
      );
      return;
    }

    // Normalizamos para guardar solo d√≠gitos
    target = target.replace(/\D/g, "");

    const listaFile = "./lista.json";
    let lista = [];
    if (fs.existsSync(listaFile)) {
      lista = JSON.parse(fs.readFileSync(listaFile, "utf-8"));
      if (!Array.isArray(lista)) {
        lista = [];
      }
    }

    // Verificar si el usuario se encuentra en la lista
    if (!lista.includes(target)) {
      await sock.sendMessage(
        msg.key.remoteJid,
        { text: "‚ÑπÔ∏è El usuario no se encuentra en la lista." },
        { quoted: msg }
      );
      return;
    }

    // Eliminar el usuario de la lista y guardar el archivo
    lista = lista.filter((u) => u !== target);
    fs.writeFileSync(listaFile, JSON.stringify(lista, null, 2));

    await sock.sendMessage(
      msg.key.remoteJid,
      { text: `‚úÖ Usuario ${target} eliminado de la lista.` },
      { quoted: msg }
    );
  } catch (error) {
    console.error("‚ùå Error en el comando .deletelista:", error);
    await sock.sendMessage(
      msg.key.remoteJid,
      { text: "‚ùå Ocurri√≥ un error al eliminar el usuario de la lista." },
      { quoted: msg }
    );
  }
  break;
}
        
case 'deletemascota': {
    try {
        // üîÑ Reacci√≥n de procesamiento
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "üóëÔ∏è", key: msg.key } });

        // Verificar si el usuario es el Owner
        if (!isOwner(sender)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚õî *Solo el propietario del bot puede eliminar mascotas de la tienda.*" 
            }, { quoted: msg });
            return;
        }

        const rpgFile = "./rpg.json";

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *No hay mascotas en la tienda o el archivo no existe.*" 
            }, { quoted: msg });
            return;
        }

        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si hay mascotas en la tienda
        if (!rpgData.tiendaMascotas || rpgData.tiendaMascotas.length === 0) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *La tienda de mascotas est√° vac√≠a.*" 
            }, { quoted: msg });
            return;
        }

        // üìå Verificar si se ingres√≥ un n√∫mero
        if (!text || isNaN(text)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ö†Ô∏è *Uso incorrecto.*\nüìå Ejemplo: \`${global.prefix}deletemascota <n√∫mero>\`\nüîπ Usa \`${global.prefix}tiendamascotas\` para ver la lista.` 
            }, { quoted: msg });
            return;
        }

        const numeroMascota = parseInt(text);

        // ‚ùå Validar el n√∫mero
        if (numeroMascota <= 0 || numeroMascota > rpgData.tiendaMascotas.length) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ö†Ô∏è *N√∫mero inv√°lido.*\nüìå Usa \`${global.prefix}tiendamascotas\` para ver la lista de mascotas.` 
            }, { quoted: msg });
            return;
        }

        // üóëÔ∏è Eliminar la mascota de la tienda
        let mascotaEliminada = rpgData.tiendaMascotas.splice(numeroMascota - 1, 1)[0];

        // üìÇ Guardar cambios
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // üìú Mensaje de confirmaci√≥n
        let mensaje = `üóëÔ∏è *Mascota eliminada de la tienda*\n\n`;
        mensaje += `üêæ *Nombre:* ${mascotaEliminada.nombre}\n`;
        mensaje += `üèÖ *Rango:* ${mascotaEliminada.rango}\n`;
        mensaje += `üíé *Precio:* ${mascotaEliminada.precio} diamantes\n`;
        mensaje += `üåü *Habilidades:* ${Object.keys(mascotaEliminada.habilidades).join(", ")}\n\n`;
        mensaje += `üìå *Esta mascota ya no est√° disponible en la tienda.*`;

        // üì© Enviar mensaje con imagen de la mascota eliminada
        await sock.sendMessage(msg.key.remoteJid, { 
            image: { url: mascotaEliminada.imagen },
            caption: mensaje
        }, { quoted: msg });

        // ‚úÖ Reacci√≥n de √©xito
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .deletemascota:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al eliminar la mascota. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });

        // ‚ùå Reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } 
        });
    }
    break;
}
        
case 'deleteper': {
    try {
        // üîÑ Reacci√≥n de procesamiento
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "üóëÔ∏è", key: msg.key } });

        // Verificar si el usuario es el Owner
        if (!isOwner(sender)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚õî *Solo el propietario del bot puede eliminar personajes de la tienda.*" 
            }, { quoted: msg });
            return;
        }

        const rpgFile = "./rpg.json";

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *No hay personajes en la tienda o el archivo no existe.*" 
            }, { quoted: msg });
            return;
        }

        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si hay personajes en la tienda
        if (!rpgData.tiendaPersonajes || rpgData.tiendaPersonajes.length === 0) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *La tienda de personajes est√° vac√≠a.*" 
            }, { quoted: msg });
            return;
        }

        // üìå Verificar si se ingres√≥ un n√∫mero
        if (!text || isNaN(text)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ö†Ô∏è *Uso incorrecto.*\nüìå Ejemplo: \`${global.prefix}deleteper <n√∫mero>\`\nüîπ Usa \`${global.prefix}tiendaper\` para ver la lista.` 
            }, { quoted: msg });
            return;
        }

        const numeroPersonaje = parseInt(text);

        // ‚ùå Validar el n√∫mero
        if (numeroPersonaje <= 0 || numeroPersonaje > rpgData.tiendaPersonajes.length) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ö†Ô∏è *N√∫mero inv√°lido.*\nüìå Usa \`${global.prefix}tiendaper\` para ver la lista de personajes.` 
            }, { quoted: msg });
            return;
        }

        // üóëÔ∏è Eliminar el personaje de la tienda
        let personajeEliminado = rpgData.tiendaPersonajes.splice(numeroPersonaje - 1, 1)[0];

        // üìÇ Guardar cambios
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // üìú Mensaje de confirmaci√≥n
        let mensaje = `üóëÔ∏è *Personaje eliminado de la tienda*\n\n`;
        mensaje += `üé≠ *Nombre:* ${personajeEliminado.nombre}\n`;
        mensaje += `üèÖ *Rango:* ${personajeEliminado.rango}\n`;
        mensaje += `üíé *Precio:* ${personajeEliminado.precio} diamantes\n`;
        mensaje += `üåü *Habilidades:* ${Object.keys(personajeEliminado.habilidades).join(", ")}\n\n`;
        mensaje += `üìå *Este personaje ya no est√° disponible en la tienda.*`;

        // üì© Enviar mensaje con imagen del personaje eliminado
        await sock.sendMessage(msg.key.remoteJid, { 
            image: { url: personajeEliminado.imagen },
            caption: mensaje
        }, { quoted: msg });

        // ‚úÖ Reacci√≥n de √©xito
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .deleteper:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al eliminar el personaje. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });

        // ‚ùå Reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } 
        });
    }
    break;
}
        
case 'verper': { 
    try { 
        // üîÑ Enviar reacci√≥n mientras se procesa el comando 
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üé≠", key: msg.key } // Emoji de personaje üé≠ 
        });

        const rpgFile = "./rpg.json";
        let rpgData = fs.existsSync(rpgFile) ? JSON.parse(fs.readFileSync(rpgFile, "utf-8")) : { usuarios: {} };
        let userId = msg.key.participant || msg.key.remoteJid;

        // ‚ùå Verificar si el usuario est√° registrado 
        if (!rpgData.usuarios[userId]) { 
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No est√°s registrado en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
            return; 
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene personajes 
        if (!usuario.personajes || usuario.personajes.length === 0) { 
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes personajes en tu colecci√≥n.*\nüìú Usa \`${global.prefix}tiendaper\` para comprar alguno.` 
            }, { quoted: msg });
            return; 
        }

        // üìú **Lista de personajes del usuario**  
        let mensaje = `üé≠ *Tus Personajes Comprados - Azura Ultra* üé≠\n\n`;

        usuario.personajes.forEach((personaje, index) => { 
            mensaje += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;  
            mensaje += `üîπ *${index + 1}. ${personaje.nombre}*\n`;  
            mensaje += `   üèÖ *Rango:* ${personaje.rango}\n`;  
            mensaje += `   üéöÔ∏è *Nivel:* ${personaje.nivel}\n`;  
            mensaje += `   ‚ù§Ô∏è *Vida:* ${personaje.vida} HP\n`;  
            mensaje += `   ‚ú® *Experiencia:* ${personaje.experiencia} / ${personaje.xpMax} XP\n`;  
            mensaje += `   üåü *Habilidades:*\n`;  
            Object.entries(personaje.habilidades).forEach(([habilidad, nivel]) => {  
                mensaje += `      üîπ ${habilidad} (Nivel ${nivel})\n`;  
            });  
            mensaje += `   üíé *Valor:* ${personaje.precio} diamantes\n\n`;  
        });

        // üî• **Opciones de gesti√≥n de personajes**  
        mensaje += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
        mensaje += `üõ†Ô∏è *Gesti√≥n de personajes:*\n`;
        mensaje += `üîπ \`${global.prefix}per <n√∫mero>\` - Cambiar personaje principal\n`;
        mensaje += `üîπ \`${global.prefix}nivelper\` - Ver estad√≠sticas detalladas\n`;
        mensaje += `üîπ \`${global.prefix}bolasdeldragon\` - Revivir personaje\n`;
        mensaje += `üîπ \`${global.prefix}vender <nombre> <precio>\` - Vender personaje\n`;
        mensaje += `üîπ \`${global.prefix}quitarventa <nombre>\` - Retirar de la venta\n\n`;

        // ‚öîÔ∏è **Modo Batalla y Rankings**  
        mensaje += `‚öîÔ∏è *Batalla y Ranking:*\n`;
        mensaje += `üîπ \`${global.prefix}batallaanime\` - Luchar contra otro personaje\n`;
        mensaje += `üîπ \`${global.prefix}topper\` - Ver ranking de personajes\n\n`;

        // üèÜ **Comandos para subir de nivel**  
        mensaje += `üèÜ *Subir de nivel:*\n`;
        mensaje += `üîπ \`${global.prefix}luchar\`, \`${global.prefix}poder\`, \`${global.prefix}volar\`\n`;
        mensaje += `üîπ \`${global.prefix}otromundo\`, \`${global.prefix}otrouniverso\`, \`${global.prefix}mododios\`\n`;
        mensaje += `üîπ \`${global.prefix}mododiablo\`, \`${global.prefix}enemigos\`, \`${global.prefix}podermaximo\`\n`;

        // üé• **Enviar mensaje con video como GIF**  
        await sock.sendMessage(msg.key.remoteJid, {  
            video: { url: "https://cdn.dorratz.com/files/1740651987117.mp4" },  
            gifPlayback: true, // Se reproduce como GIF  
            caption: mensaje  
        }, { quoted: msg });

        // ‚úÖ Enviar reacci√≥n de √©xito  
        await sock.sendMessage(msg.key.remoteJid, {  
            react: { text: "‚úÖ", key: msg.key }  
        });

    } catch (error) {  
        console.error("‚ùå Error en el comando .verper:", error);  
        await sock.sendMessage(msg.key.remoteJid, {  
            text: "‚ùå *Ocurri√≥ un error al obtener la lista de personajes. Int√©ntalo de nuevo.*"  
        }, { quoted: msg });

        // ‚ùå Enviar reacci√≥n de error  
        await sock.sendMessage(msg.key.remoteJid, {  
            react: { text: "‚ùå", key: msg.key }  
        });  
    }  
    break;  
}
        
case 'per': {
    try {
        // üîÑ Enviar reacci√≥n mientras se procesa el comando
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üé≠", key: msg.key } // Emoji de personaje üé≠
        });

        const fs = require("fs");
        const rpgFile = "./rpg.json";

        // Verificar si el archivo RPG existe
        if (!fs.existsSync(rpgFile)) {
            await sock.sendMessage(
                msg.key.remoteJid,
                {
                    text: `‚ùå *No tienes una cuenta en el gremio Azura Ultra.*\n\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.`
                },
                { quoted: msg }
            );
            return;
        }

        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
        let userId = msg.key.participant || msg.key.remoteJid;

        if (!rpgData.usuarios[userId]) {
            await sock.sendMessage(
                msg.key.remoteJid,
                {
                    text: `‚ùå *No tienes una cuenta registrada.*\n\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.`
                },
                { quoted: msg }
            );
            return;
        }

        let usuario = rpgData.usuarios[userId];

        if (!usuario.personajes || usuario.personajes.length === 0) {
            await sock.sendMessage(
                msg.key.remoteJid,
                {
                    text: `‚ùå *No tienes personajes comprados.*\nüîπ Usa \`${global.prefix}tiendaper\` para comprar uno.`
                },
                { quoted: msg }
            );
            return;
        }

        // Tomamos el input desde 'text'
        const input = (text || "").trim();

        // Si el usuario no ingres√≥ nada o es inv√°lido
        if (!input || isNaN(input)) {
            await sock.sendMessage(
                msg.key.remoteJid,
                {
                    text: `‚ö†Ô∏è *Uso incorrecto.*\nEjemplo: \`${global.prefix}per <n√∫mero>\`\nüîπ Usa \`${global.prefix}verper\` para ver la lista de personajes.`
                },
                { quoted: msg }
            );
            return;
        }

        const numeroPersonaje = parseInt(input);

        // Validamos que el n√∫mero sea un √≠ndice v√°lido
        if (numeroPersonaje <= 0 || numeroPersonaje > usuario.personajes.length) {
            await sock.sendMessage(
                msg.key.remoteJid,
                {
                    text: `‚ö†Ô∏è *Uso incorrecto.*\nEjemplo: \`${global.prefix}per <n√∫mero>\`\nüîπ Usa \`${global.prefix}verper\` para ver la lista de personajes.`
                },
                { quoted: msg }
            );
            return;
        }

        // Obtener el personaje seleccionado
        let nuevoPersonajePrincipal = usuario.personajes.splice(numeroPersonaje - 1, 1)[0];

        // Mover el personaje seleccionado al primer lugar
        usuario.personajes.unshift(nuevoPersonajePrincipal);

        // Guardar cambios
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // üìú Construcci√≥n del mensaje de confirmaci√≥n con habilidades correctamente definidas
        let mensaje = `üé≠ *¬°Has cambiado tu personaje principal!* üé≠\n\n`;
        mensaje += `üîπ *Nuevo Personaje Principal:* ${nuevoPersonajePrincipal.nombre}\n`;
        mensaje += `üìä *Rango:* ${nuevoPersonajePrincipal.rango}\n`;
        mensaje += `üéöÔ∏è *Nivel:* ${nuevoPersonajePrincipal.nivel}\n`;
        mensaje += `‚ù§Ô∏è *Vida:* ${nuevoPersonajePrincipal.vida} HP\n`;
        mensaje += `‚ú® *Experiencia:* ${nuevoPersonajePrincipal.experiencia} / ${nuevoPersonajePrincipal.xpMax} XP\n`;
        mensaje += `üåü *Habilidades:*\n`;

        // üî• **Corregimos la manera en que se muestra el nivel de habilidades**
        Object.entries(nuevoPersonajePrincipal.habilidades).forEach(([habilidad, nivel]) => {
            mensaje += `   üî∏ ${habilidad} (Nivel ${nivel})\n`;
        });

        mensaje += `\nüìú Usa \`${global.prefix}nivelper\` para ver sus estad√≠sticas.\n`;

        await sock.sendMessage(
            msg.key.remoteJid,
            {
                image: { url: nuevoPersonajePrincipal.imagen },
                caption: mensaje
            },
            { quoted: msg }
        );

        // ‚úÖ Reacci√≥n de confirmaci√≥n
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key }
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .per:", error);
        await sock.sendMessage(
            msg.key.remoteJid,
            {
                text: "‚ùå *Ocurri√≥ un error al cambiar tu personaje principal. Int√©ntalo de nuevo.*"
            },
            { quoted: msg }
        );

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key }
        });
    }
    break;
}
        
case 'nivelper': {
    try {
        // üîÑ Reacci√≥n al procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "üìú", key: msg.key } });

        const fs = require("fs");
        const rpgFile = "./rpg.json";

        if (!fs.existsSync(rpgFile)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes personajes registrados.*\nüìå Usa \`${global.prefix}comprar <nombre>\` para obtener uno.` 
            }, { quoted: msg });
            return;
        }

        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        if (!rpgData.usuarios[msg.key.participant]) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes cuenta en Azura Ultra.*\nüìå Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
            return;
        }

        let usuario = rpgData.usuarios[msg.key.participant];

        if (!usuario.personajes || usuario.personajes.length === 0) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes personajes.*\nüìå Usa \`${global.prefix}tiendaper\` para comprar.` 
            }, { quoted: msg });
            return;
        }

        let personajeActual = usuario.personajes[0];

        // üìú Construcci√≥n del mensaje claro con habilidades correctamente definidas
        let mensaje = `üé≠ *Estad√≠sticas de tu Personaje Principal* üé≠\n\n`;
        mensaje += `üîπ *Nombre:* ${personajeActual.nombre}\n`;
        mensaje += `üèÖ *Rango:* ${personajeActual.rango}\n`;
        mensaje += `üéöÔ∏è *Nivel:* ${personajeActual.nivel}\n`;
        mensaje += `‚ù§Ô∏è *Vida:* ${personajeActual.vida} HP\n`;
        mensaje += `‚ú® *Experiencia:* ${personajeActual.experiencia || 0} / ${personajeActual.xpMax || 1000} XP\n`;
        mensaje += `üåü *Habilidades:*\n`;

        // üî• **Corregimos la manera en que se muestra el nivel de habilidades**
        Object.entries(personajeActual.habilidades).forEach(([habilidad, nivel]) => {
            mensaje += `   üî∏ ${habilidad} (Nivel ${nivel})\n`;
        });

        mensaje += `\nüìú Usa \`${global.prefix}verper\` para ver todos tus personajes.\n`;

        // üì∏ Enviar imagen y mensaje
        await sock.sendMessage(msg.key.remoteJid, { 
            image: { url: personajeActual.imagen }, 
            caption: mensaje
        }, { quoted: msg });

        // ‚úÖ Confirmaci√≥n de √©xito
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚úÖ", key: msg.key } });

    } catch (error) {
        console.error("‚ùå Error en .nivelper:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Error al obtener estad√≠sticas. Intenta otra vez.*" 
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚ùå", key: msg.key } });
    }
    break;
}
        
case 'enemigos': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 10 * 60 * 1000; // 10 minutos

        // ‚öîÔ∏è Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚öîÔ∏è", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene personajes
        if (!usuario.personajes || usuario.personajes.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes personajes para enfrentarse a los enemigos.*\nüìú Usa \`${global.prefix}tiendaper\` para comprar uno.` 
            }, { quoted: msg });
        }

        let personaje = usuario.personajes[0]; // Se asume que el primer personaje es el principal

        // üöë Verificar si el personaje tiene 0 de vida
        if (personaje.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°${personaje.nombre} no puede luchar, est√° sin vida!*\nüìú Usa \`${global.prefix}bolasdeldragon\` para revivirlo.` 
            }, { quoted: msg });
        }

        // üïí Verificar cooldown
        let tiempoActual = Date.now();
        if (personaje.cooldowns?.enemigos && tiempoActual - personaje.cooldowns.enemigos < cooldownTime) {
            let tiempoRestante = ((personaje.cooldowns.enemigos + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a enfrentarte a los enemigos.*` }, { quoted: msg });
        }

        // üéñÔ∏è **Generar recompensas aleatorias**
        let diamantesGanados = Math.floor(Math.random() * (900 - 1 + 1)) + 1; // 1 a 900
        let xpGanada = Math.floor(Math.random() * (2500 - 200 + 1)) + 200; // 200 a 2500

        // üî• **Efecto negativo aleatorio**
        let efectoNegativo = Math.random() < 0.5; // 50% de probabilidad de recibir un efecto negativo

        let vidaPerdida = efectoNegativo ? Math.floor(Math.random() * (60 - 20 + 1)) + 20 : Math.floor(Math.random() * (15 - 5 + 1)) + 5;
        let xpPerdida = efectoNegativo ? Math.floor(Math.random() * (600 - 200 + 1)) + 200 : 0;
        
        personaje.vida = Math.max(0, personaje.vida - vidaPerdida);
        usuario.experiencia += xpGanada;
        usuario.diamantes += diamantesGanados;
        personaje.experiencia = Math.max(0, personaje.experiencia - xpPerdida); 

        // üïí **Guardar cooldown**
        if (!personaje.cooldowns) personaje.cooldowns = {};
        personaje.cooldowns.enemigos = tiempoActual;

        // ‚öîÔ∏è **Mensajes de recompensa y castigo**
        const textosPositivos = [
            `‚öîÔ∏è *${personaje.nombre} luch√≥ valientemente y derrot√≥ a sus enemigos.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üõ°Ô∏è *${personaje.nombre} se enfrent√≥ a un enemigo formidable y sali√≥ victorioso.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üî• *${personaje.nombre} mostr√≥ su poder en batalla, acabando con sus rivales.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`
        ];

        const textosNegativos = [
            `‚ö†Ô∏è *${personaje.nombre} fue superado en batalla y sufri√≥ una gran p√©rdida.*  
üíÄ *Perdiste XP:* ${xpPerdida}  
‚ù§Ô∏è *Perdiste vida:* ${vidaPerdida} HP`,
            `‚ò†Ô∏è *${personaje.nombre} subestim√≥ a sus enemigos y termin√≥ gravemente herido.*  
üíÄ *Perdiste XP:* ${xpPerdida}  
‚ù§Ô∏è *Perdiste vida:* ${vidaPerdida} HP`,
            `üî¥ *${personaje.nombre} fue emboscado y tuvo que retirarse con serias heridas.*  
üíÄ *Perdiste XP:* ${xpPerdida}  
‚ù§Ô∏è *Perdiste vida:* ${vidaPerdida} HP`
        ];

        // üì¢ **Enviar mensaje con XP y Diamantes**
        await sock.sendMessage(msg.key.remoteJid, { 
            text: efectoNegativo ? textosNegativos[Math.floor(Math.random() * textosNegativos.length)] : textosPositivos[Math.floor(Math.random() * textosPositivos.length)]
        }, { quoted: msg });

        // üìä **Manejar la subida de nivel correctamente**
        let xpMaxNivel = personaje.nivel === 1 ? 1000 : personaje.nivel * 1500;

        while (personaje.experiencia >= xpMaxNivel && personaje.nivel < 70) {
            personaje.experiencia -= xpMaxNivel;
            personaje.nivel += 1;
            xpMaxNivel = personaje.nivel * 1500;
            personaje.xpMax = xpMaxNivel;

            // üìä **Actualizar Rangos**
            const rangosPersonaje = [
                { nivel: 1, rango: "üåü Principiante" },
                { nivel: 10, rango: "‚öîÔ∏è Guerrero Novato" },
                { nivel: 20, rango: "üî• Maestro de Batallas" },
                { nivel: 30, rango: "üëë General de la Guerra" },
                { nivel: 40, rango: "üåÄ Leyenda Viviente" },
                { nivel: 50, rango: "üíÄ Se√±or de la Guerra" },
                { nivel: 60, rango: "üöÄ Emperador de la Lucha" },
                { nivel: 70, rango: "üî± Dios de la Guerra" }
            ];
            let rangoAnterior = personaje.rango;
            personaje.rango = rangosPersonaje.reduce((acc, curr) => (personaje.nivel >= curr.nivel ? curr.rango : acc), personaje.rango);

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°${personaje.nombre} ha subido al nivel ${personaje.nivel}! üèÜ*\nüèÖ *Nuevo Rango:* ${personaje.rango}`
            }, { quoted: msg });
        }

        // üåü **Mejorar habilidades con 30% de probabilidad**
        let habilidades = Object.keys(personaje.habilidades);
        if (habilidades.length > 0 && Math.random() < 0.3) {
            let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
            personaje.habilidades[habilidadSubida] += 1;

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üåü *¬°${personaje.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${personaje.habilidades[habilidadSubida]}*`
            }, { quoted: msg });
        }

        // üìÇ Guardar cambios en el archivo
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

    } catch (error) {
        console.error("‚ùå Error en el comando .enemigos:", error);
    }
    break;
}
        
case 'mododiablo': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 10 * 60 * 1000; // 10 minutos

        // üòà Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "üòà", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene personajes
        if (!usuario.personajes || usuario.personajes.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes personajes para entrar en el Modo Diablo.*\nüìú Usa \`${global.prefix}tiendaper\` para comprar uno.` 
            }, { quoted: msg });
        }

        let personaje = usuario.personajes[0]; // Se asume que el primer personaje es el principal

        // üöë Verificar si el personaje tiene 0 de vida
        if (personaje.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°${personaje.nombre} no puede usar el Modo Diablo, est√° sin vida!*\nüìú Usa \`${global.prefix}bolasdeldragon\` para revivirlo.` 
            }, { quoted: msg });
        }

        // üïí Verificar cooldown
        let tiempoActual = Date.now();
        if (personaje.cooldowns?.mododiablo && tiempoActual - personaje.cooldowns.mododiablo < cooldownTime) {
            let tiempoRestante = ((personaje.cooldowns.mododiablo + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a usar el Modo Diablo.*` }, { quoted: msg });
        }

        // üéñÔ∏è **Generar recompensas aleatorias**
        let diamantesGanados = Math.floor(Math.random() * (1000 - 1 + 1)) + 1; // 1 a 1000
        let xpGanada = Math.floor(Math.random() * (2000 - 200 + 1)) + 200; // 200 a 2000

        // üî• **Efecto negativo aleatorio**
        let efectoNegativo = Math.random() < 0.5; // 50% de probabilidad de recibir un efecto negativo

        let vidaPerdida = efectoNegativo ? Math.floor(Math.random() * (50 - 20 + 1)) + 20 : Math.floor(Math.random() * (15 - 5 + 1)) + 5;
        let xpPerdida = efectoNegativo ? Math.floor(Math.random() * (500 - 200 + 1)) + 200 : 0;
        
        personaje.vida = Math.max(0, personaje.vida - vidaPerdida);
        usuario.experiencia += xpGanada;
        usuario.diamantes += diamantesGanados;
        personaje.experiencia = Math.max(0, personaje.experiencia - xpPerdida); 

        // üïí **Guardar cooldown**
        if (!personaje.cooldowns) personaje.cooldowns = {};
        personaje.cooldowns.mododiablo = tiempoActual;

        // üòà **Mensajes de recompensa y castigo**
        const textosPositivos = [
            `üî• *${personaje.nombre} ha abrazado la oscuridad y se ha vuelto m√°s fuerte.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üëπ *El poder infernal fluye a trav√©s de ${personaje.nombre}, aumentando su energ√≠a.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üíÄ *Con un aura diab√≥lica, ${personaje.nombre} se convierte en una fuerza imparable.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`
        ];

        const textosNegativos = [
            `‚ö†Ô∏è *${personaje.nombre} se dej√≥ consumir por el Modo Diablo y sufri√≥ una gran p√©rdida.*  
üíÄ *Perdiste XP:* ${xpPerdida}  
‚ù§Ô∏è *Perdiste vida:* ${vidaPerdida} HP`,
            `‚ò†Ô∏è *La oscuridad fue demasiado para ${personaje.nombre}, drenando su energ√≠a vital.*  
üíÄ *Perdiste XP:* ${xpPerdida}  
‚ù§Ô∏è *Perdiste vida:* ${vidaPerdida} HP`,
            `üî¥ *${personaje.nombre} intent√≥ controlar el Modo Diablo, pero termin√≥ debilitado.*  
üíÄ *Perdiste XP:* ${xpPerdida}  
‚ù§Ô∏è *Perdiste vida:* ${vidaPerdida} HP`
        ];

        // üì¢ **Enviar mensaje con XP y Diamantes**
        await sock.sendMessage(msg.key.remoteJid, { 
            text: efectoNegativo ? textosNegativos[Math.floor(Math.random() * textosNegativos.length)] : textosPositivos[Math.floor(Math.random() * textosPositivos.length)]
        }, { quoted: msg });

        // üìä **Manejar la subida de nivel correctamente**
        let xpMaxNivel = personaje.nivel === 1 ? 1000 : personaje.nivel * 1500;

        while (personaje.experiencia >= xpMaxNivel && personaje.nivel < 70) {
            personaje.experiencia -= xpMaxNivel;
            personaje.nivel += 1;
            xpMaxNivel = personaje.nivel * 1500;
            personaje.xpMax = xpMaxNivel;

            // üìä **Actualizar Rangos**
            const rangosPersonaje = [
                { nivel: 1, rango: "üåü Principiante" },
                { nivel: 10, rango: "‚öîÔ∏è Guerrero Oscuro" },
                { nivel: 20, rango: "üî• Maestro del Caos" },
                { nivel: 30, rango: "üëë Se√±or del Infierno" },
                { nivel: 40, rango: "üåÄ Destructor Demon√≠aco" },
                { nivel: 50, rango: "üíÄ Rey del Submundo" },
                { nivel: 60, rango: "üöÄ Dios del Mal Supremo" },
                { nivel: 70, rango: "üî± Emperador de la Oscuridad" }
            ];
            let rangoAnterior = personaje.rango;
            personaje.rango = rangosPersonaje.reduce((acc, curr) => (personaje.nivel >= curr.nivel ? curr.rango : acc), personaje.rango);

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°${personaje.nombre} ha subido al nivel ${personaje.nivel}! üèÜ*\nüèÖ *Nuevo Rango:* ${personaje.rango}`
            }, { quoted: msg });
        }

        // üåü **Mejorar habilidades con 30% de probabilidad**
        let habilidades = Object.keys(personaje.habilidades);
        if (habilidades.length > 0 && Math.random() < 0.3) {
            let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
            personaje.habilidades[habilidadSubida] += 1;

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üåü *¬°${personaje.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${personaje.habilidades[habilidadSubida]}*`
            }, { quoted: msg });
        }

        // üìÇ Guardar cambios en el archivo
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

    } catch (error) {
        console.error("‚ùå Error en el comando .mododiablo:", error);
    }
    break;
}
        
case 'podermaximo': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 24 * 60 * 60 * 1000; // 24 horas

        // üåå Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "üåå", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene personajes
        if (!usuario.personajes || usuario.personajes.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes personajes para alcanzar el Poder M√°ximo.*\nüìú Usa \`${global.prefix}tiendaper\` para comprar uno.` 
            }, { quoted: msg });
        }

        let personaje = usuario.personajes[0]; // Se asume que el primer personaje es el principal

        // üöë Verificar si el personaje tiene 0 de vida
        if (personaje.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°${personaje.nombre} no puede alcanzar el Poder M√°ximo, est√° sin vida!*\nüìú Usa \`${global.prefix}bolasdeldragon\` para revivirlo.` 
            }, { quoted: msg });
        }

        // üïí Verificar cooldown
        let tiempoActual = Date.now();
        if (personaje.cooldowns?.podermaximo && tiempoActual - personaje.cooldowns.podermaximo < cooldownTime) {
            let tiempoRestante = ((personaje.cooldowns.podermaximo + cooldownTime - tiempoActual) / (60 * 60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { text: `‚è≥ *Debes esperar ${tiempoRestante} horas antes de volver a usar el Poder M√°ximo.*` }, { quoted: msg });
        }

        // üéñÔ∏è **Generar recompensas aleatorias**
        let diamantesGanados = Math.floor(Math.random() * (4000 - 500 + 1)) + 500; // 500 a 4000
        let xpGanada = Math.floor(Math.random() * (10000 - 800 + 1)) + 800; // 800 a 10000

        // üí∞ **Incrementar experiencia y diamantes**
        usuario.diamantes += diamantesGanados;
        personaje.experiencia += xpGanada;

        // ‚ù§Ô∏è Reducir vida entre 20 y 50 puntos
        let vidaPerdida = Math.floor(Math.random() * (50 - 20 + 1)) + 20;
        personaje.vida = Math.max(0, personaje.vida - vidaPerdida);

        // üïí **Guardar cooldown**
        if (!personaje.cooldowns) personaje.cooldowns = {};
        personaje.cooldowns.podermaximo = tiempoActual;

        // üåå **Mensajes de recompensa**
        const textos = [
            `üåå *${personaje.nombre} liber√≥ su m√°ximo poder y ahora domina la energ√≠a suprema.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üî• *El aura de ${personaje.nombre} ahora brilla con un poder ilimitado.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `‚ö° *${personaje.nombre} ha alcanzado un estado de poder absoluto.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üí• *Con un rugido ensordecedor, ${personaje.nombre} super√≥ todas sus limitaciones.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üåÄ *Un nuevo nivel de existencia se ha desbloqueado para ${personaje.nombre}.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üëë *Los dioses han reconocido a ${personaje.nombre} como un ser supremo del universo.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`
        ];

        // üì¢ **Enviar mensaje con XP y Diamantes**
        await sock.sendMessage(msg.key.remoteJid, { 
            text: textos[Math.floor(Math.random() * textos.length)] 
        }, { quoted: msg });

        // üìä **Manejar la subida de nivel correctamente**
        let xpMaxNivel = personaje.nivel === 1 ? 1000 : personaje.nivel * 1500;

        while (personaje.experiencia >= xpMaxNivel && personaje.nivel < 70) {
            personaje.experiencia -= xpMaxNivel;
            personaje.nivel += 1;
            xpMaxNivel = personaje.nivel * 1500;
            personaje.xpMax = xpMaxNivel; // Ajustar la XP m√°xima del nuevo nivel

            // üìä **Actualizar Rangos**
            const rangosPersonaje = [
                { nivel: 1, rango: "üåü Principiante" },
                { nivel: 10, rango: "‚öîÔ∏è Guerrero Ascendido" },
                { nivel: 20, rango: "üî• Maestro Celestial" },
                { nivel: 30, rango: "üëë Dios Guerrero" },
                { nivel: 40, rango: "üåÄ Se√±or del Cosmos" },
                { nivel: 50, rango: "üíÄ Dominador Divino" },
                { nivel: 60, rango: "üöÄ Semidi√≥s Supremo" },
                { nivel: 70, rango: "üî± Dios Supremo de la Creaci√≥n" }
            ];
            let rangoAnterior = personaje.rango;
            personaje.rango = rangosPersonaje.reduce((acc, curr) => (personaje.nivel >= curr.nivel ? curr.rango : acc), personaje.rango);

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°${personaje.nombre} ha subido al nivel ${personaje.nivel}! üèÜ*\nüèÖ *Nuevo Rango:* ${personaje.rango}`
            }, { quoted: msg });
        }

        // üåü **Mejorar habilidades con 30% de probabilidad**
        let habilidades = Object.keys(personaje.habilidades);
        if (habilidades.length > 0 && Math.random() < 0.3) {
            let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
            personaje.habilidades[habilidadSubida] += 1;

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üåü *¬°${personaje.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${personaje.habilidades[habilidadSubida]}*`
            }, { quoted: msg });
        }

        // üìÇ Guardar cambios en el archivo
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // ‚úÖ Reacci√≥n de confirmaci√≥n despu√©s de ejecutar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚úÖ", key: msg.key } });

    } catch (error) {
        console.error("‚ùå Error en el comando .podermaximo:", error);
        await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al activar el Poder M√°ximo. Int√©ntalo de nuevo.*" }, { quoted: msg });
    }
    break;
}
        
case 'mododios': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 10 * 60 * 1000; // 10 minutos

        // üî± Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "üî±", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene personajes
        if (!usuario.personajes || usuario.personajes.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes personajes divinos para alcanzar el Modo Dios.*\nüìú Usa \`${global.prefix}tiendaper\` para comprar uno.` 
            }, { quoted: msg });
        }

        let personaje = usuario.personajes[0]; // Se usa el personaje principal

        // üöë Verificar si el personaje tiene 0 de vida
        if (personaje.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°${personaje.nombre} no puede entrar en Modo Dios, est√° sin vida!*\nüìú Usa \`${global.prefix}bolasdeldragon\` para revivirlo.` 
            }, { quoted: msg });
        }

        // üïí Verificar cooldown
        let tiempoActual = Date.now();
        if (personaje.cooldowns?.mododios && tiempoActual - personaje.cooldowns.mododios < cooldownTime) {
            let tiempoRestante = ((personaje.cooldowns.mododios + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a usar el Modo Dios.*` }, { quoted: msg });
        }

        // üéñÔ∏è **Generar recompensas aleatorias**
        let diamantesGanados = Math.floor(Math.random() * (1000 - 50 + 1)) + 50; // 50 a 1000
        let xpGanada = Math.floor(Math.random() * (3000 - 500 + 1)) + 500; // 500 a 3000

        // üî• **Efecto negativo aleatorio (50% de probabilidad)**
        let efectoNegativo = Math.random() < 0.5; 

        let vidaPerdida = efectoNegativo ? Math.floor(Math.random() * (100 - 20 + 1)) + 20 : Math.floor(Math.random() * (15 - 5 + 1)) + 5;
        let xpPerdida = efectoNegativo ? Math.floor(Math.random() * (700 - 200 + 1)) + 200 : 0;
        
        personaje.vida = Math.max(0, personaje.vida - vidaPerdida);
        usuario.experiencia += xpGanada;
        usuario.diamantes += diamantesGanados;
        personaje.experiencia = Math.max(0, personaje.experiencia - xpPerdida); 

        // üïí **Guardar cooldown**
        if (!personaje.cooldowns) personaje.cooldowns = {};
        personaje.cooldowns.mododios = tiempoActual;

        // üî± **Mensajes de recompensa y castigo**
        const textosPositivos = [
            `üî± *${personaje.nombre} alcanz√≥ el Modo Dios y desbloque√≥ un nuevo nivel de poder.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üî• *${personaje.nombre} sinti√≥ el poder divino recorrer su cuerpo y se volvi√≥ m√°s fuerte.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üí• *El aura dorada de ${personaje.nombre} ilumin√≥ todo el campo de batalla, mostrando su fuerza.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`
        ];

        const textosNegativos = [
            `‚ö†Ô∏è *${personaje.nombre} no logr√≥ controlar el Modo Dios y sufri√≥ da√±os colaterales.*  
üíÄ *Perdiste XP:* ${xpPerdida}  
‚ù§Ô∏è *Perdiste vida:* ${vidaPerdida} HP`,
            `‚ò†Ô∏è *${personaje.nombre} fue consumido por la energ√≠a divina y debilitado.*  
üíÄ *Perdiste XP:* ${xpPerdida}  
‚ù§Ô∏è *Perdiste vida:* ${vidaPerdida} HP`,
            `üî¥ *El poder del Modo Dios fue demasiado para ${personaje.nombre}, sufriendo graves heridas.*  
üíÄ *Perdiste XP:* ${xpPerdida}  
‚ù§Ô∏è *Perdiste vida:* ${vidaPerdida} HP`
        ];

        // üì¢ **Enviar mensaje con XP y Diamantes**
        await sock.sendMessage(msg.key.remoteJid, { 
            text: efectoNegativo ? textosNegativos[Math.floor(Math.random() * textosNegativos.length)] : textosPositivos[Math.floor(Math.random() * textosPositivos.length)]
        }, { quoted: msg });

        // üìä **Manejar la subida de nivel correctamente**
        let xpMaxNivel = personaje.nivel === 1 ? 1000 : personaje.nivel * 1500;

        while (personaje.experiencia >= xpMaxNivel && personaje.nivel < 70) {
            personaje.experiencia -= xpMaxNivel;
            personaje.nivel += 1;
            xpMaxNivel = personaje.nivel * 1500;
            personaje.xpMax = xpMaxNivel;

            // üìä **Actualizar Rangos**
            const rangosPersonaje = [
                { nivel: 1, rango: "üåü Principiante" },
                { nivel: 10, rango: "‚öîÔ∏è Guerrero Divino" },
                { nivel: 20, rango: "üî• Avatar Celestial" },
                { nivel: 30, rango: "üëë Dios de la Guerra" },
                { nivel: 40, rango: "üåÄ Destructor Universal" },
                { nivel: 50, rango: "üíÄ Se√±or del Cosmos" },
                { nivel: 60, rango: "üöÄ Emperador Divino" },
                { nivel: 70, rango: "üî± Supremo Absoluto" }
            ];
            let rangoAnterior = personaje.rango;
            personaje.rango = rangosPersonaje.reduce((acc, curr) => (personaje.nivel >= curr.nivel ? curr.rango : acc), personaje.rango);

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°${personaje.nombre} ha subido al nivel ${personaje.nivel}! üèÜ*\nüèÖ *Nuevo Rango:* ${personaje.rango}`
            }, { quoted: msg });
        }

        // üåü **Mejorar habilidades con 30% de probabilidad**
        let habilidades = Object.keys(personaje.habilidades);
        if (habilidades.length > 0 && Math.random() < 0.3) {
            let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
            personaje.habilidades[habilidadSubida] += 1;

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üåü *¬°${personaje.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${personaje.habilidades[habilidadSubida]}*`
            }, { quoted: msg });
        }

        // üìÇ Guardar cambios en el archivo
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

    } catch (error) {
        console.error("‚ùå Error en el comando .mododios:", error);
    }
    break;
}

        
case 'otrouniverso': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 6 * 60 * 1000; // 6 minutos

        // ü™ê Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "ü™ê", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene personajes
        if (!usuario.personajes || usuario.personajes.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes personajes para entrenar en otro universo.*\nüìú Usa \`${global.prefix}tiendaper\` para comprar uno.` 
            }, { quoted: msg });
        }

        let personaje = usuario.personajes[0]; // Se asume que el primer personaje es el principal

        // üöë Verificar si el personaje tiene 0 de vida
        if (personaje.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°${personaje.nombre} no puede entrenar en otro universo, est√° sin vida!*\nüìú Usa \`${global.prefix}bolasdeldragon\` para revivirlo.` 
            }, { quoted: msg });
        }

        // üïí Verificar cooldown
        let tiempoActual = Date.now();
        if (personaje.cooldowns?.otrouniverso && tiempoActual - personaje.cooldowns.otrouniverso < cooldownTime) {
            let tiempoRestante = ((personaje.cooldowns.otrouniverso + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a viajar a otro universo.*` }, { quoted: msg });
        }

        // üéñÔ∏è **Generar recompensas aleatorias**
        let diamantesGanados = Math.floor(Math.random() * (600 - 1 + 1)) + 1; // 1 a 600
        let xpGanada = Math.floor(Math.random() * (1500 - 300 + 1)) + 300; // 300 a 1500

        // üí∞ **Incrementar experiencia y diamantes**
        usuario.diamantes += diamantesGanados;
        personaje.experiencia += xpGanada;

        // ‚ù§Ô∏è Reducir vida entre 5 y 20 puntos
        let vidaPerdida = Math.floor(Math.random() * (20 - 5 + 1)) + 5;
        personaje.vida = Math.max(0, personaje.vida - vidaPerdida);

        // üïí **Guardar cooldown**
        if (!personaje.cooldowns) personaje.cooldowns = {};
        personaje.cooldowns.otrouniverso = tiempoActual;

        // ü™ê **Mensajes de recompensa**
        const textos = [
            `ü™ê *${personaje.nombre} viaj√≥ a otro universo y entren√≥ con guerreros de dimensiones desconocidas.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üöÄ *${personaje.nombre} descubri√≥ nuevas formas de energ√≠a en un universo alterno, mejorando su poder.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üåå *Entrenando en un universo lejano, ${personaje.nombre} domin√≥ una nueva t√©cnica ancestral.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üåÄ *Despu√©s de un viaje a trav√©s del multiverso, ${personaje.nombre} obtuvo un gran aumento de poder.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üî• *${personaje.nombre} desafi√≥ a los dioses de un universo desconocido y se volvi√≥ m√°s fuerte.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `‚ö° *Gracias a un entrenamiento en otra dimensi√≥n, ${personaje.nombre} ha mejorado su control del ki.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`
        ];

        // üì¢ **Enviar mensaje con XP y Diamantes**
        await sock.sendMessage(msg.key.remoteJid, { 
            text: textos[Math.floor(Math.random() * textos.length)] 
        }, { quoted: msg });

        // üìä **Manejar la subida de nivel correctamente**
        let xpMaxNivel = personaje.nivel === 1 ? 1000 : personaje.nivel * 1500;

        while (personaje.experiencia >= xpMaxNivel && personaje.nivel < 70) {
            personaje.experiencia -= xpMaxNivel;
            personaje.nivel += 1;
            xpMaxNivel = personaje.nivel * 1500;
            personaje.xpMax = xpMaxNivel; // Ajustar la XP m√°xima del nuevo nivel

            // üìä **Actualizar Rangos**
            const rangosPersonaje = [
                { nivel: 1, rango: "üåü Principiante" },
                { nivel: 10, rango: "‚öîÔ∏è Guerrero Interdimensional" },
                { nivel: 20, rango: "üî• Maestro del Multiverso" },
                { nivel: 30, rango: "üëë Conquistador de Universos" },
                { nivel: 40, rango: "üåÄ Dominador Espacial" },
                { nivel: 50, rango: "üíÄ Rey de los Multiversos" },
                { nivel: 60, rango: "üöÄ Dios C√≥smico" },
                { nivel: 70, rango: "üî± Ser Supremo del Multiverso" }
            ];
            let rangoAnterior = personaje.rango;
            personaje.rango = rangosPersonaje.reduce((acc, curr) => (personaje.nivel >= curr.nivel ? curr.rango : acc), personaje.rango);

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°${personaje.nombre} ha subido al nivel ${personaje.nivel}! üèÜ*\nüèÖ *Nuevo Rango:* ${personaje.rango}`
            }, { quoted: msg });
        }

        // üåü **Mejorar habilidades con 30% de probabilidad**
        let habilidades = Object.keys(personaje.habilidades);
        if (habilidades.length > 0 && Math.random() < 0.3) {
            let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
            personaje.habilidades[habilidadSubida] += 1;

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üåü *¬°${personaje.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${personaje.habilidades[habilidadSubida]}*`
            }, { quoted: msg });
        }

        // üìÇ Guardar cambios en el archivo
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // ‚úÖ Reacci√≥n de confirmaci√≥n despu√©s de ejecutar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚úÖ", key: msg.key } });

    } catch (error) {
        console.error("‚ùå Error en el comando .otrouniverso:", error);
        await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al entrenar en otro universo. Int√©ntalo de nuevo.*" }, { quoted: msg });
    }
    break;
}
        
case 'otromundo': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 6 * 60 * 1000; // 6 minutos

        // üåå Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "üåå", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene personajes
        if (!usuario.personajes || usuario.personajes.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes personajes para entrenar en el Otro Mundo.*\nüìú Usa \`${global.prefix}tiendaper\` para comprar uno.` 
            }, { quoted: msg });
        }

        let personaje = usuario.personajes[0]; // Primer personaje como principal

        // üöë Verificar si el personaje tiene 0 de vida
        if (personaje.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°${personaje.nombre} no puede entrenar en el Otro Mundo, est√° sin vida!*\nüìú Usa \`${global.prefix}bolasdeldragon\` para revivirlo.` 
            }, { quoted: msg });
        }

        // üïí Verificar cooldown
        let tiempoActual = Date.now();
        if (personaje.cooldowns?.otromundo && tiempoActual - personaje.cooldowns.otromundo < cooldownTime) {
            let tiempoRestante = ((personaje.cooldowns.otromundo + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a entrenar en el Otro Mundo.*` }, { quoted: msg });
        }

        // üéñÔ∏è **Generar recompensas aleatorias**
        let diamantesGanados = Math.floor(Math.random() * (500 - 1 + 1)) + 1; // 1 a 500
        let xpGanada = Math.floor(Math.random() * (2000 - 500 + 1)) + 500; // 500 a 2000

        // üí∞ **Incrementar experiencia y diamantes**
        usuario.diamantes += diamantesGanados;
        personaje.experiencia += xpGanada;

        // ‚ù§Ô∏è Reducir vida entre 5 y 20 puntos
        let vidaPerdida = Math.floor(Math.random() * (20 - 5 + 1)) + 5;
        personaje.vida = Math.max(0, personaje.vida - vidaPerdida);

        // üïí **Guardar cooldown**
        if (!personaje.cooldowns) personaje.cooldowns = {};
        personaje.cooldowns.otromundo = tiempoActual;

        // üåå **Mensajes de recompensa**
        const textos = [
            `üåå *${personaje.nombre} entren√≥ con los dioses del Otro Mundo y aument√≥ su poder.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üî• *Despu√©s de un duro entrenamiento en el M√°s All√°, ${personaje.nombre} regres√≥ m√°s fuerte.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üëÅÔ∏è‚Äçüó®Ô∏è *${personaje.nombre} alcanz√≥ una nueva comprensi√≥n del ki mientras entrenaba en el Otro Mundo.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `‚ö° *Con la gu√≠a de los maestros celestiales, ${personaje.nombre} aument√≥ su energ√≠a vital.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üîÆ *${personaje.nombre} perfeccion√≥ su t√©cnica en el Otro Mundo, elevando su poder al m√°ximo.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üí• *Despu√©s de un entrenamiento extremo en el Otro Mundo, ${personaje.nombre} domin√≥ nuevas habilidades.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`
        ];

        // üì¢ **Enviar mensaje con XP y Diamantes**
        await sock.sendMessage(msg.key.remoteJid, { 
            text: textos[Math.floor(Math.random() * textos.length)] 
        }, { quoted: msg });

        // üìä **Manejar la subida de nivel correctamente**
        let xpMaxNivel = personaje.nivel === 1 ? 1000 : personaje.nivel * 1500;

        while (personaje.experiencia >= xpMaxNivel && personaje.nivel < 70) {
            personaje.experiencia -= xpMaxNivel;
            personaje.nivel += 1;
            xpMaxNivel = personaje.nivel * 1500;
            personaje.xpMax = xpMaxNivel; // Ajustar la XP m√°xima del nuevo nivel

            // üìä **Actualizar Rangos**
            const rangosPersonaje = [
                { nivel: 1, rango: "üåü Principiante" },
                { nivel: 10, rango: "‚öîÔ∏è Guerrero Espiritual" },
                { nivel: 20, rango: "üî• Maestro del M√°s All√°" },
                { nivel: 30, rango: "üëë Dominador de Dimensiones" },
                { nivel: 40, rango: "üåÄ Se√±or del Ki Divino" },
                { nivel: 50, rango: "üíÄ Rey del Otro Mundo" },
                { nivel: 60, rango: "üöÄ Dios de las Dimensiones" },
                { nivel: 70, rango: "üî± Entidad Suprema" }
            ];
            let rangoAnterior = personaje.rango;
            personaje.rango = rangosPersonaje.reduce((acc, curr) => (personaje.nivel >= curr.nivel ? curr.rango : acc), personaje.rango);

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°${personaje.nombre} ha subido al nivel ${personaje.nivel}! üèÜ*\nüèÖ *Nuevo Rango:* ${personaje.rango}`
            }, { quoted: msg });
        }

        // üåü **Mejorar habilidades con 30% de probabilidad**
        let habilidades = Object.keys(personaje.habilidades);
        if (habilidades.length > 0 && Math.random() < 0.3) {
            let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
            personaje.habilidades[habilidadSubida] += 1;

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üåü *¬°${personaje.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${personaje.habilidades[habilidadSubida]}*`
            }, { quoted: msg });
        }

        // üìÇ Guardar cambios en el archivo
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // ‚úÖ Reacci√≥n de confirmaci√≥n despu√©s de ejecutar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚úÖ", key: msg.key } });

    } catch (error) {
        console.error("‚ùå Error en el comando .otromundo:", error);
        await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al entrenar en el Otro Mundo. Int√©ntalo de nuevo.*" }, { quoted: msg });
    }
    break;
}
        
case 'volar': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 6 * 60 * 1000; // 6 minutos

        // üõ∏ Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "üõ∏", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene personajes
        if (!usuario.personajes || usuario.personajes.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes personajes para entrenar su vuelo.*\nüìú Usa \`${global.prefix}tiendaper\` para comprar uno.` 
            }, { quoted: msg });
        }

        let personaje = usuario.personajes[0]; // Primer personaje como principal

        // üöë Verificar si el personaje tiene 0 de vida
        if (personaje.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°${personaje.nombre} no puede entrenar vuelo, est√° sin vida!*\nüìú Usa \`${global.prefix}bolasdeldragon\` para curarlo.` 
            }, { quoted: msg });
        }

        // üïí Verificar cooldown
        let tiempoActual = Date.now();
        if (personaje.cooldowns?.volar && tiempoActual - personaje.cooldowns.volar < cooldownTime) {
            let tiempoRestante = ((personaje.cooldowns.volar + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a entrenar el vuelo de tu personaje.*` }, { quoted: msg });
        }

        // üéñÔ∏è **Generar recompensas aleatorias**
        let diamantesGanados = Math.floor(Math.random() * (500 - 1 + 1)) + 1; // 1 a 500
        let xpGanada = Math.floor(Math.random() * (3000 - 300 + 1)) + 300; // 300 a 3000

        // üí∞ **Incrementar experiencia y diamantes**
        usuario.diamantes += diamantesGanados;
        personaje.experiencia += xpGanada;

        // ‚ù§Ô∏è Reducir vida entre 5 y 20 puntos
        let vidaPerdida = Math.floor(Math.random() * (20 - 5 + 1)) + 5;
        personaje.vida = Math.max(0, personaje.vida - vidaPerdida);

        // üïí **Guardar cooldown**
        if (!personaje.cooldowns) personaje.cooldowns = {};
        personaje.cooldowns.volar = tiempoActual;

        // ‚úàÔ∏è **Mensajes de recompensa**
        const textos = [
            `üõ∏ *${personaje.nombre} entren√≥ su vuelo y ahora puede moverse m√°s r√°pido.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üå¨Ô∏è *${personaje.nombre} logr√≥ perfeccionar el control de su energ√≠a en el aire.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üî• *Con una incre√≠ble explosi√≥n de poder, ${personaje.nombre} alcanz√≥ una gran velocidad en el aire.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üåÄ *${personaje.nombre} realiz√≥ maniobras a√©reas impresionantes, mejorando su control de vuelo.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üí® *Despu√©s de un duro entrenamiento, ${personaje.nombre} ahora vuela sin esfuerzo.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `‚ö° *${personaje.nombre} alcanz√≥ una nueva fase de vuelo, pudiendo moverse a la velocidad de la luz.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`
        ];

        // üì¢ **Enviar mensaje con XP y Diamantes**
        await sock.sendMessage(msg.key.remoteJid, { 
            text: textos[Math.floor(Math.random() * textos.length)] 
        }, { quoted: msg });

        // üìä **Manejar la subida de nivel correctamente**
        let xpMaxNivel = personaje.nivel === 1 ? 1000 : personaje.nivel * 1500;

        while (personaje.experiencia >= xpMaxNivel && personaje.nivel < 70) {
            personaje.experiencia -= xpMaxNivel;
            personaje.nivel += 1;
            xpMaxNivel = personaje.nivel * 1500;
            personaje.xpMax = xpMaxNivel; // Ajustar la XP m√°xima del nuevo nivel

            // üìä **Actualizar Rangos**
            const rangosPersonaje = [
                { nivel: 1, rango: "üåü Principiante" },
                { nivel: 10, rango: "‚öîÔ∏è Guerrero del Cielo" },
                { nivel: 20, rango: "üî• Maestro A√©reo" },
                { nivel: 30, rango: "üëë Dominador del Vuelo" },
                { nivel: 40, rango: "üåÄ Se√±or del Viento" },
                { nivel: 50, rango: "üíÄ Esp√≠ritu Celestial" },
                { nivel: 60, rango: "üöÄ Viajero Dimensional" },
                { nivel: 70, rango: "üî± Dios del Vuelo" }
            ];
            let rangoAnterior = personaje.rango;
            personaje.rango = rangosPersonaje.reduce((acc, curr) => (personaje.nivel >= curr.nivel ? curr.rango : acc), personaje.rango);

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°${personaje.nombre} ha subido al nivel ${personaje.nivel}! üèÜ*\nüèÖ *Nuevo Rango:* ${personaje.rango}`
            }, { quoted: msg });
        }

        // üåü **Mejorar habilidades con 30% de probabilidad**
        let habilidades = Object.keys(personaje.habilidades);
        if (habilidades.length > 0 && Math.random() < 0.3) {
            let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
            personaje.habilidades[habilidadSubida] += 1;

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üåü *¬°${personaje.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${personaje.habilidades[habilidadSubida]}*`
            }, { quoted: msg });
        }

        // üìÇ Guardar cambios en el archivo
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // ‚úÖ Reacci√≥n de confirmaci√≥n despu√©s de ejecutar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚úÖ", key: msg.key } });

    } catch (error) {
        console.error("‚ùå Error en el comando .volar:", error);
        await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al entrenar el vuelo. Int√©ntalo de nuevo.*" }, { quoted: msg });
    }
    break;
}
        
case 'poder': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 6 * 60 * 1000; // 6 minutos

        // ‚ö° Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚ö°", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene personajes
        if (!usuario.personajes || usuario.personajes.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes personajes para entrenar su poder.*\nüìú Usa \`${global.prefix}tiendaper\` para comprar uno.` 
            }, { quoted: msg });
        }

        let personaje = usuario.personajes[0]; // Primer personaje como principal

        // üöë Verificar si el personaje tiene 0 de vida
        if (personaje.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°${personaje.nombre} no puede entrenar su poder, est√° sin vida!*\nüìú Usa \`${global.prefix}bolasdeldragon\` para curarlo.` 
            }, { quoted: msg });
        }

        // üïí Verificar cooldown
        let tiempoActual = Date.now();
        if (personaje.cooldowns?.poder && tiempoActual - personaje.cooldowns.poder < cooldownTime) {
            let tiempoRestante = ((personaje.cooldowns.poder + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a entrenar el poder de tu personaje.*` }, { quoted: msg });
        }

        // üéñÔ∏è **Generar recompensas aleatorias**
        let diamantesGanados = Math.floor(Math.random() * (800 - 1 + 1)) + 1; // 1 a 800
        let xpGanada = Math.floor(Math.random() * (2500 - 300 + 1)) + 300; // 300 a 2500

        // üí∞ **Incrementar experiencia y diamantes**
        usuario.diamantes += diamantesGanados;
        personaje.experiencia += xpGanada;

        // ‚ù§Ô∏è Reducir vida entre 5 y 25 puntos
        let vidaPerdida = Math.floor(Math.random() * (25 - 5 + 1)) + 5;
        personaje.vida = Math.max(0, personaje.vida - vidaPerdida);

        // üïí **Guardar cooldown**
        if (!personaje.cooldowns) personaje.cooldowns = {};
        personaje.cooldowns.poder = tiempoActual;

        // ‚ö° **Mensajes de recompensa**
        const textos = [
            `‚ö° *${personaje.nombre} entren√≥ su poder y se siente m√°s fuerte.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üî• *${personaje.nombre} aument√≥ su ki y ahora su aura brilla intensamente.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üí• *${personaje.nombre} liber√≥ una explosi√≥n de energ√≠a impresionante.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üåÄ *${personaje.nombre} logr√≥ concentrar su poder y alcanz√≥ un nuevo nivel de energ√≠a.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üîÆ *${personaje.nombre} entren√≥ con un maestro legendario y su poder se elev√≥.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `‚öîÔ∏è *${personaje.nombre} domin√≥ una nueva t√©cnica de combate.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`
        ];

        // üì¢ **Enviar mensaje con XP y Diamantes**
        await sock.sendMessage(msg.key.remoteJid, { 
            text: textos[Math.floor(Math.random() * textos.length)] 
        }, { quoted: msg });

        // üìä **Manejar la subida de nivel correctamente**
        let xpMaxNivel = personaje.nivel === 1 ? 1000 : personaje.nivel * 1500;

        while (personaje.experiencia >= xpMaxNivel && personaje.nivel < 70) {
            personaje.experiencia -= xpMaxNivel;
            personaje.nivel += 1;
            xpMaxNivel = personaje.nivel * 1500;
            personaje.xpMax = xpMaxNivel; // Ajustar la XP m√°xima del nuevo nivel

            // üìä **Actualizar Rangos**
            const rangosPersonaje = [
                { nivel: 1, rango: "üåü Principiante" },
                { nivel: 10, rango: "‚öîÔ∏è Guerrero" },
                { nivel: 20, rango: "üî• Maestro de Batalla" },
                { nivel: 30, rango: "üëë L√≠der Supremo" },
                { nivel: 40, rango: "üåÄ Legendario" },
                { nivel: 50, rango: "üíÄ Dios de la Guerra" },
                { nivel: 60, rango: "üöÄ Tit√°n de la Arena" },
                { nivel: 70, rango: "üî± Inmortal" }
            ];
            let rangoAnterior = personaje.rango;
            personaje.rango = rangosPersonaje.reduce((acc, curr) => (personaje.nivel >= curr.nivel ? curr.rango : acc), personaje.rango);

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°${personaje.nombre} ha subido al nivel ${personaje.nivel}! üèÜ*\nüèÖ *Nuevo Rango:* ${personaje.rango}`
            }, { quoted: msg });
        }

        // üåü **Mejorar habilidades con 30% de probabilidad**
        let habilidades = Object.keys(personaje.habilidades);
        if (habilidades.length > 0 && Math.random() < 0.3) {
            let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
            personaje.habilidades[habilidadSubida] += 1;

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üåü *¬°${personaje.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${personaje.habilidades[habilidadSubida]}*`
            }, { quoted: msg });
        }

        // üìÇ Guardar cambios en el archivo
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // ‚úÖ Reacci√≥n de confirmaci√≥n despu√©s de ejecutar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚úÖ", key: msg.key } });

    } catch (error) {
        console.error("‚ùå Error en el comando .poder:", error);
        await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al entrenar el poder. Int√©ntalo de nuevo.*" }, { quoted: msg });
    }
    break;
}

case 'luchar': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 5 * 60 * 1000; // 5 minutos

        // ‚öîÔ∏è Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚öîÔ∏è", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene personajes
        if (!usuario.personajes || usuario.personajes.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes personajes para luchar.*\nüìú Usa \`${global.prefix}tiendaper\` para comprar uno.` 
            }, { quoted: msg });
        }

        let personaje = usuario.personajes[0]; // Primer personaje como principal

        // üöë Verificar si el personaje tiene 0 de vida
        if (personaje.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°No puedes luchar!*\n\nüî¥ *${personaje.nombre} tiene 0 de vida.*\nüìú Usa \`${global.prefix}bolasdeldragon\` para curarlo.` 
            }, { quoted: msg });
        }

        // üïí Verificar cooldown
        let tiempoActual = Date.now();
        if (personaje.cooldowns?.luchar && tiempoActual - personaje.cooldowns.luchar < cooldownTime) {
            let tiempoRestante = ((personaje.cooldowns.luchar + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a luchar.*` }, { quoted: msg });
        }

        // üéñÔ∏è **Generar recompensas aleatorias**
        let diamantesGanados = Math.floor(Math.random() * (500 - 1 + 1)) + 1;
        let xpGanada = Math.floor(Math.random() * (2000 - 500 + 1)) + 500;

        // üí∞ **Incrementar experiencia y diamantes**
        usuario.diamantes += diamantesGanados;
        personaje.experiencia += xpGanada;

        // ‚ù§Ô∏è Reducir vida entre 5 y 20 puntos
        let vidaPerdida = Math.floor(Math.random() * (20 - 5 + 1)) + 5;
        personaje.vida = Math.max(0, personaje.vida - vidaPerdida);

        // üïí **Guardar cooldown**
        if (!personaje.cooldowns) personaje.cooldowns = {};
        personaje.cooldowns.luchar = tiempoActual;

        // ‚öîÔ∏è **Mensajes de recompensa**
        const textos = [
            `‚öîÔ∏è *${personaje.nombre} pele√≥ y gan√≥ experiencia.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üî• *${personaje.nombre} venci√≥ a un enemigo y se hizo m√°s fuerte.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `üõ°Ô∏è *${personaje.nombre} se defendi√≥ con √©xito en la batalla.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`,
            `‚ö° *${personaje.nombre} aprendi√≥ nuevas t√©cnicas en el combate.*  
üíé *${diamantesGanados} Diamantes obtenidos*  
‚ú® *${xpGanada} XP ganados*`
        ];

        // üì¢ **Enviar mensaje con XP y Diamantes**
        await sock.sendMessage(msg.key.remoteJid, { 
            text: textos[Math.floor(Math.random() * textos.length)] 
        }, { quoted: msg });

        // üìä **Manejar la subida de nivel correctamente**
        let xpMaxNivel = personaje.nivel === 1 ? 1000 : personaje.nivel * 1500;

        while (personaje.experiencia >= xpMaxNivel && personaje.nivel < 70) {
            personaje.experiencia -= xpMaxNivel;
            personaje.nivel += 1;
            xpMaxNivel = personaje.nivel * 1500;
            personaje.xpMax = xpMaxNivel; // Ajustar la XP m√°xima del nuevo nivel

            // üìä **Actualizar Rangos**
            const rangosPersonaje = [
                { nivel: 1, rango: "üåü Principiante" },
                { nivel: 10, rango: "‚öîÔ∏è Guerrero" },
                { nivel: 20, rango: "üî• Maestro de Batalla" },
                { nivel: 30, rango: "üëë L√≠der Supremo" },
                { nivel: 40, rango: "üåÄ Legendario" },
                { nivel: 50, rango: "üíÄ Dios de la Guerra" },
                { nivel: 60, rango: "üöÄ Tit√°n de la Arena" },
                { nivel: 70, rango: "üî± Inmortal" }
            ];
            let rangoAnterior = personaje.rango;
            personaje.rango = rangosPersonaje.reduce((acc, curr) => (personaje.nivel >= curr.nivel ? curr.rango : acc), personaje.rango);

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°${personaje.nombre} ha subido al nivel ${personaje.nivel}! üèÜ*\nüèÖ *Nuevo Rango:* ${personaje.rango}`
            }, { quoted: msg });
        }

        // üåü **Mejorar habilidades con 30% de probabilidad**
        let habilidades = Object.keys(personaje.habilidades);
        if (habilidades.length > 0 && Math.random() < 0.3) {
            let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
            personaje.habilidades[habilidadSubida] += 1;

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üåü *¬°${personaje.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${personaje.habilidades[habilidadSubida]}*`
            }, { quoted: msg });
        }

        // üìÇ Guardar cambios en el archivo
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // ‚úÖ Reacci√≥n de confirmaci√≥n despu√©s de ejecutar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚úÖ", key: msg.key } });

    } catch (error) {
        console.error("‚ùå Error en el comando .luchar:", error);
        await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al luchar. Int√©ntalo de nuevo.*" }, { quoted: msg });
    }
    break;
}
            
        
case 'bolasdeldragon': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const costoCuracion = 500; // üíé Costo de curaci√≥n en diamantes

        // üêâ Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "üêâ", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene personajes
        if (!usuario.personajes || usuario.personajes.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes personajes para curar.*\nüìú Usa \`${global.prefix}tiendaper\` para comprar uno.` 
            }, { quoted: msg });
        }

        let personaje = usuario.personajes[0]; // Se cura el primer personaje de la lista

        // üíé Verificar si el usuario tiene suficientes diamantes
        if (usuario.diamantes < costoCuracion) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes suficientes diamantes para curar a tu personaje.*\nüíé *Costo de curaci√≥n:* ${costoCuracion} Diamantes\nüí∞ *Diamantes disponibles:* ${usuario.diamantes}`
            }, { quoted: msg });
        }

        // üöë Verificar si el personaje ya tiene vida completa
        if (personaje.vida === 100) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ö†Ô∏è *${personaje.nombre} ya tiene la vida al m√°ximo.*` 
            }, { quoted: msg });
        }

        // üíñ Restaurar la vida del personaje
        personaje.vida = 100; // Se establece en 100 de vida

        // üíé Restar diamantes
        usuario.diamantes -= costoCuracion;

        // üêâ **Textos aleatorios al usar la curaci√≥n**
        const textos = [
            `üêâ *Las Bolas del Drag√≥n fueron invocadas y ${personaje.nombre} ha sido completamente curado.*  
‚ù§Ô∏è *Vida restaurada al 100%*  
üíé *-${costoCuracion} Diamantes*`,
            `üåü *Un resplandor dorado envolvi√≥ a ${personaje.nombre}, restaurando toda su energ√≠a.*  
‚ù§Ô∏è *Vida restaurada al 100%*  
üíé *-${costoCuracion} Diamantes*`,
            `üî• *El poder del Drag√≥n Sagrado san√≥ todas las heridas de ${personaje.nombre}.*  
‚ù§Ô∏è *Vida restaurada al 100%*  
üíé *-${costoCuracion} Diamantes*`,
            `‚ú® *Las esferas m√°gicas liberaron su poder y ${personaje.nombre} volvi√≥ a estar en plena forma.*  
‚ù§Ô∏è *Vida restaurada al 100%*  
üíé *-${costoCuracion} Diamantes*`,
            `üåø *${personaje.nombre} bebi√≥ el elixir de la inmortalidad y recuper√≥ toda su fuerza.*  
‚ù§Ô∏è *Vida restaurada al 100%*  
üíé *-${costoCuracion} Diamantes*`,
            `‚ö° *La energ√≠a celestial fluy√≥ a trav√©s de ${personaje.nombre}, devolvi√©ndole la vitalidad.*  
‚ù§Ô∏è *Vida restaurada al 100%*  
üíé *-${costoCuracion} Diamantes*`
        ];

        // üì¢ **Enviar mensaje de curaci√≥n**
        await sock.sendMessage(msg.key.remoteJid, { text: textos[Math.floor(Math.random() * textos.length)] }, { quoted: msg });

        // üìä **Verificar si el personaje sube de nivel**
        let xpMaxNivel = personaje.nivel * 1500;
        while (personaje.experiencia >= xpMaxNivel && personaje.nivel < 70) {
            personaje.experiencia -= xpMaxNivel;
            personaje.nivel += 1;
            xpMaxNivel = personaje.nivel * 1500;

            // üéñÔ∏è **Actualizar Rangos (Hasta nivel 70)**
            const rangos = [
                { nivel: 1, rango: "üåü Principiante" },
                { nivel: 5, rango: "‚öîÔ∏è Guerrero" },
                { nivel: 10, rango: "üî• Maestro" },
                { nivel: 20, rango: "üèÜ Leyenda" },
                { nivel: 30, rango: "üëë Rey Supremo" },
                { nivel: 40, rango: "üöÄ Dios de la Guerra" },
                { nivel: 50, rango: "üíÄ Deidad de la Batalla" },
                { nivel: 60, rango: "üåå Tit√°n del Universo" },
                { nivel: 70, rango: "üêâ M√≠tico Inmortal" }
            ];
            let rangoAnterior = personaje.rango;
            personaje.rango = rangos.reduce((acc, curr) => (personaje.nivel >= curr.nivel ? curr.rango : acc), personaje.rango);

            // üì¢ **Notificar subida de nivel y cambio de rango**
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°${personaje.nombre} ha subido al nivel ${personaje.nivel}! üèÜ*\nüèÖ *Nuevo Rango:* ${personaje.rango}`
            }, { quoted: msg });
        }

        // üìÇ Guardar cambios en el archivo
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // ‚úÖ Reacci√≥n de confirmaci√≥n despu√©s de ejecutar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚úÖ", key: msg.key } });

    } catch (error) {
        console.error("‚ùå Error en el comando .bolasdeldragon:", error);
        await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al usar las Bolas del Drag√≥n. Int√©ntalo de nuevo.*" }, { quoted: msg });
    }
    break;
}
        
case 'curar': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const costoCuracion = 500; // üíé Costo de la curaci√≥n

        // üè• Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚ù§Ô∏è", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene mascota
        if (!usuario.mascotas || usuario.mascotas.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes ninguna mascota.*\nüìú Usa \`${global.prefix}tiendamascotas\` para comprar una.` 
            }, { quoted: msg });
        }

        let mascota = usuario.mascotas[0]; // Se asume que la primera mascota es la principal

        // üè• Verificar si la mascota ya tiene vida completa
        if (mascota.vida >= 100) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚úÖ *${mascota.nombre} ya tiene su vida completa.* No es necesario curarla.` 
            }, { quoted: msg });
        }

        // üíé Verificar si el usuario tiene suficientes diamantes
        if (usuario.diamantes < costoCuracion) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes suficientes diamantes para curar a tu mascota.*\nüíé *Necesitas ${costoCuracion} diamantes.*` 
            }, { quoted: msg });
        }

        // üíñ Restaurar la vida de la mascota y descontar diamantes
        usuario.diamantes -= costoCuracion;
        mascota.vida = 100;

        // üè• Mensaje de confirmaci√≥n
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ù§Ô∏è *¬°Has curado a ${mascota.nombre} exitosamente!* üè•\n\nüíé *Costo:* ${costoCuracion} diamantes\n‚ù§Ô∏è *Vida restaurada a:* 100 HP\n\n¬°Ahora ${mascota.nombre} est√° lista para m√°s aventuras! üêæ` 
        }, { quoted: msg });

        // üìÇ Guardar cambios en el archivo
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

    } catch (error) {
        console.error("‚ùå Error en el comando .curar:", error);
        await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al curar a tu mascota. Int√©ntalo de nuevo.*" }, { quoted: msg });
    }
    break;
}
        
case 'supermascota': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 24 * 60 * 60 * 1000; // 24 horas de espera

        // üöÄ Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "üöÄ", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene mascota
        if (!usuario.mascotas || usuario.mascotas.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes ninguna mascota.*\nüìú Usa \`${global.prefix}tiendamascotas\` para comprar una.` 
            }, { quoted: msg });
        }

        let mascota = usuario.mascotas[0]; // Se asume que la primera mascota es la principal

        // üöë Verificar si la mascota tiene 0 de vida
        if (mascota.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°No puedes usar este comando!*\n\nüî¥ *${mascota.nombre} tiene 0 de vida.*\nüìú Usa \`${global.prefix}curar\` para recuperarla.` 
            }, { quoted: msg });
        }

        // üïí Verificar cooldown
        let tiempoActual = Date.now();
        if (mascota.cooldowns?.supermascota && tiempoActual - mascota.cooldowns.supermascota < cooldownTime) {
            let tiempoRestante = ((mascota.cooldowns.supermascota + cooldownTime - tiempoActual) / (60 * 60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { text: `‚è≥ *Debes esperar ${tiempoRestante} horas antes de volver a usar este comando.*` }, { quoted: msg });
        }

        // üéñÔ∏è **Generar recompensas aleatorias**
        let diamantesGanados = Math.floor(Math.random() * (5000 - 800 + 1)) + 800; // Entre 800 y 5000
        let xpGanada = Math.floor(Math.random() * (8000 - 1000 + 1)) + 1000; // Entre 1000 y 8000

        // üí∞ **Incrementar experiencia y diamantes**
        usuario.diamantes += diamantesGanados;
        mascota.experiencia += xpGanada;

        // ‚ù§Ô∏è Reducir vida aleatoriamente entre 5 y 20 puntos
        let vidaPerdida = Math.floor(Math.random() * (20 - 5 + 1)) + 5;
        mascota.vida = Math.max(0, mascota.vida - vidaPerdida);

        // üïí **Guardar cooldown**
        if (!mascota.cooldowns) mascota.cooldowns = {};
        mascota.cooldowns.supermascota = tiempoActual;

        // üåü **Textos aleatorios personalizados con recompensas**
        const textos = [
            `üöÄ *${mascota.nombre} demostr√≥ su m√°ximo poder y dej√≥ a todos sorprendidos.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üî• *Despu√©s de un entrenamiento extremo, ${mascota.nombre} ha alcanzado un nuevo nivel de fuerza.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üëë *¬°Todos han reconocido a ${mascota.nombre} como una supermascota legendaria!* \nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `‚ú® *El aura de ${mascota.nombre} brilla con intensidad, demostrando su poder absoluto.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üí• *La fuerza de ${mascota.nombre} ha superado todos los l√≠mites conocidos.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üéñÔ∏è *La evoluci√≥n de ${mascota.nombre} es impresionante, alcanzando un nivel sobrehumano.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`
        ];

        // üì¢ **Enviar mensaje con XP y Diamantes**
        await sock.sendMessage(msg.key.remoteJid, { 
            text: textos[Math.floor(Math.random() * textos.length)] 
        }, { quoted: msg });

        // üìä **Notificaci√≥n de subida de nivel**
        let xpMaxActual = mascota.nivel === 1 ? 500 : mascota.nivel * 1200;
        while (mascota.experiencia >= xpMaxActual && mascota.nivel < 80) {
            mascota.experiencia -= xpMaxActual;
            mascota.nivel += 1;
            xpMaxActual = mascota.nivel * 1200;
            mascota.xpMax = xpMaxActual;

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°Felicidades! Tu mascota ${mascota.nombre} ha subido de nivel.* üèÜ\nüêæ *Nuevo Nivel:* ${mascota.nivel}\n‚ú® *Experiencia:* ${mascota.experiencia} / ${xpMaxActual} XP`
            }, { quoted: msg });
        }

        // üåü **Incrementar niveles aleatorios en habilidades con 30% de probabilidad**
        let habilidades = Object.keys(mascota.habilidades);
        if (habilidades.length > 0) {
            let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
            if (Math.random() < 0.3) { // 30% de probabilidad de mejorar una habilidad
                mascota.habilidades[habilidadSubida].nivel += 1;

                await sock.sendMessage(msg.key.remoteJid, { 
                    text: `üåü *¬°${mascota.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${mascota.habilidades[habilidadSubida].nivel}*`
                }, { quoted: msg });
            }
        }

        // üìä **Actualizar y manejar Rangos**
        const rangosMascota = [
            { nivel: 1, rango: "üê£ Principiante" },
            { nivel: 10, rango: "üêæ Aprendiz" },
            { nivel: 20, rango: "ü¶¥ Experto" },
            { nivel: 30, rango: "üõ°Ô∏è Guardi√°n" },
            { nivel: 40, rango: "üê∫ Alfa" },
            { nivel: 50, rango: "üèÜ Leyenda" },
            { nivel: 60, rango: "üî• Divino" },
            { nivel: 70, rango: "üêâ M√≠tico" },
            { nivel: 80, rango: "üöÄ Tit√°n Supremo" }
        ];
        let rangoAnterior = mascota.rango;
        mascota.rango = rangosMascota.reduce((acc, curr) => (mascota.nivel >= curr.nivel ? curr.rango : acc), mascota.rango);

        if (mascota.rango !== rangoAnterior) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéñÔ∏è *¬°Tu mascota ${mascota.nombre} ha subido de rango a ${mascota.rango}!* üöÄ`
            }, { quoted: msg });
        }

        // üìÇ Guardar cambios
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

    } catch (error) {
        console.error("‚ùå Error en el comando .supermascota:", error);
    }
    break;
}
        
case 'presumir': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 10 * 60 * 1000; // 10 minutos de espera

        // üåü Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "üåü", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene mascota
        if (!usuario.mascotas || usuario.mascotas.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes ninguna mascota.*\nüìú Usa \`${global.prefix}tiendamascotas\` para comprar una.` 
            }, { quoted: msg });
        }

        let mascota = usuario.mascotas[0]; // Se asume que la primera mascota es la principal

        // üöë Verificar si la mascota tiene 0 de vida
        if (mascota.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°No puedes presumir a tu mascota!*\n\nüî¥ *${mascota.nombre} tiene 0 de vida.*\nüìú Usa \`${global.prefix}curar\` para recuperarla.` 
            }, { quoted: msg });
        }

        // üïí Verificar cooldown
        let tiempoActual = Date.now();
        if (mascota.cooldowns?.presumir && tiempoActual - mascota.cooldowns.presumir < cooldownTime) {
            let tiempoRestante = ((mascota.cooldowns.presumir + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a presumir a tu mascota.*` }, { quoted: msg });
        }

        // üéñÔ∏è **Generar recompensas aleatorias**
        let diamantesGanados = Math.floor(Math.random() * (500 - 50 + 1)) + 50; // Entre 50 y 500
        let xpGanada = Math.floor(Math.random() * (2800 - 500 + 1)) + 500; // Entre 500 y 2800

        // üí∞ **Incrementar experiencia y diamantes**
        usuario.diamantes += diamantesGanados;
        mascota.experiencia += xpGanada;

        // ‚ù§Ô∏è Reducir vida aleatoriamente entre 5 y 20 puntos
        let vidaPerdida = Math.floor(Math.random() * (20 - 5 + 1)) + 5;
        mascota.vida = Math.max(0, mascota.vida - vidaPerdida);

        // üïí **Guardar cooldown**
        if (!mascota.cooldowns) mascota.cooldowns = {};
        mascota.cooldowns.presumir = tiempoActual;

        // üåü **Textos aleatorios personalizados con recompensas**
        const textos = [
            `üåü *${mascota.nombre} deslumbr√≥ a todos con su presencia.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üíé *La gente qued√≥ impresionada con ${mascota.nombre}, ¬°qu√© orgullo!* \nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üëë *${mascota.nombre} se rob√≥ todas las miradas, ¬°una verdadera estrella!* \nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üî• *Al presumir a ${mascota.nombre}, todos quedaron asombrados.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üì∏ *${mascota.nombre} pos√≥ como todo un profesional y fue el centro de atenci√≥n.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `‚ú® *Despu√©s de presumir a ${mascota.nombre}, todos quieren una igual.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`
        ];

        // üì¢ **Enviar mensaje con XP y Diamantes**
        await sock.sendMessage(msg.key.remoteJid, { 
            text: textos[Math.floor(Math.random() * textos.length)] 
        }, { quoted: msg });

        // üìä **Notificaci√≥n de subida de nivel**
        let xpMaxActual = mascota.nivel === 1 ? 500 : mascota.nivel * 1200;
        while (mascota.experiencia >= xpMaxActual && mascota.nivel < 80) {
            mascota.experiencia -= xpMaxActual;
            mascota.nivel += 1;
            xpMaxActual = mascota.nivel * 1200;
            mascota.xpMax = xpMaxActual;

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°Felicidades! Tu mascota ${mascota.nombre} ha subido de nivel.* üèÜ\nüêæ *Nuevo Nivel:* ${mascota.nivel}\n‚ú® *Experiencia:* ${mascota.experiencia} / ${xpMaxActual} XP`
            }, { quoted: msg });
        }

        // üåü **Incrementar niveles aleatorios en habilidades con 30% de probabilidad**
        let habilidades = Object.keys(mascota.habilidades);
        if (habilidades.length > 0) {
            let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
            if (Math.random() < 0.3) { // 30% de probabilidad de mejorar una habilidad
                mascota.habilidades[habilidadSubida].nivel += 1;

                await sock.sendMessage(msg.key.remoteJid, { 
                    text: `üåü *¬°${mascota.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${mascota.habilidades[habilidadSubida].nivel}*`
                }, { quoted: msg });
            }
        }

        // üìä **Actualizar y manejar Rangos**
        const rangosMascota = [
            { nivel: 1, rango: "üê£ Principiante" },
            { nivel: 10, rango: "üêæ Aprendiz" },
            { nivel: 20, rango: "ü¶¥ Experto" },
            { nivel: 30, rango: "üõ°Ô∏è Guardi√°n" },
            { nivel: 40, rango: "üê∫ Alfa" },
            { nivel: 50, rango: "üèÜ Leyenda" },
            { nivel: 60, rango: "üî• Divino" },
            { nivel: 70, rango: "üêâ M√≠tico" },
            { nivel: 80, rango: "üöÄ Tit√°n Supremo" }
        ];
        let rangoAnterior = mascota.rango;
        mascota.rango = rangosMascota.reduce((acc, curr) => (mascota.nivel >= curr.nivel ? curr.rango : acc), mascota.rango);

        if (mascota.rango !== rangoAnterior) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéñÔ∏è *¬°Tu mascota ${mascota.nombre} ha subido de rango a ${mascota.rango}!* üöÄ`
            }, { quoted: msg });
        }

        // üìÇ Guardar cambios
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

    } catch (error) {
        console.error("‚ùå Error en el comando .presumir:", error);
    }
    break;
}
        
case 'entrenar': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 10 * 60 * 1000; // 10 minutos de espera

        // üèãÔ∏è Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "üèãÔ∏è", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene mascota
        if (!usuario.mascotas || usuario.mascotas.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes ninguna mascota.*\nüìú Usa \`${global.prefix}tiendamascotas\` para comprar una.` 
            }, { quoted: msg });
        }

        let mascota = usuario.mascotas[0]; // Se asume que la primera mascota es la principal

        // üöë Verificar si la mascota tiene 0 de vida
        if (mascota.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°No puedes entrenar a tu mascota!*\n\nüî¥ *${mascota.nombre} tiene 0 de vida.*\nüìú Usa \`${global.prefix}curar\` para recuperarla.` 
            }, { quoted: msg });
        }

        // üïí Verificar cooldown
        let tiempoActual = Date.now();
        if (mascota.cooldowns?.entrenar && tiempoActual - mascota.cooldowns.entrenar < cooldownTime) {
            let tiempoRestante = ((mascota.cooldowns.entrenar + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a entrenar a tu mascota.*` }, { quoted: msg });
        }

        // üéñÔ∏è **Generar recompensas aleatorias**
        let diamantesGanados = Math.floor(Math.random() * (500 - 1 + 1)) + 1; // Entre 1 y 500
        let xpGanada = Math.floor(Math.random() * (1800 - 500 + 1)) + 500; // Entre 500 y 1800

        // üí∞ **Incrementar experiencia y diamantes**
        usuario.diamantes += diamantesGanados;
        mascota.experiencia += xpGanada;

        // ‚ù§Ô∏è Reducir vida aleatoriamente entre 5 y 20 puntos
        let vidaPerdida = Math.floor(Math.random() * (20 - 5 + 1)) + 5;
        mascota.vida = Math.max(0, mascota.vida - vidaPerdida);

        // üïí **Guardar cooldown**
        if (!mascota.cooldowns) mascota.cooldowns = {};
        mascota.cooldowns.entrenar = tiempoActual;

        // üèãÔ∏è **Textos aleatorios personalizados con recompensas**
        const textos = [
            `üèãÔ∏è *${mascota.nombre} entren√≥ intensamente y ahora es m√°s fuerte.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üí™ *Despu√©s de una sesi√≥n de entrenamiento, ${mascota.nombre} est√° m√°s resistente.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üî• *${mascota.nombre} practic√≥ nuevas t√©cnicas y mejor√≥ sus habilidades.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `‚ö° *Un duro entrenamiento hizo que ${mascota.nombre} aumentara su agilidad y destreza.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üí• *${mascota.nombre} rompi√≥ sus l√≠mites con una intensa rutina de entrenamiento.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üèÜ *El esfuerzo de ${mascota.nombre} en el entrenamiento est√° dando grandes resultados.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`
        ];

        // üì¢ **Enviar mensaje con XP y Diamantes**
        await sock.sendMessage(msg.key.remoteJid, { 
            text: textos[Math.floor(Math.random() * textos.length)] 
        }, { quoted: msg });

        // üìä **Notificaci√≥n de subida de nivel**
        let xpMaxActual = mascota.nivel === 1 ? 500 : mascota.nivel * 1200;
        while (mascota.experiencia >= xpMaxActual && mascota.nivel < 80) {
            mascota.experiencia -= xpMaxActual;
            mascota.nivel += 1;
            xpMaxActual = mascota.nivel * 1200;
            mascota.xpMax = xpMaxActual;

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°Felicidades! Tu mascota ${mascota.nombre} ha subido de nivel.* üèÜ\nüêæ *Nuevo Nivel:* ${mascota.nivel}\n‚ú® *Experiencia:* ${mascota.experiencia} / ${xpMaxActual} XP`
            }, { quoted: msg });
        }

        // üåü **Incrementar niveles aleatorios en habilidades con 30% de probabilidad**
        let habilidades = Object.keys(mascota.habilidades);
        if (habilidades.length > 0) {
            let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
            if (Math.random() < 0.3) { // 30% de probabilidad de mejorar una habilidad
                mascota.habilidades[habilidadSubida].nivel += 1;

                await sock.sendMessage(msg.key.remoteJid, { 
                    text: `üåü *¬°${mascota.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${mascota.habilidades[habilidadSubida].nivel}*`
                }, { quoted: msg });
            }
        }

        // üìä **Actualizar y manejar Rangos**
        const rangosMascota = [
            { nivel: 1, rango: "üê£ Principiante" },
            { nivel: 10, rango: "üêæ Aprendiz" },
            { nivel: 20, rango: "ü¶¥ Experto" },
            { nivel: 30, rango: "üõ°Ô∏è Guardi√°n" },
            { nivel: 40, rango: "üê∫ Alfa" },
            { nivel: 50, rango: "üèÜ Leyenda" },
            { nivel: 60, rango: "üî• Divino" },
            { nivel: 70, rango: "üêâ M√≠tico" },
            { nivel: 80, rango: "üöÄ Tit√°n Supremo" }
        ];
        let rangoAnterior = mascota.rango;
        mascota.rango = rangosMascota.reduce((acc, curr) => (mascota.nivel >= curr.nivel ? curr.rango : acc), mascota.rango);

        if (mascota.rango !== rangoAnterior) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéñÔ∏è *¬°Tu mascota ${mascota.nombre} ha subido de rango a ${mascota.rango}!* üöÄ`
            }, { quoted: msg });
        }

        // üìÇ Guardar cambios
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

    } catch (error) {
        console.error("‚ùå Error en el comando .entrenar:", error);
    }
    break;
}
        
case 'pasear': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 8 * 60 * 1000; // 8 minutos de espera

        // üö∂ Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "üö∂", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene mascota
        if (!usuario.mascotas || usuario.mascotas.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes ninguna mascota.*\nüìú Usa \`${global.prefix}tiendamascotas\` para comprar una.` 
            }, { quoted: msg });
        }

        let mascota = usuario.mascotas[0]; // Se asume que la primera mascota es la principal

        // üöë Verificar si la mascota tiene 0 de vida
        if (mascota.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°No puedes pasear con tu mascota!*\n\nüî¥ *${mascota.nombre} tiene 0 de vida.*\nüìú Usa \`${global.prefix}curar\` para recuperarla.` 
            }, { quoted: msg });
        }

        // üïí Verificar cooldown
        let tiempoActual = Date.now();
        if (mascota.cooldowns?.pasear && tiempoActual - mascota.cooldowns.pasear < cooldownTime) {
            let tiempoRestante = ((mascota.cooldowns.pasear + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a usar este comando.*` }, { quoted: msg });
        }

        // üéñÔ∏è **Generar recompensas aleatorias**
        let diamantesGanados = Math.floor(Math.random() * (500 - 50 + 1)) + 50; // Entre 50 y 500
        let xpGanada = Math.floor(Math.random() * (1200 - 300 + 1)) + 300; // Entre 300 y 1200

        // üí∞ **Incrementar experiencia y diamantes**
        usuario.diamantes += diamantesGanados;
        mascota.experiencia += xpGanada;

        // ‚ù§Ô∏è Reducir vida aleatoriamente entre 5 y 20 puntos
        let vidaPerdida = Math.floor(Math.random() * (20 - 5 + 1)) + 5;
        mascota.vida = Math.max(0, mascota.vida - vidaPerdida);

        // üïí **Guardar cooldown**
        if (!mascota.cooldowns) mascota.cooldowns = {};
        mascota.cooldowns.pasear = tiempoActual;

        // üö∂ **Textos aleatorios personalizados con recompensas**
        const textos = [
            `üö∂ *${mascota.nombre} disfrut√≥ de un paseo relajante por el parque.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üå≥ *${mascota.nombre} corri√≥ por la pradera y se llen√≥ de energ√≠a.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üêï *${mascota.nombre} hizo nuevos amigos en su paseo y se divirti√≥ mucho.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `‚òÄÔ∏è *${mascota.nombre} disfrut√≥ del sol y el aire fresco mientras paseaban juntos.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üåä *Un paseo junto al r√≠o hizo que ${mascota.nombre} se sintiera renovado.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üèÉ *${mascota.nombre} corri√≥ a toda velocidad en el paseo y entren√≥ su resistencia.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`
        ];

        // üì¢ **Enviar mensaje con XP y Diamantes**
        await sock.sendMessage(msg.key.remoteJid, { 
            text: textos[Math.floor(Math.random() * textos.length)] 
        }, { quoted: msg });

        // üìä **Notificaci√≥n de subida de nivel**
        let xpMaxActual = mascota.nivel === 1 ? 500 : mascota.nivel * 1200;
        while (mascota.experiencia >= xpMaxActual && mascota.nivel < 80) {
            mascota.experiencia -= xpMaxActual;
            mascota.nivel += 1;
            xpMaxActual = mascota.nivel * 1200;
            mascota.xpMax = xpMaxActual;

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°Felicidades! Tu mascota ${mascota.nombre} ha subido de nivel.* üèÜ\nüêæ *Nuevo Nivel:* ${mascota.nivel}\n‚ú® *Experiencia:* ${mascota.experiencia} / ${xpMaxActual} XP`
            }, { quoted: msg });
        }

        // üåü **Incrementar niveles aleatorios en habilidades con 30% de probabilidad**
        let habilidades = Object.keys(mascota.habilidades);
        if (habilidades.length > 0) {
            let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
            if (Math.random() < 0.3) { // 30% de probabilidad de mejorar una habilidad
                mascota.habilidades[habilidadSubida].nivel += 1;

                await sock.sendMessage(msg.key.remoteJid, { 
                    text: `üåü *¬°${mascota.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${mascota.habilidades[habilidadSubida].nivel}*`
                }, { quoted: msg });
            }
        }

        // üìä **Actualizar y manejar Rangos**
        const rangosMascota = [
            { nivel: 1, rango: "üê£ Principiante" },
            { nivel: 10, rango: "üêæ Aprendiz" },
            { nivel: 20, rango: "ü¶¥ Experto" },
            { nivel: 30, rango: "üõ°Ô∏è Guardi√°n" },
            { nivel: 40, rango: "üê∫ Alfa" },
            { nivel: 50, rango: "üèÜ Leyenda" },
            { nivel: 60, rango: "üî• Divino" },
            { nivel: 70, rango: "üêâ M√≠tico" },
            { nivel: 80, rango: "üöÄ Tit√°n Supremo" }
        ];
        let rangoAnterior = mascota.rango;
        mascota.rango = rangosMascota.reduce((acc, curr) => (mascota.nivel >= curr.nivel ? curr.rango : acc), mascota.rango);

        if (mascota.rango !== rangoAnterior) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéñÔ∏è *¬°Tu mascota ${mascota.nombre} ha subido de rango a ${mascota.rango}!* üöÄ`
            }, { quoted: msg });
        }

        // üìÇ Guardar cambios
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

    } catch (error) {
        console.error("‚ùå Error en el comando .pasear:", error);
    }
    break;
}

        
case 'cazar': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 7 * 60 * 1000; // 7 minutos de espera

        // üéØ Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "üéØ", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene mascota
        if (!usuario.mascotas || usuario.mascotas.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes ninguna mascota.*\nüìú Usa \`${global.prefix}tiendamascotas\` para comprar una.` 
            }, { quoted: msg });
        }

        let mascota = usuario.mascotas[0]; // Se asume que la primera mascota es la principal

        // üöë Verificar si la mascota tiene 0 de vida
        if (mascota.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°No puedes ir de caza con tu mascota!*\n\nüî¥ *${mascota.nombre} tiene 0 de vida.*\nüìú Usa \`${global.prefix}curar\` para recuperarla.` 
            }, { quoted: msg });
        }

        // üïí Verificar cooldown
        let tiempoActual = Date.now();
        if (mascota.cooldowns?.cazar && tiempoActual - mascota.cooldowns.cazar < cooldownTime) {
            let tiempoRestante = ((mascota.cooldowns.cazar + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a usar este comando.*` }, { quoted: msg });
        }

        // üéñÔ∏è **Generar recompensas aleatorias**
        let diamantesGanados = Math.floor(Math.random() * (350 - 1 + 1)) + 1; // Entre 1 y 350
        let xpGanada = Math.floor(Math.random() * (1800 - 500 + 1)) + 500; // Entre 500 y 1800

        // üí∞ **Incrementar experiencia y diamantes**
        usuario.diamantes += diamantesGanados;
        mascota.experiencia += xpGanada;

        // ‚ù§Ô∏è Reducir vida aleatoriamente entre 5 y 20 puntos
        let vidaPerdida = Math.floor(Math.random() * (20 - 5 + 1)) + 5;
        mascota.vida = Math.max(0, mascota.vida - vidaPerdida);

        // üïí **Guardar cooldown**
        if (!mascota.cooldowns) mascota.cooldowns = {};
        mascota.cooldowns.cazar = tiempoActual;

        // üéØ **Textos aleatorios personalizados con recompensas**
        const textos = [
            `üéØ *${mascota.nombre} caz√≥ con precisi√≥n y trajo una gran presa.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üèπ *${mascota.nombre} tuvo un d√≠a de caza exitoso y se siente m√°s fuerte.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `ü¶å *${mascota.nombre} persigui√≥ a su presa con gran habilidad.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üêæ *${mascota.nombre} acech√≥ con astucia y logr√≥ una cacer√≠a exitosa.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `‚ö° *${mascota.nombre} us√≥ su velocidad y atrap√≥ una presa en tiempo r√©cord.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üî• *${mascota.nombre} mostr√≥ su instinto salvaje y domin√≥ el arte de la caza.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`
        ];

        // üì¢ **Enviar mensaje con XP y Diamantes**
        await sock.sendMessage(msg.key.remoteJid, { 
            text: textos[Math.floor(Math.random() * textos.length)] 
        }, { quoted: msg });

        // üìä **Notificaci√≥n de subida de nivel**
        let xpMaxActual = mascota.nivel === 1 ? 500 : mascota.nivel * 1200;
        while (mascota.experiencia >= xpMaxActual && mascota.nivel < 80) {
            mascota.experiencia -= xpMaxActual;
            mascota.nivel += 1;
            xpMaxActual = mascota.nivel * 1200;
            mascota.xpMax = xpMaxActual;

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°Felicidades! Tu mascota ${mascota.nombre} ha subido de nivel.* üèÜ\nüêæ *Nuevo Nivel:* ${mascota.nivel}\n‚ú® *Experiencia:* ${mascota.experiencia} / ${xpMaxActual} XP`
            }, { quoted: msg });
        }

        // üåü **Incrementar niveles aleatorios en habilidades**
        let habilidades = Object.keys(mascota.habilidades);
        if (habilidades.length > 0) {
            let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
            if (Math.random() < 0.5) { // 50% de probabilidad de mejorar una habilidad
                mascota.habilidades[habilidadSubida].nivel += 1;

                await sock.sendMessage(msg.key.remoteJid, { 
                    text: `üåü *¬°${mascota.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${mascota.habilidades[habilidadSubida].nivel}*`
                }, { quoted: msg });
            }
        }

        // üìä **Actualizar y manejar Rangos**
        const rangosMascota = [
            { nivel: 1, rango: "üê£ Principiante" },
            { nivel: 10, rango: "üêæ Aprendiz" },
            { nivel: 20, rango: "ü¶¥ Experto" },
            { nivel: 30, rango: "üõ°Ô∏è Guardi√°n" },
            { nivel: 40, rango: "üê∫ Alfa" },
            { nivel: 50, rango: "üèÜ Leyenda" },
            { nivel: 60, rango: "üî• Divino" },
            { nivel: 70, rango: "üêâ M√≠tico" },
            { nivel: 80, rango: "üöÄ Tit√°n Supremo" }
        ];
        let rangoAnterior = mascota.rango;
        mascota.rango = rangosMascota.reduce((acc, curr) => (mascota.nivel >= curr.nivel ? curr.rango : acc), mascota.rango);

        if (mascota.rango !== rangoAnterior) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéñÔ∏è *¬°Tu mascota ${mascota.nombre} ha subido de rango a ${mascota.rango}!* üöÄ`
            }, { quoted: msg });
        }

        // üìÇ Guardar cambios
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

    } catch (error) {
        console.error("‚ùå Error en el comando .cazar:", error);
    }
    break;
}
        
case 'darcari√±o': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 5 * 60 * 1000; // 5 minutos de espera

        // ‚ù§Ô∏è Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚ù§Ô∏è", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene mascota
        if (!usuario.mascotas || usuario.mascotas.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes ninguna mascota.*\nüìú Usa \`${global.prefix}tiendamascotas\` para comprar una.` 
            }, { quoted: msg });
        }

        let mascota = usuario.mascotas[0]; // Se asume que la primera mascota es la principal

        // üöë Verificar si la mascota tiene 0 de vida
        if (mascota.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°No puedes dar cari√±o a tu mascota!*\n\nüî¥ *${mascota.nombre} tiene 0 de vida.*\nüìú Usa \`${global.prefix}curar\` para recuperarla.` 
            }, { quoted: msg });
        }

        // üïí Verificar cooldown
        let tiempoActual = Date.now();
        if (mascota.cooldowns?.darcari√±o && tiempoActual - mascota.cooldowns.darcari√±o < cooldownTime) {
            let tiempoRestante = ((mascota.cooldowns.darcari√±o + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a usar este comando.*` }, { quoted: msg });
        }

        // üéñÔ∏è **Generar recompensas aleatorias**
        let diamantesGanados = Math.floor(Math.random() * (200 - 1 + 1)) + 1; // Entre 1 y 200
        let xpGanada = Math.floor(Math.random() * (1500 - 300 + 1)) + 300; // Entre 300 y 1500

        // üí∞ **Incrementar experiencia y diamantes**
        usuario.diamantes += diamantesGanados;
        mascota.experiencia += xpGanada;

        // ‚ù§Ô∏è Reducir vida aleatoriamente entre 5 y 20 puntos
        let vidaPerdida = Math.floor(Math.random() * (20 - 5 + 1)) + 5;
        mascota.vida = Math.max(0, mascota.vida - vidaPerdida);

        // üïí **Guardar cooldown**
        if (!mascota.cooldowns) mascota.cooldowns = {};
        mascota.cooldowns.darcari√±o = tiempoActual;

        // üíñ **Textos aleatorios personalizados con recompensas**
        const textos = [
            `‚ù§Ô∏è *${mascota.nombre} recibi√≥ cari√±o y ahora est√° m√°s feliz.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `ü§ó *${mascota.nombre} se sinti√≥ amado y su v√≠nculo contigo ha crecido.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üêæ *Despu√©s de recibir amor, ${mascota.nombre} parece m√°s motivado para entrenar.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üíû *${mascota.nombre} disfrut√≥ de un momento especial contigo.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üíì *Tu amor y cari√±o hicieron que ${mascota.nombre} se sintiera muy especial.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `ü¶¥ *${mascota.nombre} ronrone√≥ de felicidad despu√©s de recibir tu cari√±o.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`
        ];

        // üì¢ **Enviar mensaje con XP y Diamantes**
        await sock.sendMessage(msg.key.remoteJid, { 
            text: textos[Math.floor(Math.random() * textos.length)] 
        }, { quoted: msg });

        // üìä **Notificaci√≥n de subida de nivel**
        let xpMaxActual = mascota.nivel === 1 ? 500 : mascota.nivel * 1200;
        while (mascota.experiencia >= xpMaxActual && mascota.nivel < 80) {
            mascota.experiencia -= xpMaxActual;
            mascota.nivel += 1;
            xpMaxActual = mascota.nivel * 1200;
            mascota.xpMax = xpMaxActual;

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°Felicidades! Tu mascota ${mascota.nombre} ha subido de nivel.* üèÜ\nüêæ *Nuevo Nivel:* ${mascota.nivel}\n‚ú® *Experiencia:* ${mascota.experiencia} / ${xpMaxActual} XP`
            }, { quoted: msg });
        }

        // üåü **Incrementar niveles aleatorios en habilidades**
        let habilidades = Object.keys(mascota.habilidades);
        if (habilidades.length > 0) {
            let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
            if (Math.random() < 0.5) { // 50% de probabilidad de mejorar una habilidad
                mascota.habilidades[habilidadSubida].nivel += 1;

                await sock.sendMessage(msg.key.remoteJid, { 
                    text: `üåü *¬°${mascota.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${mascota.habilidades[habilidadSubida].nivel}*`
                }, { quoted: msg });
            }
        }

        // üìä **Actualizar y manejar Rangos**
        const rangosMascota = [
            { nivel: 1, rango: "üê£ Principiante" },
            { nivel: 10, rango: "üêæ Aprendiz" },
            { nivel: 20, rango: "ü¶¥ Experto" },
            { nivel: 30, rango: "üõ°Ô∏è Guardi√°n" },
            { nivel: 40, rango: "üê∫ Alfa" },
            { nivel: 50, rango: "üèÜ Leyenda" },
            { nivel: 60, rango: "üî• Divino" },
            { nivel: 70, rango: "üêâ M√≠tico" },
            { nivel: 80, rango: "üöÄ Tit√°n Supremo" }
        ];
        let rangoAnterior = mascota.rango;
        mascota.rango = rangosMascota.reduce((acc, curr) => (mascota.nivel >= curr.nivel ? curr.rango : acc), mascota.rango);

        if (mascota.rango !== rangoAnterior) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéñÔ∏è *¬°Tu mascota ${mascota.nombre} ha subido de rango a ${mascota.rango}!* üöÄ`
            }, { quoted: msg });
        }

        // üìÇ Guardar cambios
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

    } catch (error) {
        console.error("‚ùå Error en el comando .darcari√±o:", error);
    }
    break;
}        
        
case 'darcomida': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 5 * 60 * 1000; // 5 minutos de espera

        // üçñ Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "üçñ", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene mascota
        if (!usuario.mascotas || usuario.mascotas.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes ninguna mascota.*\nüìú Usa \`${global.prefix}tiendamascotas\` para comprar una.` 
            }, { quoted: msg });
        }

        let mascota = usuario.mascotas[0]; // Se asume que la primera mascota es la principal

        // üöë Verificar si la mascota tiene 0 de vida
        if (mascota.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°No puedes dar comida a tu mascota!*\n\nüî¥ *${mascota.nombre} tiene 0 de vida.*\nüìú Usa \`${global.prefix}curar\` para recuperarla.` 
            }, { quoted: msg });
        }

        // üïí Verificar cooldown
        let tiempoActual = Date.now();
        if (mascota.cooldowns?.darcomida && tiempoActual - mascota.cooldowns.darcomida < cooldownTime) {
            let tiempoRestante = ((mascota.cooldowns.darcomida + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a usar este comando.*` }, { quoted: msg });
        }

        // üéñÔ∏è **Generar recompensas aleatorias**
        let diamantesGanados = Math.floor(Math.random() * (200 - 1 + 1)) + 1; // Entre 1 y 200
        let xpGanada = Math.floor(Math.random() * (1200 - 200 + 1)) + 200; // Entre 200 y 1200

        // üí∞ **Incrementar experiencia y diamantes**
        usuario.diamantes += diamantesGanados;
        mascota.experiencia += xpGanada;

        // ‚ù§Ô∏è Reducir vida aleatoriamente entre 5 y 20 puntos
        let vidaPerdida = Math.floor(Math.random() * (20 - 5 + 1)) + 5;
        mascota.vida = Math.max(0, mascota.vida - vidaPerdida);

        // üïí **Guardar cooldown**
        if (!mascota.cooldowns) mascota.cooldowns = {};
        mascota.cooldowns.darcomida = tiempoActual;

        // üçñ **Textos aleatorios personalizados con recompensas**
        const textos = [
            `üçñ *${mascota.nombre} devor√≥ su comida con gusto y se siente satisfecho.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `ü•© *${mascota.nombre} disfrut√≥ un banquete delicioso y parece m√°s fuerte.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üêæ *Despu√©s de comer, ${mascota.nombre} parece tener m√°s energ√≠a para entrenar.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üçó *${mascota.nombre} disfrut√≥ su comida y est√° m√°s feliz.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `ü•ì *${mascota.nombre} comi√≥ hasta quedar satisfecho y listo para nuevas aventuras.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`,
            `üçé *Un alimento saludable ayud√≥ a ${mascota.nombre} a mantenerse fuerte y √°gil.*\nüíé *${diamantesGanados} Diamantes ganados*\n‚ú® *${xpGanada} XP obtenidos*`
        ];

        // üì¢ **Enviar mensaje con XP y Diamantes**
        await sock.sendMessage(msg.key.remoteJid, { 
            text: textos[Math.floor(Math.random() * textos.length)] 
        }, { quoted: msg });

        // üìä **Notificaci√≥n de subida de nivel**
        let xpMaxActual = mascota.nivel === 1 ? 500 : mascota.nivel * 1200;
        while (mascota.experiencia >= xpMaxActual && mascota.nivel < 80) {
            mascota.experiencia -= xpMaxActual;
            mascota.nivel += 1;
            xpMaxActual = mascota.nivel * 1200;
            mascota.xpMax = xpMaxActual;

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°Felicidades! Tu mascota ${mascota.nombre} ha subido de nivel.* üèÜ\nüêæ *Nuevo Nivel:* ${mascota.nivel}\n‚ú® *Experiencia:* ${mascota.experiencia} / ${xpMaxActual} XP`
            }, { quoted: msg });
        }

        // üåü **Incrementar niveles aleatorios en habilidades**
        let habilidades = Object.keys(mascota.habilidades);
        if (habilidades.length > 0) {
            let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
            if (Math.random() < 0.5) { // 50% de probabilidad de mejorar una habilidad
                mascota.habilidades[habilidadSubida].nivel += 1;

                await sock.sendMessage(msg.key.remoteJid, { 
                    text: `üåü *¬°${mascota.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${mascota.habilidades[habilidadSubida].nivel}*`
                }, { quoted: msg });
            }
        }

        // üìä **Actualizar y manejar Rangos**
        const rangosMascota = [
            { nivel: 1, rango: "üê£ Principiante" },
            { nivel: 10, rango: "üêæ Aprendiz" },
            { nivel: 20, rango: "ü¶¥ Experto" },
            { nivel: 30, rango: "üõ°Ô∏è Guardi√°n" },
            { nivel: 40, rango: "üê∫ Alfa" },
            { nivel: 50, rango: "üèÜ Leyenda" },
            { nivel: 60, rango: "üî• Divino" },
            { nivel: 70, rango: "üêâ M√≠tico" },
            { nivel: 80, rango: "üöÄ Tit√°n Supremo" }
        ];
        let rangoAnterior = mascota.rango;
        mascota.rango = rangosMascota.reduce((acc, curr) => (mascota.nivel >= curr.nivel ? curr.rango : acc), mascota.rango);

        if (mascota.rango !== rangoAnterior) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéñÔ∏è *¬°Tu mascota ${mascota.nombre} ha subido de rango a ${mascota.rango}!* üöÄ`
            }, { quoted: msg });
        }

        // üìÇ Guardar cambios
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

    } catch (error) {
        console.error("‚ùå Error en el comando .darcomida:", error);
    }
    break;
}
        
case 'nivelmascota': {
    try {
        // üìä Enviar reacci√≥n mientras se procesa el comando
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üìä", key: msg.key } // Emoji de estad√≠sticas üìä
        });

        // üìÇ Archivo JSON donde se guardan los datos del RPG
        const rpgFile = "./rpg.json";

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una mascota registrada.*\n\nüîπ Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte y obtener una mascota inicial.` 
            }, { quoted: msg });
        }

        // üì• Cargar los datos del RPG
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        let userId = msg.key.participant || msg.key.remoteJid;
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta en el gremio Azura Ultra.*\n\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene mascotas
        if (!usuario.mascotas || usuario.mascotas.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una mascota actualmente.*\n\nüîπ Usa \`${global.prefix}tiendamascotas\` para comprar una.` 
            }, { quoted: msg });
        }

        // üêæ Obtener la mascota actual (la primera en la lista)
        let mascota = usuario.mascotas[0];

        // Definir defaults para evitar valores undefined
        let experiencia = typeof mascota.experiencia === "number" ? mascota.experiencia : 0;
        let nivel = typeof mascota.nivel === "number" ? mascota.nivel : 1;
        let xpMax = typeof mascota.xpMax === "number" ? mascota.xpMax : 500;
        let xpFaltante = Math.max(0, xpMax - experiencia);

        // üìú Construcci√≥n del mensaje de estad√≠sticas
        let mensaje = `üìä *Estad√≠sticas de tu Mascota Principal* üìä\n\n`;
        mensaje += `üêæ *Nombre:* ${mascota.nombre}\n`;
        mensaje += `üéöÔ∏è *Nivel:* ${nivel} üÜô\n`;
        mensaje += `‚ù§Ô∏è *Vida:* ${mascota.vida || 100} HP\n`;
        mensaje += `‚ú® *Experiencia:* ${experiencia} / ${xpMax} XP\n`;
        mensaje += `üìä *Rango:* ${mascota.rango || "Principiante"}\n`;
        mensaje += `üìå *XP faltante para el siguiente nivel:* ${xpFaltante} XP\n\n`;

        mensaje += `üåü *Habilidades:*\n`;
        Object.entries(mascota.habilidades).forEach(([habilidad, datos]) => {
            let nivelSkill = (datos && datos.nivel) ? datos.nivel : 1;
            mensaje += `   üîπ ${habilidad} (Nivel ${nivelSkill})\n`;
        });

        // üì¢ Mensaje motivacional para seguir entrenando
        mensaje += `\nüöÄ *Sigue subiendo de nivel a tu mascota con estos comandos:* üîΩ\n`;
        mensaje += `   ü•§ \`${global.prefix}daragua\` | üçñ \`${global.prefix}darcomida\` | ‚ù§Ô∏è \`${global.prefix}darcari√±o\`\n`;
        mensaje += `   üö∂ \`${global.prefix}pasear\` | üéØ \`${global.prefix}cazar\` | üèãÔ∏è \`${global.prefix}entrenar\`\n`;
        mensaje += `   üåü \`${global.prefix}presumir\` | ü¶∏ \`${global.prefix}supermascota\`\n\n`;
        mensaje += `üî• ¬°Entrena a tu mascota y convi√©rtela en la m√°s fuerte del gremio! üí™üêæ\n`;

        // üì© Enviar mensaje con la imagen de la mascota
        await sock.sendMessage(msg.key.remoteJid, { 
            image: { url: mascota.imagen }, 
            caption: mensaje
        }, { quoted: msg });

        // ‚úÖ Confirmaci√≥n con reacci√≥n de √©xito
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } // Emoji de confirmaci√≥n ‚úÖ
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .nivelmascota:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ùå *Ocurri√≥ un error al obtener la informaci√≥n de tu mascota. Int√©ntalo de nuevo.*` 
        }, { quoted: msg });

        // ‚ùå Enviar reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } // Emoji de error ‚ùå
        });
    }
    break;
}

case 'daragua': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const cooldownTime = 5 * 60 * 1000; // 5 minutos de espera

        // üíß Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "üíß", key: msg.key } });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Los datos del RPG no est√°n disponibles.*" }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene mascota
        if (!usuario.mascotas || usuario.mascotas.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes ninguna mascota.*\nüìú Usa \`${global.prefix}tiendamascotas\` para comprar una.` 
            }, { quoted: msg });
        }

        let mascota = usuario.mascotas[0]; // Se asume que la primera mascota es la principal

        // üöë Verificar si la mascota tiene 0 de vida
        if (mascota.vida <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `üöë *¬°No puedes dar agua a tu mascota!*\n\nüî¥ *${mascota.nombre} tiene 0 de vida.*\nüìú Usa \`${global.prefix}curar\` para recuperarla.` 
            }, { quoted: msg });
        }

        // üïí Verificar cooldown
        let tiempoActual = Date.now();
        if (mascota.cooldowns?.daragua && tiempoActual - mascota.cooldowns.daragua < cooldownTime) {
            let tiempoRestante = ((mascota.cooldowns.daragua + cooldownTime - tiempoActual) / (60 * 1000)).toFixed(1);
            return sock.sendMessage(msg.key.remoteJid, { text: `‚è≥ *Debes esperar ${tiempoRestante} minutos antes de volver a usar este comando.*` }, { quoted: msg });
        }

        // üéñÔ∏è **Generar recompensas aleatorias**
        let diamantesGanados = Math.floor(Math.random() * (100 - 1 + 1)) + 1; // Entre 1 y 100
        let xpGanada = Math.floor(Math.random() * (1000 - 200 + 1)) + 200; // Entre 200 y 1000

        // üí∞ **Incrementar experiencia y diamantes**
        usuario.diamantes += diamantesGanados;
        mascota.experiencia += xpGanada;

        // ‚ù§Ô∏è Reducir vida aleatoriamente entre 5 y 20 puntos
        let vidaPerdida = Math.floor(Math.random() * (20 - 5 + 1)) + 5;
        mascota.vida = Math.max(0, mascota.vida - vidaPerdida);

        // üïí **Guardar cooldown**
        if (!mascota.cooldowns) mascota.cooldowns = {};
        mascota.cooldowns.daragua = tiempoActual;

        // üí¶ **Textos aleatorios personalizados con recompensas**
        const textos = [
            `üíß *${mascota.nombre} bebi√≥ agua fresca y se siente revitalizado.*  
üíé *${diamantesGanados} Diamantes ganados*  
‚ú® *${xpGanada} XP obtenidos*`,
            `üåä *Un trago de agua y ${mascota.nombre} est√° lleno de energ√≠a.*  
üíé *${diamantesGanados} Diamantes ganados*  
‚ú® *${xpGanada} XP obtenidos*`,
            `üèûÔ∏è *${mascota.nombre} se refresc√≥ con agua y est√° m√°s feliz que nunca.*  
üíé *${diamantesGanados} Diamantes ganados*  
‚ú® *${xpGanada} XP obtenidos*`,
            `üêæ *${mascota.nombre} disfrut√≥ de una buena hidrataci√≥n y ahora est√° m√°s activo.*  
üíé *${diamantesGanados} Diamantes ganados*  
‚ú® *${xpGanada} XP obtenidos*`
        ];

        // üì¢ **Enviar mensaje con XP y Diamantes**
        await sock.sendMessage(msg.key.remoteJid, { 
            text: textos[Math.floor(Math.random() * textos.length)] 
        }, { quoted: msg });

        // üåü **Incrementar niveles aleatorios en habilidades**
        let habilidades = Object.keys(mascota.habilidades);
        if (habilidades.length > 0) {
            let habilidadSubida = habilidades[Math.floor(Math.random() * habilidades.length)];
            if (Math.random() < 0.5) { // 50% de probabilidad de mejorar una habilidad
                mascota.habilidades[habilidadSubida].nivel += 1;

                await sock.sendMessage(msg.key.remoteJid, { 
                    text: `üåü *¬°${mascota.nombre} ha mejorado su habilidad!* üéØ\nüîπ *${habilidadSubida}: Nivel ${mascota.habilidades[habilidadSubida].nivel}*`
                }, { quoted: msg });
            }
        }

        // üìä **Actualizar y manejar Rangos**
        const rangosMascota = [
            { nivel: 1, rango: "üê£ Principiante" },
            { nivel: 10, rango: "üêæ Aprendiz" },
            { nivel: 20, rango: "ü¶¥ Experto" },
            { nivel: 30, rango: "üõ°Ô∏è Guardi√°n" },
            { nivel: 40, rango: "üê∫ Alfa" },
            { nivel: 50, rango: "üèÜ Leyenda" },
            { nivel: 60, rango: "üî• Divino" },
            { nivel: 70, rango: "üêâ M√≠tico" },
            { nivel: 80, rango: "üöÄ Tit√°n Supremo" }
        ];
        let rangoAnterior = mascota.rango;
        mascota.rango = rangosMascota.reduce((acc, curr) => (mascota.nivel >= curr.nivel ? curr.rango : acc), mascota.rango);

        if (mascota.rango !== rangoAnterior) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéñÔ∏è *¬°Tu mascota ${mascota.nombre} ha subido de rango a ${mascota.rango}!* üöÄ`
            }, { quoted: msg });
        }

        // üìä **Verificar si la mascota sube de nivel**
        let xpMaxActual = mascota.nivel === 1 ? 500 : mascota.nivel * 1200;
        while (mascota.experiencia >= xpMaxActual && mascota.nivel < 80) {
            mascota.experiencia -= xpMaxActual;
            mascota.nivel += 1;
            xpMaxActual = mascota.nivel * 1200;
            mascota.xpMax = xpMaxActual;

            await sock.sendMessage(msg.key.remoteJid, { 
                text: `üéâ *¬°Felicidades! Tu mascota ${mascota.nombre} ha subido de nivel.* üèÜ\nüêæ *Nuevo Nivel:* ${mascota.nivel}\n‚ú® *Experiencia:* ${mascota.experiencia} / ${xpMaxActual} XP`
            }, { quoted: msg });
        }

        // üìÇ Guardar cambios
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

    } catch (error) {
        console.error("‚ùå Error en el comando .daragua:", error);
    }
    break;
}
        
        
case 'hospital':
case 'hosp': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const costoCuracion = 500; // üí∞ Precio por curarse

        // üöë Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üè•", key: msg.key } 
        });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *Los datos del RPG no est√°n disponibles.*" 
            }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // ‚ùå Verificar si el usuario tiene suficientes diamantes para curarse
        if (usuario.diamantes < costoCuracion) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes suficientes diamantes para curarte.*\nüíé *Diamantes necesarios:* ${costoCuracion}\nüí∞ *Tu saldo actual:* ${usuario.diamantes} diamantes.` 
            }, { quoted: msg });
        }

        // ‚ùå Verificar si el usuario ya tiene la vida llena
        if (usuario.vida >= 100) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚öïÔ∏è *Tu vida ya est√° completa.*\n‚ù§Ô∏è *Vida actual:* ${usuario.vida} HP` 
            }, { quoted: msg });
        }

        // üè• Curar al usuario
        usuario.vida = 100; // Restaurar la vida a 100
        usuario.diamantes -= costoCuracion; // Cobrar el costo de curaci√≥n

        // üìÇ Guardar cambios en el archivo
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // üìú Mensaje de confirmaci√≥n
        let mensaje = `üè• *Has sido curado en el hospital.*\n\n`;
        mensaje += `‚ù§Ô∏è *Vida restaurada:* 100 HP\n`;
        mensaje += `üí∞ *Costo de la curaci√≥n:* ${costoCuracion} diamantes\n`;
        mensaje += `üíé *Diamantes restantes:* ${usuario.diamantes}\n\n`;
        mensaje += `ü©π *¬°Vuelve cuando necesites m√°s cuidados!*`;

        // üì© Enviar mensaje de confirmaci√≥n
        await sock.sendMessage(msg.key.remoteJid, { text: mensaje }, { quoted: msg });

    } catch (error) {
        console.error("‚ùå Error en el comando .hospital:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Hubo un error al intentar curarte. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });
    }
    break;
}
        
case 'retirar':
case 'ret': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;

        // üè¶ Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üí∞", key: msg.key } 
        });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *Los datos del RPG no est√°n disponibles.*" 
            }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // üî¢ Verificar si el usuario ingres√≥ una cantidad v√°lida
        let cantidad = parseInt(args[0]);
        if (isNaN(cantidad) || cantidad <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ö†Ô∏è *Uso incorrecto.*\nüìå Ejemplo: \`${global.prefix}ret 500\`\nüíé Retira diamantes del gremio.` 
            }, { quoted: msg });
        }

        // ‚ùå Verificar si el usuario tiene suficientes diamantes guardados
        if (usuario.diamantesGuardados < cantidad) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes suficientes diamantes en el gremio.*\nüè¶ *Diamantes guardados:* ${usuario.diamantesGuardados}` 
            }, { quoted: msg });
        }

        // üè¶ Retirar los diamantes
        usuario.diamantesGuardados -= cantidad;
        usuario.diamantes += cantidad;

        // üìÇ Guardar cambios en el archivo
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // üìú Mensaje de confirmaci√≥n
        let mensaje = `‚úÖ *Has retirado ${cantidad} diamantes del gremio.*\n\n`;
        mensaje += `üíé *Diamantes en inventario:* ${usuario.diamantes}\n`;
        mensaje += `üè¶ *Diamantes guardados en el gremio:* ${usuario.diamantesGuardados}\n`;
        mensaje += `\n‚ö†Ô∏è *Recuerda que los diamantes fuera del gremio pueden ser robados.*`;

        // üì© Enviar mensaje de confirmaci√≥n
        await sock.sendMessage(msg.key.remoteJid, { text: mensaje }, { quoted: msg });

    } catch (error) {
        console.error("‚ùå Error en el comando .retirar:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Hubo un error al retirar diamantes. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });
    }
    break;
}
        
case 'depositar':
case 'dep': {
    try {
        const fs = require("fs");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;

        // üè¶ Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üè¶", key: msg.key } 
        });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *Los datos del RPG no est√°n disponibles.*" 
            }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // üî¢ Verificar si el usuario ingres√≥ una cantidad v√°lida
        let cantidad = parseInt(args[0]);
        if (isNaN(cantidad) || cantidad <= 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ö†Ô∏è *Uso incorrecto.*\nüìå Ejemplo: \`${global.prefix}dep 500\`\nüíé Deposita diamantes en el gremio.` 
            }, { quoted: msg });
        }

        // ‚ùå Verificar si el usuario tiene suficientes diamantes
        if (usuario.diamantes < cantidad) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes suficientes diamantes para depositar.*\nüíé *Tus diamantes actuales:* ${usuario.diamantes}` 
            }, { quoted: msg });
        }

        // üè¶ Depositar los diamantes
        usuario.diamantes -= cantidad;
        usuario.diamantesGuardados = (usuario.diamantesGuardados || 0) + cantidad;

        // üìÇ Guardar cambios en el archivo
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // üìú Mensaje de confirmaci√≥n
        let mensaje = `‚úÖ *Has depositado ${cantidad} diamantes en el gremio.*\n\n`;
        mensaje += `üíé *Diamantes en inventario:* ${usuario.diamantes}\n`;
        mensaje += `üè¶ *Diamantes guardados en el gremio:* ${usuario.diamantesGuardados}\n`;
        mensaje += `\nüîí *Depositar protege tus diamantes de ser robados.*`;

        // üì© Enviar mensaje de confirmaci√≥n
        await sock.sendMessage(msg.key.remoteJid, { text: mensaje }, { quoted: msg });

    } catch (error) {
        console.error("‚ùå Error en el comando .depositar:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Hubo un error al depositar diamantes. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });
    }
    break;
}
        
case 'nivel': {
    try {
        const fs = require("fs");
        const axios = require("axios");
        const rpgFile = "./rpg.json";
        const userId = msg.key.participant || msg.key.remoteJid;
        const defaultImageUrl = "https://cdn.dorratz.com/files/1740822565780.jpg"; // Imagen por defecto

        // üìú Reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üìú", key: msg.key } 
        });

        // üìÇ Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *Los datos del RPG no est√°n disponibles.*" 
            }, { quoted: msg });
        }

        // üì• Cargar datos del usuario
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // ‚ùå Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
        }

        let usuario = rpgData.usuarios[userId];

        // üì∏ Obtener foto de perfil del usuario
        let profilePictureUrl;
        try {
            profilePictureUrl = await sock.profilePictureUrl(userId, "image");
        } catch {
            profilePictureUrl = defaultImageUrl; // Usa imagen por defecto si no tiene foto de perfil
        }

        // üèÖ Rango basado en nivel
        const rangos = [
            { nivel: 1, rango: "üåü Novato" },
            { nivel: 5, rango: "‚öîÔ∏è Guerrero Novato" },
            { nivel: 10, rango: "üî• Maestro Combatiente" },
            { nivel: 20, rango: "üëë √âlite Supremo" },
            { nivel: 30, rango: "üåÄ Legendario" },
            { nivel: 40, rango: "üíÄ Dios de la Guerra" },
            { nivel: 50, rango: "üöÄ Tit√°n Supremo" }
        ];
        let nuevoRango = rangos.reduce((acc, curr) => (usuario.nivel >= curr.nivel ? curr.rango : acc), usuario.rango);
        usuario.rango = nuevoRango;

        // üìä Construir mensaje de estad√≠sticas
        let mensaje = `üéñÔ∏è *Estad√≠sticas de ${usuario.nombre}*\n\n`;
        mensaje += `üèÖ *Rango:* ${usuario.rango}\n`;
        mensaje += `üéö *Nivel:* ${usuario.nivel}\n`;
        mensaje += `‚ù§Ô∏è *Vida:* ${usuario.vida} HP\n`;
        mensaje += `‚ú® *XP:* ${usuario.experiencia} / ${(usuario.nivel * 1500)} XP\n\n`;

        mensaje += `üåü *Habilidades:*\n`;
        Object.entries(usuario.habilidades).forEach(([habilidad, data]) => {
            mensaje += `   üîπ ${habilidad}: Nivel ${data.nivel}\n`;
        });

        mensaje += `\nüí™ *Comandos para mejorar tu nivel y habilidades:*  
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  
‚õèÔ∏è *Recolecci√≥n y Trabajo:*  
üîπ \`${global.prefix}picar\`, \`${global.prefix}minar\`, \`${global.prefix}minar2\`, \`${global.prefix}work\`  
üéÅ *Recompensas y robos:*  
üîπ \`${global.prefix}claim\`, \`${global.prefix}cofre\`, \`${global.prefix}crime\`, \`${global.prefix}robar\`  

‚öîÔ∏è *Batallas y R√°nkings:*  
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  
üÜö *Lucha contra otros usuarios:*  
üîπ Usa \`${global.prefix}batallauser\` para desafiar a alguien.  

üèÜ *Consulta el ranking global:*  
üîπ Usa \`${global.prefix}topuser\` para ver el top de jugadores.  

üí∞ *Gesti√≥n de Diamantes:*  
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  
üè¶ *Guarda diamantes:*  
üîπ \`${global.prefix}depositar <cantidad>\`  
üíé *Retira diamantes:*  
üîπ \`${global.prefix}retirar <cantidad>\`  

üöë *Cuidado de tu personaje:*  
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  
‚ù§Ô∏è *Cura tu vida:*  
üîπ \`${global.prefix}hospital\`  
üêâ *Revive con las Bolas del Drag√≥n:*  
üîπ \`${global.prefix}bolasdeldragon\`  

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  
‚ö° *Sigue entrenando para convertirte en una leyenda.*  
`;

        // üì© Enviar mensaje con imagen de perfil
        await sock.sendMessage(msg.key.remoteJid, { 
            image: { url: profilePictureUrl },
            caption: mensaje
        }, { quoted: msg });

    } catch (error) {
        console.error("‚ùå Error en el comando .nivel:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Hubo un error al obtener tu nivel. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });
    }
    break;
}
        
        
case 'visi√≥n': {
    try {
        // üîÑ Reacci√≥n antes de procesar el comando
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: 'üé®', key: msg.key } // Reacci√≥n de pincel antes de generar la imagen
        });

        // Aseg√∫rate de tener la variable 'text' disponible aqu√≠. 
        // Si tu framework o tu c√≥digo define 'text' en otro lado, no olvides 
        // que tienes que capturar el valor que viene despu√©s de "visi√≥n".
        const query = (text || "").trim();

        // Si no hay contenido en 'query', muestra ejemplo y no genera imagen
        if (!query) {
            return sock.sendMessage(
                msg.key.remoteJid,
                {
                    text: `‚ö†Ô∏è *Uso incorrecto del comando.*\n` +
                          `üìå Ejemplo: \`${global.prefix}visi√≥n un gato en el espacio\`\n\n` +
                          `üîπ *Escribe una descripci√≥n para generar una imagen personalizada.*`
                },
                { quoted: msg }
            );
        }

        // Menci√≥n que no falle en chats privados
        const participant = msg.key.participant || msg.key.remoteJid;
        const userMention = '@' + participant.replace(/[^0-9]/g, '');

        const apiUrl = `https://api.dorratz.com/v3/ai-image?prompt=${encodeURIComponent(query)}`;

        // üîÑ Reacci√≥n de carga mientras procesa
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: 'üîÑ', key: msg.key } 
        });

        // Llamada a la API
        const response = await axios.get(apiUrl);

        // Validaci√≥n b√°sica de la respuesta
        if (
          !response.data || 
          !response.data.data || 
          !response.data.data.image_link
        ) {
            return sock.sendMessage(
                msg.key.remoteJid,
                { text: "‚ùå No se pudo generar la imagen. Intenta con otro texto." },
                { quoted: msg }
            );
        }

        // URL de la imagen generada
        const imageUrl = response.data.data.image_link;

        // Enviar imagen
        await sock.sendMessage(
            msg.key.remoteJid,
            {
                image: { url: imageUrl },
                caption: `üñºÔ∏è *Imagen generada para:* ${userMention}\n` +
                         `üìå *Descripci√≥n:* ${query}\n\n` +
                         `üçß API utilizada: https://api.dorratz.com\n` +
                         `¬© Azura Ultra 2.0 Bot`,
                mentions: [participant] // Menciona al usuario (o al bot mismo si fuera el caso)
            },
            { quoted: msg }
        );

        // ‚úÖ Reacci√≥n de √©xito
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: '‚úÖ', key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en .visi√≥n:", error);
        await sock.sendMessage(
            msg.key.remoteJid, 
            { text: "‚ùå Error al generar la imagen. Intenta de nuevo." },
            { quoted: msg }
        );

        // ‚ùå Reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } 
        });
    }
    break;
}

        
case 'pixai': {
    try {
        // üîÑ Reacci√≥n antes de procesar el comando
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: 'üé®', key: msg.key } // Reacci√≥n de pincel antes de generar la imagen
        });

        // Ajuste: verifica si "args" existe y si tiene longitud
        if (!text) {
            return sock.sendMessage(
                msg.key.remoteJid,
                {
                    text: `‚ö†Ô∏è *Uso incorrecto del comando.*\nüìå Ejemplo: \`${global.prefix}pixai chica anime estilo studio ghibli\`\n\nüîπ *Escribe una descripci√≥n para generar una imagen personalizada.*`
                },
                { quoted: msg }
            );
        }

        // Aseguramos la menci√≥n incluso en privado
        const participant = msg.key.participant || msg.key.remoteJid;
        const userMention = `@${participant.replace(/[^0-9]/g, '')}`; // Extrae el n√∫mero

        // Si quieres que se auto-mencione cuando el bot sea el emisor, podr√≠as usar:
        // if (participant === sock.user.jid) {
        //     // L√≥gica adicional si el mensaje proviene del bot
        // }

        const prompt = `${text}`
        const apiUrl = `https://api.dorratz.com/v2/pix-ai?prompt=${encodeURIComponent(prompt)}`;

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: 'üîÑ', key: msg.key } // Reacci√≥n de carga mientras procesa
        });

        const response = await fetch(apiUrl);
        if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);

        const { images } = await response.json();
        if (!images?.length) {
            return sock.sendMessage(
                msg.key.remoteJid,
                { text: "‚ùå *No se encontraron resultados.* Intenta con otra descripci√≥n." },
                { quoted: msg }
            );
        }

        for (const imageUrl of images.slice(0, 4)) {
            await sock.sendMessage(
                msg.key.remoteJid,
                {
                    image: { url: imageUrl },
                    caption: `üé® *Imagen generada para:* ${userMention}\nüìå *Descripci√≥n:* ${prompt}\n\nüçß API utilizada: https://api.dorratz.com\n¬© Azura Ultra 2.0 Bot`,
                    mentions: [participant] // Menciona al usuario (o bot si es el emisor)
                },
                { quoted: msg }
            );
        }

        // ‚úÖ Reacci√≥n de √©xito
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚úÖ", key: msg.key }
        });

    } catch (error) {
        console.error("‚ùå Error en .pixai:", error);
        await sock.sendMessage(
            msg.key.remoteJid,
            { text: `‚ùå Fallo al generar im√°genes. Error: ${error.message}` },
            { quoted: msg }
        );

        // ‚ùå Reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚ùå", key: msg.key }
        });
    }
    break;
}
            
        
case 'verdad': {
    try {
        // üîÑ Reacci√≥n antes de procesar el comando
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "üßê", key: msg.key } // Reacci√≥n de pensamiento antes de enviar la respuesta
        });

        const verdad = pickRandom(global.verdad); // Selecciona una verdad aleatoria

        await sock.sendMessage(msg.key.remoteJid, {
            image: { url: 'https://cdn.dorratz.com/files/1740781671173.jpg' },
            caption: `ùòèùò¢ùò¥ ùò¶ùò¥ùò§ùò∞ùò®ùò™ùò•ùò∞ *ùòùùòåùòôùòãùòàùòã*\n\n‚ï±‚ï≤‚ùÄ‚ï±‚ï≤‚ï±‚ï≤‚ùÄ‚ï±‚ï≤‚ï±‚ï≤‚ùÄ‚ï±‚ï≤\n‚óÜ ${verdad}\n‚ï≤‚ï±‚ùÄ‚ï≤‚ï±‚ï≤‚ï±‚ùÄ‚ï≤‚ï±‚ï≤‚ï±‚ùÄ‚ï≤‚ï±\n\n¬© Azura Ultra & Cortana`
        }, { quoted: msg });

        // ‚úÖ Reacci√≥n de √©xito
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚úÖ", key: msg.key }
        });

    } catch (e) {
        console.error("‚ùå Error en el comando .verdad:", e);
        await sock.sendMessage(msg.key.remoteJid, {
            text: "‚ùå *Hubo un error al enviar la verdad. Int√©ntalo de nuevo.*"
        }, { quoted: msg });

        // ‚ùå Reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚ùå", key: msg.key }
        });
    }
    break;
}

case 'reto': {
    try {
        const reto = pickRandom(global.reto); // Selecciona un reto aleatorio

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "üé≤", key: msg.key } // Reacci√≥n al usar el comando
        });

        await sock.sendMessage(msg.key.remoteJid, {
            image: { url: 'https://cdn.dorratz.com/files/1740781675920.jpg' },
            caption: `ùòèùò¢ùò¥ ùò¶ùò¥ùò§ùò∞ùò®ùò™ùò•ùò∞ *ùòôùòåùòõùòñ*\n\n‚ï±‚ï≤‚ùÄ‚ï±‚ï≤‚ï±‚ï≤‚ùÄ‚ï±‚ï≤‚ï±‚ï≤‚ùÄ‚ï±‚ï≤\n‚óÜ ${reto}\n‚ï≤‚ï±‚ùÄ‚ï≤‚ï±‚ï≤‚ï±‚ùÄ‚ï≤‚ï±‚ï≤‚ï±‚ùÄ‚ï≤‚ï±\n\n¬© Azura Ultra & Cortana`
        }, { quoted: msg });

    } catch (e) {
        console.error("‚ùå Error en el comando .reto:", e);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Hubo un error al enviar el reto. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚ùå", key: msg.key } // Reacci√≥n de error
        });
    }
    break;
}            
            
            
case 'tts': {
    try {
        // 1) Env√≠a primero la reacci√≥n (üó£Ô∏è) indicando que se empieza a procesar
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "üó£Ô∏è", key: msg.key },
        });

        // 2) Obtiene el texto:
        //    - Directamente de 'text'
        //    - O del mensaje citado (si no hay 'text')
        let textToSay = (text || "").trim();
        if (!textToSay && msg.message.extendedTextMessage?.contextInfo?.quotedMessage) {
            textToSay = msg.message.extendedTextMessage.contextInfo.quotedMessage.conversation || "";
            textToSay = textToSay.trim();
        }

        // 3) Verifica si al final s√≠ hay algo de texto
        if (!textToSay) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: "Por favor, proporciona un texto o cita un mensaje para convertir a voz."
            }, { quoted: msg });
            return;
        }

        // 4) Indica que est√° "grabando" (opcional, para mostrar un indicador)
        await sock.sendPresenceUpdate('recording', msg.key.remoteJid);

        // 5) Usa google-tts-api para obtener la URL del audio
        const SpeakEngine = require("google-tts-api");
        const textToSpeechUrl = SpeakEngine.getAudioUrl(textToSay, {
            lang: "es",
            slow: false,
            host: "https://translate.google.com",
        });

        // 6) Env√≠a el audio como nota de voz
        await sock.sendMessage(msg.key.remoteJid, {
            audio: { url: textToSpeechUrl },
            ptt: true,
            mimetype: 'audio/mpeg',
            fileName: `tts.mp3`,
        }, { quoted: msg });

    } catch (error) {
        console.error("‚ùå Error en el comando .tts:", error);
        await sock.sendMessage(msg.key.remoteJid, {
            text: "‚ùå Ocurri√≥ un error al procesar la conversi√≥n a voz."
        }, { quoted: msg });
    }
    break;
}

case 'meme':
case 'memes': {
    try {
        const hispamemes = require("hispamemes");
        const meme = hispamemes.meme();

        // üîÑ Reacci√≥n antes de enviar el meme
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üòÜ", key: msg.key } 
        });

        await sock.sendMessage(msg.key.remoteJid, {
            image: { url: meme },
            caption: "ü§£ *¬°Aqu√≠ tienes un meme!*\n\n¬© Azura Ultra & Cortana"
        }, { quoted: msg });

    } catch (e) {
        console.error("‚ùå Error en el comando .memes:", e);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Hubo un error al obtener el meme. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });
    }
    break;
}

            

case 'hd': {
    try {
        const FormData = require("form-data");

        let quoted = msg.message.extendedTextMessage?.contextInfo?.quotedMessage;
        if (!quoted) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ö†Ô∏è *Responde a una imagen con el comando `.hd` para mejorarla.*" 
            }, { quoted: msg });
        }

        let mime = quoted.imageMessage?.mimetype || "";
        if (!mime) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ö†Ô∏è *El mensaje citado no contiene una imagen.*" 
            }, { quoted: msg });
        }

        if (!/image\/(jpe?g|png)/.test(mime)) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ö†Ô∏è *Solo se admiten im√°genes en formato JPG o PNG.*" 
            }, { quoted: msg });
        }

        // üõ†Ô∏è Reacci√≥n de proceso
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üõ†Ô∏è", key: msg.key } 
        });

        let img = await downloadContentFromMessage(quoted.imageMessage, "image");
        let buffer = Buffer.alloc(0);
        for await (const chunk of img) {
            buffer = Buffer.concat([buffer, chunk]);
        }

        if (buffer.length === 0) {
            throw new Error("‚ùå Error: No se pudo descargar la imagen.");
        }

        // üìå Procesar imagen mejorada
        let pr = await remini(buffer, "enhance");

        // üì§ Enviar imagen con la marca de agua en el texto
        await sock.sendMessage(msg.key.remoteJid, {
            image: pr,
            caption: "‚ú® *Imagen mejorada con √©xito.*\n\n¬© Azura Ultra 2.0 Bot"
        }, { quoted: msg });

        // ‚úÖ Reacci√≥n de √©xito
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (e) {
        console.error("‚ùå Error en el comando .hd:", e);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Hubo un error al mejorar la imagen. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });

        // ‚ùå Reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } 
        });
    }
    break;
}
case 'imagen': {
    const fetch = require('node-fetch');

    if (!args.length) {
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ö†Ô∏è *Uso incorrecto.*\nüìå Ejemplo: \`${global.prefix}imagen gatos\`` 
        }, { quoted: msg });
        return;
    }

    const query = args.join(" ");
    const apiUrl = `https://api.neoxr.eu/api/goimg?q=${encodeURIComponent(query)}&apikey=russellxz`;

    await sock.sendMessage(msg.key.remoteJid, { 
        react: { text: "‚è≥", key: msg.key } 
    });

    try {
        const response = await fetch(apiUrl);

        if (!response.ok) {
            throw new Error(`Error de la API: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();

        if (!data.status || !data.data || data.data.length === 0) {
            throw new Error("No se encontraron im√°genes.");
        }

        const image = data.data[0]; // Tomar la primera imagen de la lista

        await sock.sendMessage(msg.key.remoteJid, { 
            image: { url: image.url },
            caption: `üñºÔ∏è *Imagen de:* ${query}\n\nüîó *Fuente:* ${image.origin.website.url}`,
            mimetype: 'image/jpeg'
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .imagen:", error.message);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ùå *Error al obtener la imagen:*\n_${error.message}_\n\nüîπ Int√©ntalo m√°s tarde.` 
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } 
        });
    }
    break;
}

case 'apk': {
    const fetch = require('node-fetch');

    if (!args.length) {
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ö†Ô∏è *Uso incorrecto.*\nüìå Ejemplo: \`${global.prefix}apk whatsapp\`` 
        }, { quoted: msg });
        return;
    }

    const query = args.join(" ");
    const apiUrl = `https://api.neoxr.eu/api/apk?q=${encodeURIComponent(query)}&no=1&apikey=russellxz`;

    await sock.sendMessage(msg.key.remoteJid, { 
        react: { text: "‚è≥", key: msg.key } 
    });

    try {
        const response = await fetch(apiUrl);

        if (!response.ok) {
            throw new Error(`Error de la API: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();

        if (!data.status || !data.data || !data.file || !data.file.url) {
            throw new Error("No se pudo obtener informaci√≥n del APK.");
        }

        const apkInfo = data.data;
        const apkFile = data.file;

        const fileResponse = await fetch(apkFile.url);
        if (!fileResponse.ok) {
            throw new Error("No se pudo descargar el archivo APK.");
        }

        const fileBuffer = await fileResponse.buffer();

        const caption = `üì± *Nombre:* ${apkInfo.name}\n` +
                        `üì¶ *Tama√±o:* ${apkInfo.size}\n` +
                        `‚≠ê *Rating:* ${apkInfo.rating}\n` +
                        `üì• *Instalaciones:* ${apkInfo.installs}\n` +
                        `üë®‚Äçüíª *Desarrollador:* ${apkInfo.developer}\n` +
                        `üìÇ *Categor√≠a:* ${apkInfo.category}\n` +
                        `üîÑ *Versi√≥n:* ${apkInfo.version}\n` +
                        `üìÖ *Actualizado:* ${apkInfo.updated}\n` +
                        `üìã *Requisitos:* ${apkInfo.requirements}\n` +
                        `üîó *ID:* ${apkInfo.id}`;

        await sock.sendMessage(msg.key.remoteJid, { 
            image: { url: apkInfo.thumbnail },
            caption: caption,
            mimetype: 'image/jpeg'
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, {
            document: fileBuffer,
            mimetype: 'application/vnd.android.package-archive',
            fileName: apkFile.filename
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .apk:", error.message);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ùå *Error al procesar la solicitud:*\n_${error.message}_\n\nüîπ Int√©ntalo m√°s tarde.` 
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } 
        });
    }
    break;
}
case 'chatgpt':
case 'ia': {
    const fetch = require('node-fetch');

    if (!args.length) {
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ö†Ô∏è *Uso incorrecto.*\nüìå Ejemplo: \`${global.prefix}chatgpt Hola, ¬øc√≥mo est√°s?\`` 
        }, { quoted: msg });
        return;
    }

    const query = args.join(" ");
    const apiUrl = `https://api.neoxr.eu/api/gpt4-session?q=${encodeURIComponent(query)}&session=1727468410446638&apikey=russellxz`;
    const userId = msg.key.participant || msg.key.remoteJid;

    await sock.sendMessage(msg.key.remoteJid, { 
        react: { text: "ü§ñ", key: msg.key } 
    });

    try {
        const response = await fetch(apiUrl);

        if (!response.ok) {
            throw new Error(`Error de la API: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();

        if (!data.status || !data.data || !data.data.message) {
            throw new Error("No se pudo obtener una respuesta de GPT-4.");
        }

        const respuestaGPT4 = data.data.message;

        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ú® *GPT-4 responde a @${userId.replace("@s.whatsapp.net", "")}:*\n\n${respuestaGPT4}\n\nüîπ *Powered by Azura Ultra & Cortana* ü§ñ`,
            mentions: [userId] 
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .chatgpt:", error.message);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ùå *Error al obtener respuesta de GPT-4:*\n_${error.message}_\n\nüîπ Int√©ntalo m√°s tarde.` 
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } 
        });
    }
    break;
}
         
      case 'toaudio':
case 'tomp3': {
    try {
        let quoted = msg.message.extendedTextMessage?.contextInfo?.quotedMessage;
        if (!quoted) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ö†Ô∏è *Responde a un video o audio con el comando `.toaudio` para convertirlo a MP3.*" 
            }, { quoted: msg });
        }

        let mediaType = quoted.videoMessage ? "video" : quoted.audioMessage ? "audio" : null;
        if (!mediaType) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ö†Ô∏è *Solo puedes convertir videos o audios a MP3.*" 
            }, { quoted: msg });
        }

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üõ†Ô∏è", key: msg.key } 
        });

        let mediaStream = await downloadContentFromMessage(quoted[`${mediaType}Message`], mediaType);
        let buffer = Buffer.alloc(0);
        for await (const chunk of mediaStream) {
            buffer = Buffer.concat([buffer, chunk]);
        }

        if (buffer.length === 0) {
            throw new Error("‚ùå Error: No se pudo descargar el archivo.");
        }

        const { toAudio } = require('./libs/converter.js');
        const audio = await toAudio(buffer, 'mp4');

        await sock.sendMessage(msg.key.remoteJid, {
            audio: audio,
            mimetype: 'audio/mpeg',
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .toaudio:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Hubo un error al convertir el contenido a MP3. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });
    }
    break;
}


        
case 'geminis':
case 'gemini': {
    const fetch = require('node-fetch');

    if (!args.length) {
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ö†Ô∏è *Uso incorrecto.*\nüìå Ejemplo: \`${global.prefix}geminis ¬øCu√°l es la capital de Jap√≥n?\`` 
        }, { quoted: msg });
        return;
    }

    let pregunta = args.join(" ");
    const geminiUrl = `https://api.dorratz.com/ai/gemini?prompt=${encodeURIComponent(pregunta)}`;
    let userId = msg.key.participant || msg.key.remoteJid; // Obtener ID del usuario

    await sock.sendMessage(msg.key.remoteJid, { 
        react: { text: "ü§ñ", key: msg.key } 
    });

    try {
        const response = await fetch(geminiUrl);

        if (!response.ok) {
            throw new Error(`Error de la API: ${response.status} ${response.statusText}`);
        }

        const json = await response.json();

        if (!json || !json.message || json.message.trim() === "") {
            throw new Error("Respuesta vac√≠a de Gemini.");
        }

        let respuestaGemini = json.message.trim();

        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ú® *Respuesta de Gemini para @${userId.replace("@s.whatsapp.net", "")}:*\n\n${respuestaGemini}\n\nüîπ *Powered by Azura Ultra 2.0 Bot* ü§ñ`,
            mentions: [userId] // Menciona al usuario en la respuesta
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .geminis:", error.message);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ùå *Error al obtener respuesta de Gemini:*\n_${error.message}_\n\nüîπ Int√©ntalo m√°s tarde.` 
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } 
        });
    }
    break;
}


case 'simi':
case 'simisimi': {
    const fetch = require('node-fetch');

    if (!args.length) {
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ö†Ô∏è *Uso incorrecto.*\nüìå Ejemplo: \`${global.prefix}simi Hola, ¬øc√≥mo est√°s?\`` 
        }, { quoted: msg });
        return;
    }

    const query = args.join(" ");
    const apiUrl = `https://exonity.tech/api/ai/simi?query=${encodeURIComponent(query)}&lang=es&apikey=${zrapi}`;
    const userId = msg.key.participant || msg.key.remoteJid; // Obtener ID del usuario

    await sock.sendMessage(msg.key.remoteJid, { 
        react: { text: "ü§ñ", key: msg.key } 
    });

    try {
        const response = await fetch(apiUrl);

        if (!response.ok) {
            throw new Error(`Error de la API: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();

        if (data.status !== 200 || !data.result) {
            throw new Error("No se pudo obtener una respuesta de Simi Simi.");
        }

        const respuestaSimi = data.result;

        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ú® *Simi Simi responde a @${userId.replace("@s.whatsapp.net", "")}:*\n\n${respuestaSimi}\n\nüîπ *Powered by Azura Ultra 2.0 Bot* ü§ñ`,
            mentions: [userId] // Menciona al usuario en la respuesta
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .simi:", error.message);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ùå *Error al obtener respuesta de Simi Simi:*\n_${error.message}_\n\nüîπ Int√©ntalo m√°s tarde.` 
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } 
        });
    }
    break;
}       
case 'topuser': {
    try {
        const rpgFile = "./rpg.json";

        // üîÑ Enviar una √∫nica reacci√≥n antes de procesar
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üìä", key: msg.key } // Emoji de estad√≠stica üìä
        });

        // Verificar si el archivo RPG existe
        if (!fs.existsSync(rpgFile)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *El gremio a√∫n no tiene miembros registrados.* Usa `.rpg <nombre> <edad>` para unirte." 
            }, { quoted: msg });
            return;
        }

        // Cargar datos del gremio
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        if (!rpgData.usuarios || Object.keys(rpgData.usuarios).length === 0) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "üìú *No hay miembros registrados en el Gremio Azura Ultra.*" 
            }, { quoted: msg });
            return;
        }

        let usuarios = Object.entries(rpgData.usuarios);

        // Ordenar por nivel de mayor a menor
        usuarios.sort((a, b) => b[1].nivel - a[1].nivel);

        let ranking = `üèÜ *Ranking de Jugadores del Gremio Azura Ultra* üèÜ\n\n`;
        let mentions = [];

        usuarios.forEach(([userId, usuario], index) => {
            let posicion = index + 1;
            let medalla = posicion === 1 ? "ü•á" : posicion === 2 ? "ü•à" : posicion === 3 ? "ü•â" : "üîπ";
            let cantidadPersonajes = usuario.personajes ? usuario.personajes.length : 0;
            let cantidadMascotas = usuario.mascotas ? usuario.mascotas.length : 0;

            ranking += `${medalla} *${posicion}.* @${userId.replace("@s.whatsapp.net", "")}  
   üèÖ *Rango:* ${usuario.rango}  
   üéöÔ∏è *Nivel:* ${usuario.nivel}  
   üé≠ *Personajes:* ${cantidadPersonajes}  
   üêæ *Mascotas:* ${cantidadMascotas}\n\n`;
            mentions.push(userId);
        });

        ranking += `üî• ¬°Sigue entrenando para subir en el ranking!`;

        // Enviar el mensaje con imagen üì©
        await sock.sendMessage(msg.key.remoteJid, { 
            image: { url: "https://cdn.dorratz.com/files/1740729353375.jpg" },
            caption: ranking,
            mentions: mentions // Mencionar a todos los jugadores
        }, { quoted: msg });

    } catch (error) {
        console.error("‚ùå Error en el comando .topuser:", error);

        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Hubo un error al obtener el ranking de jugadores. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });
    }
    break;
}

        
case 'comprar2': {
    try {
        // üîÑ Reacci√≥n de proceso
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "üõí", key: msg.key }
        });

        // Verificamos que el usuario haya introducido algo en "text"
        const inputRaw = (text || "").trim();
        if (!inputRaw) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: `‚ö†Ô∏è *Uso incorrecto.*\nEjemplo: \`${global.prefix}comprar2 <nombre_personaje>\``
            }, { quoted: msg });
            return;
        }

        // üîç Limpiar el nombre del personaje (ignora emojis, may√∫sculas, min√∫sculas y caracteres especiales)
        let nombrePersonaje = inputRaw
            .toLowerCase()
            .replace(/[^a-zA-Z0-9_]/g, "");

        let compradorId = msg.key.participant || msg.key.remoteJid;
        const rpgFile = "./rpg.json";

        // üìÇ Cargar datos del RPG
        let rpgData = fs.existsSync(rpgFile)
            ? JSON.parse(fs.readFileSync(rpgFile, "utf-8"))
            : { usuarios: {}, mercadoPersonajes: [] };

        // ‚ùå Verificar si el comprador tiene cuenta
        if (!rpgData.usuarios[compradorId]) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: `‚ùå *No tienes una cuenta registrada en el gremio.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.`
            }, { quoted: msg });
            return;
        }

        let comprador = rpgData.usuarios[compradorId];

        // üîé Buscar el personaje en la tienda de venta
        let indexPersonaje = rpgData.mercadoPersonajes.findIndex(p =>
            p.nombre.toLowerCase().replace(/[^a-zA-Z0-9_]/g, "") === nombrePersonaje
        );

        // ‚ùå Si el personaje no est√° en venta
        if (indexPersonaje === -1) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: `‚ùå *Este personaje no est√° en venta o no existe.*\nüìú Usa \`${global.prefix}alaventa\` para ver la lista de personajes en venta.`
            }, { quoted: msg });
            return;
        }

        // üì¶ Obtener los datos del personaje en venta
        let personajeComprado = rpgData.mercadoPersonajes[indexPersonaje];

        // ‚ùå Evitar que el usuario compre su propio personaje
        if (personajeComprado.vendedor === compradorId) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: `‚ùå *No puedes comprar tu propio personaje en venta.*`
            }, { quoted: msg });
            return;
        }

        // ‚ùå Verificar si el usuario tiene suficientes diamantes
        if (comprador.diamantes < personajeComprado.precio) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: `‚ùå *No tienes suficientes diamantes para comprar a ${personajeComprado.nombre}.*\nüíé *Diamantes requeridos:* ${personajeComprado.precio}\nüí∞ *Tu saldo:* ${comprador.diamantes}`
            }, { quoted: msg });
            return;
        }

        // üíé Descontar diamantes al comprador
        comprador.diamantes -= personajeComprado.precio;

        // üí∞ Transferir pago al vendedor (si existe en la base de datos)
        if (rpgData.usuarios[personajeComprado.vendedor]) {
            rpgData.usuarios[personajeComprado.vendedor].diamantes += personajeComprado.precio;
        }

        // üìú Transferir personaje al comprador
        delete personajeComprado.vendedor;  // Eliminar vendedor de los datos
        personajeComprado.precio = personajeComprado.precioOriginal;  // Restaurar precio original

        if (!comprador.personajes) {
            comprador.personajes = [];
        }
        comprador.personajes.push(personajeComprado);

        // ‚ùå Eliminar personaje del mercado
        rpgData.mercadoPersonajes.splice(indexPersonaje, 1);

        // Guardar cambios
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // üìú Construcci√≥n del mensaje con habilidades bien formateadas
        let habilidadesPersonaje = Object.entries(personajeComprado.habilidades)
            .map(([habilidad, nivel]) => `   üîπ ${habilidad} (Nivel ${nivel})`)
            .join("\n");

        // üì¢ Mensaje de confirmaci√≥n con imagen
        let mensaje = `üé≠ *¬°Has comprado un nuevo personaje del mercado!* üé≠\n\n`;
        mensaje += `üîπ *Nombre:* ${personajeComprado.nombre}\n`;
        mensaje += `üèÖ *Rango:* ${personajeComprado.rango}\n`;
        mensaje += `üéöÔ∏è *Nivel:* ${personajeComprado.nivel}\n`;
        mensaje += `‚ù§Ô∏è *Vida:* ${personajeComprado.vida} HP\n`;
        mensaje += `‚ú® *Experiencia:* ${personajeComprado.experiencia} / ${personajeComprado.xpMax} XP\n`;
        mensaje += `üåü *Habilidades:*\n${habilidadesPersonaje}\n`;
        mensaje += `üíé *Costo:* ${personajeComprado.precio} diamantes\n\n`;
        mensaje += `üìú Usa \`${global.prefix}verper\` para ver tu lista de personajes.\n`;

        await sock.sendMessage(msg.key.remoteJid, {
            image: { url: personajeComprado.imagen },
            caption: mensaje
        }, { quoted: msg });

        // ‚úÖ Confirmaci√≥n con reacci√≥n
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚úÖ", key: msg.key }
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .comprar2:", error);
        await sock.sendMessage(msg.key.remoteJid, {
            text: "‚ùå *Ocurri√≥ un error al comprar el personaje. Int√©ntalo de nuevo.*"
        }, { quoted: msg });

        // ‚ùå Reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚ùå", key: msg.key }
        });
    }
    break;
}

        
        
case 'vender': {
    try {
        // üîÑ Enviar reacci√≥n mientras se procesa el comando
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üí∞", key: msg.key } // Emoji de venta üí∞
        });

        // Verificar que el usuario ingres√≥ los par√°metros correctos
        if (args.length < 2) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ö†Ô∏è *Uso incorrecto.*\nEjemplo: \`${global.prefix}vender <nombre_personaje> <precio>\`` 
            }, { quoted: msg });
            return;
        }

        let nombrePersonaje = args.slice(0, -1).join("_").toLowerCase().replace(/[^a-zA-Z0-9_]/g, ""); // Limpiar emojis y caracteres especiales
        let precioVenta = parseInt(args[args.length - 1]);
        let userId = msg.key.participant || msg.key.remoteJid;

        if (isNaN(precioVenta) || precioVenta <= 0) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *El precio debe ser un n√∫mero v√°lido mayor a 0.*" 
            }, { quoted: msg });
            return;
        }

        const rpgFile = "./rpg.json";
        let rpgData = fs.existsSync(rpgFile) ? JSON.parse(fs.readFileSync(rpgFile, "utf-8")) : { usuarios: {}, mercadoPersonajes: [] };

        if (!rpgData.usuarios[userId]) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta registrada.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
            return;
        }

        let usuario = rpgData.usuarios[userId];
        let indexPersonaje = usuario.personajes.findIndex(p => p.nombre.toLowerCase().replace(/[^a-zA-Z0-9_]/g, "") === nombrePersonaje);

        if (indexPersonaje === -1) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes ese personaje en tu cartera.*\nüìú Usa \`${global.prefix}verper\` para ver tu lista de personajes.` 
            }, { quoted: msg });
            return;
        }

        let personajeVendido = usuario.personajes.splice(indexPersonaje, 1)[0];
        personajeVendido.precioOriginal = personajeVendido.precio; // Guardar precio original
        personajeVendido.precio = precioVenta; // Precio de venta
        personajeVendido.vendedor = userId; // Guardar el ID del vendedor

        rpgData.mercadoPersonajes.push(personajeVendido);
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // Construcci√≥n del mensaje de venta
        let habilidadesPersonaje = Object.entries(personajeVendido.habilidades)
            .map(([habilidad, nivel]) => `   üîπ ${habilidad} (Nivel ${nivel})`)
            .join("\n");

        let mensajeVenta = `üí∞ *¬°Has puesto a la venta un personaje!* üí∞\n\n`;
        mensajeVenta += `üé≠ *Personaje:* ${personajeVendido.nombre}\n`;
        mensajeVenta += `üèÖ *Rango:* ${personajeVendido.rango}\n`;
        mensajeVenta += `üéöÔ∏è *Nivel:* ${personajeVendido.nivel}\n`;
        mensajeVenta += `‚ù§Ô∏è *Vida:* ${personajeVendido.vida} HP\n`;
        mensajeVenta += `‚ú® *Experiencia:* ${personajeVendido.experiencia} / ${personajeVendido.xpMax} XP\n`;
        mensajeVenta += `üåü *Habilidades:*\n${habilidadesPersonaje}\n`;
        mensajeVenta += `üíé *Precio de Venta:* ${precioVenta} diamantes\n\n`;
        mensajeVenta += `üìú Usa \`${global.prefix}quitarventa <nombre_personaje>\` si deseas retirarlo del mercado.\n`;

        await sock.sendMessage(msg.key.remoteJid, { 
            image: { url: personajeVendido.imagen }, 
            caption: mensajeVenta
        }, { quoted: msg });

        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .vender:", error);
    }
    break;
}
        
case 'quitarventa': {
    try {
        // üîÑ Reacci√≥n de proceso
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "üõë", key: msg.key }
        });

        // Usamos 'text' en lugar de 'args'
        const inputRaw = (text || "").trim();

        // Verificar si el usuario ingres√≥ algo
        if (!inputRaw) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: `‚ö†Ô∏è *Uso incorrecto.*\nEjemplo: \`${global.prefix}quitarventa <nombre_personaje>\``
            }, { quoted: msg });
            return;
        }

        // üîç Limpiar nombre del personaje (ignora emojis, may√∫sculas, min√∫sculas y caracteres especiales)
        let nombrePersonaje = inputRaw
            .toLowerCase()
            .replace(/[^a-zA-Z0-9_]/g, "");

        let userId = msg.key.participant || msg.key.remoteJid;
        const rpgFile = "./rpg.json";

        // üìÇ Cargar datos del RPG
        let rpgData = fs.existsSync(rpgFile)
            ? JSON.parse(fs.readFileSync(rpgFile, "utf-8"))
            : { usuarios: {}, mercadoPersonajes: [] };

        // ‚ùå Verificar si el usuario tiene cuenta
        if (!rpgData.usuarios[userId]) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: `‚ùå *No tienes una cuenta registrada en el gremio.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.`
            }, { quoted: msg });
            return;
        }

        // üîé Buscar el personaje en la tienda de venta
        let indexPersonaje = rpgData.mercadoPersonajes.findIndex(p =>
            p.nombre.toLowerCase().replace(/[^a-zA-Z0-9_]/g, "") === nombrePersonaje &&
            p.vendedor === userId
        );

        // ‚ùå Si el personaje no est√° en venta
        if (indexPersonaje === -1) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: `‚ùå *No tienes ese personaje en venta o no te pertenece.*\nüìú Usa \`${global.prefix}alaventa\` para ver la lista de personajes en venta.`
            }, { quoted: msg });
            return;
        }

        // üì¶ Recuperar personaje del mercado
        let personajeRecuperado = rpgData.mercadoPersonajes.splice(indexPersonaje, 1)[0];
        delete personajeRecuperado.vendedor; // Quitar 'vendedor' de sus datos
        personajeRecuperado.precio = personajeRecuperado.precioOriginal; // Restaurar precio original

        // üìú Agregarlo de nuevo a la cartera del usuario
        if (!rpgData.usuarios[userId].personajes) {
            rpgData.usuarios[userId].personajes = [];
        }
        rpgData.usuarios[userId].personajes.push(personajeRecuperado);

        // Guardar cambios
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // üìú Construir mensaje con habilidades
        let habilidadesPersonaje = Object.entries(personajeRecuperado.habilidades)
            .map(([habilidad, nivel]) => `   üîπ ${habilidad} (Nivel ${nivel})`)
            .join("\n");

        // Mensaje de confirmaci√≥n
        let mensaje = `‚úÖ *Has retirado a ${personajeRecuperado.nombre} del mercado y ha sido devuelto a tu cartera.*\n\n`;
        mensaje += `üèÖ *Rango:* ${personajeRecuperado.rango}\n`;
        mensaje += `üéöÔ∏è *Nivel:* ${personajeRecuperado.nivel}\n`;
        mensaje += `‚ù§Ô∏è *Vida:* ${personajeRecuperado.vida} HP\n`;
        mensaje += `‚ú® *Experiencia:* ${personajeRecuperado.experiencia} / ${personajeRecuperado.xpMax} XP\n`;
        mensaje += `üåü *Habilidades:*\n${habilidadesPersonaje}\n`;
        mensaje += `üíé *Precio Original:* ${personajeRecuperado.precio} diamantes\n\n`;
        mensaje += `üìú Usa \`${global.prefix}verper\` para ver tu lista de personajes.\n`;

        // üì∑ Enviar la imagen si existe
        if (personajeRecuperado.imagen && personajeRecuperado.imagen.startsWith("http")) {
            await sock.sendMessage(msg.key.remoteJid, {
                image: { url: personajeRecuperado.imagen },
                caption: mensaje
            }, { quoted: msg });
        } else {
            // Si no tiene imagen, solo enviar el mensaje de texto
            await sock.sendMessage(msg.key.remoteJid, {
                text: mensaje
            }, { quoted: msg });
        }

        // ‚úÖ Reacci√≥n de confirmaci√≥n
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚úÖ", key: msg.key }
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .quitarventa:", error);
        await sock.sendMessage(msg.key.remoteJid, {
            text: "‚ùå *Ocurri√≥ un error al retirar el personaje del mercado. Int√©ntalo de nuevo.*"
        }, { quoted: msg });

        // ‚ùå Reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚ùå", key: msg.key }
        });
    }
    break;
}
        
case 'alaventa': {
    try {
        // üîÑ Reacci√≥n de proceso
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üõçÔ∏è", key: msg.key } 
        });

        const rpgFile = "./rpg.json";
        let rpgData = fs.existsSync(rpgFile) ? JSON.parse(fs.readFileSync(rpgFile, "utf-8")) : { mercadoPersonajes: [] };

        if (!rpgData.mercadoPersonajes || rpgData.mercadoPersonajes.length === 0) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No hay personajes en venta actualmente.*\nüìú Usa \`${global.prefix}vender <nombre_personaje> <precio>\` para vender uno.` 
            }, { quoted: msg });
            return;
        }

        let mensaje = `üè™ *Mercado de Personajes - Azura Ultra* üè™\n\n`;
        mensaje += `üé≠ *Aqu√≠ puedes comprar personajes puestos a la venta por otros jugadores.*\n`;
        mensaje += `üõí *Para comprar usa:* \n`;
        mensaje += `   üìå \`${global.prefix}comprar2 <nombre_personaje>\`\n\n`;
        mensaje += `üìú Usa \`${global.prefix}menurpg\` para m√°s informaci√≥n.\n\n`;

        // Recorrer los personajes en venta
        rpgData.mercadoPersonajes.forEach((personaje, index) => {
            let habilidadesPersonaje = Object.entries(personaje.habilidades)
                .map(([habilidad, nivel]) => `   üîπ ${habilidad} (Nivel ${nivel})`)
                .join("\n");

            mensaje += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;
            mensaje += `üîπ *${index + 1}. ${personaje.nombre}*\n`;
            mensaje += `üèÖ *Rango:* ${personaje.rango}\n`;
            mensaje += `üéöÔ∏è *Nivel:* ${personaje.nivel}\n`;
            mensaje += `‚ù§Ô∏è *Vida:* ${personaje.vida} HP\n`;
            mensaje += `‚ú® *Experiencia:* ${personaje.experiencia} / ${personaje.xpMax} XP\n`;
            mensaje += `üåü *Habilidades:*\n${habilidadesPersonaje}\n`;
            mensaje += `üíé *Precio:* ${personaje.precio} diamantes\n`;
            mensaje += `üõí *Vendedor:* @${personaje.vendedor.replace("@s.whatsapp.net", "")}\n`;
            mensaje += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n`;
        });

        // üì¢ Enviar el mensaje con video como GIF üé•
        await sock.sendMessage(msg.key.remoteJid, { 
            video: { url: "https://cdn.dorratz.com/files/1740730170576.mp4" }, 
            gifPlayback: true, 
            caption: mensaje, 
            mentions: rpgData.mercadoPersonajes.map(p => p.vendedor) // Menciona a los vendedores
        }, { quoted: msg });

        // ‚úÖ Confirmaci√≥n con reacci√≥n
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .alaventa:", error);
    }
    break;
}
              
        
case 'mascota': {
    try {
        // üîÑ Enviar reacci√≥n mientras se procesa el comando
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "üêæ", key: msg.key } // Emoji de mascota üêæ
        });

        const rpgFile = "./rpg.json";

        // Verificar si el archivo RPG existe
        if (!fs.existsSync(rpgFile)) {
            await sock.sendMessage(
                msg.key.remoteJid,
                {
                    text: `‚ùå *No tienes una cuenta en el gremio Azura Ultra.*\n\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.`
                },
                { quoted: msg }
            );
            return;
        }

        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));
        let userId = msg.key.participant || msg.key.remoteJid;

        if (!rpgData.usuarios[userId]) {
            await sock.sendMessage(
                msg.key.remoteJid,
                {
                    text: `‚ùå *No tienes una cuenta registrada.*\n\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.`
                },
                { quoted: msg }
            );
            return;
        }

        let usuario = rpgData.usuarios[userId];

        if (!usuario.mascotas || usuario.mascotas.length === 0) {
            await sock.sendMessage(
                msg.key.remoteJid,
                {
                    text: `‚ùå *No tienes mascotas en tu inventario.*\nüîπ Usa \`${global.prefix}tiendamascotas\` para comprar una.`
                },
                { quoted: msg }
            );
            return;
        }

        // Tomamos el valor introducido en "text"
        const numeroMascota = parseInt(text);

        // Validar que sea un n√∫mero correcto
        if (
            isNaN(numeroMascota) ||
            numeroMascota <= 0 ||
            numeroMascota > usuario.mascotas.length
        ) {
            await sock.sendMessage(
                msg.key.remoteJid,
                {
                    text: `‚ö†Ô∏è *Uso incorrecto.*\nEjemplo: \`${global.prefix}mascota <n√∫mero>\`\nüîπ Usa \`${global.prefix}vermascotas\` para ver la lista de mascotas.`
                },
                { quoted: msg }
            );
            return;
        }

        // Obtener la mascota seleccionada (la pasamos al primer lugar del array)
        let nuevaMascotaPrincipal = usuario.mascotas.splice(numeroMascota - 1, 1)[0];
        usuario.mascotas.unshift(nuevaMascotaPrincipal);

        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        let mensaje = `üêæ *¬°Has cambiado tu mascota principal!* üêæ\n\n`;
        mensaje += `üîπ *Nueva Mascota Principal:* ${nuevaMascotaPrincipal.nombre}\n`;
        mensaje += `üìä *Rango:* ${nuevaMascotaPrincipal.rango}\n`;
        mensaje += `üéöÔ∏è *Nivel:* ${nuevaMascotaPrincipal.nivel}\n`;
        mensaje += `‚ù§Ô∏è *Vida:* ${nuevaMascotaPrincipal.vida} HP\n`;
        mensaje += `‚ú® *Experiencia:* ${nuevaMascotaPrincipal.experiencia} / ${nuevaMascotaPrincipal.xpMax} XP\n`;
        mensaje += `üåü *Habilidades:*\n`;
        Object.entries(nuevaMascotaPrincipal.habilidades).forEach(([habilidad, datos]) => {
            mensaje += `      üîπ ${habilidad} (Nivel ${datos.nivel})\n`;
        });
        mensaje += `\nüìú Usa \`${global.prefix}nivelmascota\` para ver sus estad√≠sticas.\n`;

        // Enviar la imagen y el mensaje
        await sock.sendMessage(
            msg.key.remoteJid,
            {
                image: { url: nuevaMascotaPrincipal.imagen },
                caption: mensaje
            },
            { quoted: msg }
        );

        // ‚úÖ Reacci√≥n de √©xito
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚úÖ", key: msg.key }
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .mascota:", error);
        await sock.sendMessage(
            msg.key.remoteJid,
            {
                text: "‚ùå *Ocurri√≥ un error al cambiar tu mascota principal. Int√©ntalo de nuevo.*"
            },
            { quoted: msg }
        );

        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚ùå", key: msg.key }
        });
    }
    break;
}

        
        
case 'compra': {
    try {
        // üîÑ Enviar reacci√≥n mientras se procesa el comando
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üêæ", key: msg.key } // Emoji de pata üêæ
        });

        // Archivo JSON donde se guardan los datos del RPG
        const rpgFile = "./rpg.json";

        // Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta en el gremio Azura Ultra.*\n\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.`
            }, { quoted: msg });
            return;
        }

        // Cargar los datos del RPG
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // Verificar si el usuario est√° registrado
        let userId = msg.key.participant || msg.key.remoteJid;
        if (!rpgData.usuarios[userId]) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta en el gremio Azura Ultra.*\n\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.`
            }, { quoted: msg });
            return;
        }

        // Verificar si hay mascotas en la tienda
        if (!rpgData.tiendaMascotas || rpgData.tiendaMascotas.length === 0) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *Actualmente no hay mascotas en la tienda.*\nüîπ Usa `"+global.prefix+"addmascota` para agregar nuevas mascotas."
            }, { quoted: msg });
            return;
        }

        // Verificar si el usuario ingres√≥ un nombre o n√∫mero
        const inputRaw = (text || "").trim();
        if (!inputRaw) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ö†Ô∏è *Uso incorrecto.*\nEjemplo: \`${global.prefix}compra <nombre_mascota>\` o \`${global.prefix}compra <n√∫mero_mascota>\``
            }, { quoted: msg });
            return;
        }

        // Convertir a min√∫sculas y limpiar de emojis/caracteres especiales
        let input = inputRaw.toLowerCase().replace(/[^a-z0-9]/gi, ''); 

        let mascotaSeleccionada = null;

        // Buscar por √≠ndice (n√∫mero) o por nombre
        if (!isNaN(input) && rpgData.tiendaMascotas[parseInt(input) - 1]) {
            // Si "input" es num√©rico y corresponde a un √≠ndice en la tienda
            mascotaSeleccionada = rpgData.tiendaMascotas[parseInt(input) - 1];
        } else {
            // Buscar la mascota cuyo nombre (en min√∫sculas, limpiado) coincida
            mascotaSeleccionada = rpgData.tiendaMascotas.find(m => 
                m.nombre.toLowerCase().replace(/[^a-z0-9]/gi, '') === input
            );
        }

        // Verificar si la mascota existe
        if (!mascotaSeleccionada) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No se encontr√≥ la mascota en la tienda.*\nüîπ Usa \`${global.prefix}tiendamascotas\` para ver las mascotas disponibles.`
            }, { quoted: msg });
            return;
        }

        let usuario = rpgData.usuarios[userId];

        // Verificar si el usuario ya tiene la mascota
        if (usuario.mascotas && usuario.mascotas.some(m => m.nombre === mascotaSeleccionada.nombre)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ö†Ô∏è *Ya posees esta mascota.*\nüîπ Usa \`${global.prefix}vermascotas\` para ver tus mascotas compradas.`
            }, { quoted: msg });
            return;
        }

        // Verificar si el usuario tiene suficientes diamantes
        if (usuario.diamantes < mascotaSeleccionada.precio) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes suficientes diamantes para comprar esta mascota.*\nüíé *Precio:* ${mascotaSeleccionada.precio} diamantes\nüí∞ *Tu saldo:* ${usuario.diamantes} diamantes`
            }, { quoted: msg });
            return;
        }

        // Descontar diamantes
        usuario.diamantes -= mascotaSeleccionada.precio;

        // Crear la mascota en la cartera del usuario
        let nuevaMascota = {
            nombre: mascotaSeleccionada.nombre,
            rango: mascotaSeleccionada.rango,
            nivel: 1,
            experiencia: 0,
            xpMax: mascotaSeleccionada.xpMax,
            vida: mascotaSeleccionada.vida,
            habilidades: {
                [Object.keys(mascotaSeleccionada.habilidades)[0]]: { nivel: 1 },
                [Object.keys(mascotaSeleccionada.habilidades)[1]]: { nivel: 1 }
            },
            imagen: mascotaSeleccionada.imagen
        };

        // Agregar la mascota al usuario
        if (!usuario.mascotas) usuario.mascotas = [];
        usuario.mascotas.push(nuevaMascota);

        // Guardar los cambios en el archivo JSON
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // Construir mensaje de confirmaci√≥n
        let mensaje = `üéâ *¬°Has comprado una nueva mascota!* üéâ\n\n`;
        mensaje += `üêæ *Nombre:* ${nuevaMascota.nombre}\n`;
        mensaje += `üìä *Rango:* ${nuevaMascota.rango}\n`;
        mensaje += `üéöÔ∏è *Nivel:* ${nuevaMascota.nivel}\n`;
        mensaje += `‚ù§Ô∏è *Vida:* ${nuevaMascota.vida} HP\n`;
        mensaje += `‚ú® *Experiencia:* ${nuevaMascota.experiencia} / ${nuevaMascota.xpMax} XP\n`;
        mensaje += `üåü *Habilidades:*\n`;
        Object.entries(nuevaMascota.habilidades).forEach(([habilidad, datos]) => {
            mensaje += `      üîπ ${habilidad} (Nivel ${datos.nivel})\n`;
        });
        mensaje += `üíé *Costo:* ${mascotaSeleccionada.precio} diamantes\n\n`;
        mensaje += `üìú Usa \`${global.prefix}vermascotas\` para ver todas tus mascotas compradas.\n`;

        // Enviar mensaje con la imagen de la mascota
        await sock.sendMessage(msg.key.remoteJid, {
            image: { url: nuevaMascota.imagen },
            caption: mensaje
        }, { quoted: msg });

        // ‚úÖ Confirmaci√≥n con reacci√≥n de √©xito
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key }
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .compra:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al procesar la compra. Int√©ntalo de nuevo.*"
        }, { quoted: msg });

        // ‚ùå Enviar reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚ùå", key: msg.key }
        });
    }
    break;
}        
        
case 'rpg': { 
    try { 
        if (args.length < 2) { 
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ö†Ô∏è *Uso incorrecto.*\nEjemplo: \`${global.prefix}rpg Russell 26\`` 
            }, { quoted: msg });
            return; 
        }

        let nombreUsuario = args[0]; 
        let edadUsuario = parseInt(args[1]); 
        let userId = msg.key.participant || msg.key.remoteJid; 

        if (isNaN(edadUsuario) || edadUsuario <= 0) { 
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *La edad debe ser un n√∫mero v√°lido mayor que 0.*" 
            }, { quoted: msg });
            return; 
        }

        const rpgFile = "./rpg.json"; 
        let rpgData = fs.existsSync(rpgFile) ? JSON.parse(fs.readFileSync(rpgFile, "utf-8")) : { usuarios: {} }; 

        if (rpgData.usuarios[userId]) { 
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ö†Ô∏è *Ya est√°s registrado en el gremio Azura Ultra.*\n\nüìú Usa \`${global.prefix}menurpg\` para ver tus opciones.` 
            }, { quoted: msg });
            return; 
        }

        await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚è≥", key: msg.key } }); 
        let registroMensaje = await sock.sendMessage(msg.key.remoteJid, { text: `üìù *Registrando en el Gremio Azura Ultra...*` }, { quoted: msg }); 

        await new Promise(resolve => setTimeout(resolve, 1500)); 
        await sock.sendMessage(msg.key.remoteJid, { edit: registroMensaje.key, text: `üìú *Nombre:* ${nombreUsuario}\nüéÇ *Edad:* ${edadUsuario}\n\n‚è≥ *Procesando...*` }); 
        await new Promise(resolve => setTimeout(resolve, 1500)); 
        await sock.sendMessage(msg.key.remoteJid, { edit: registroMensaje.key, text: `üîç *Buscando rango y habilidades...*` }); 
        await new Promise(resolve => setTimeout(resolve, 1500)); 

        const habilidadesDisponibles = ["‚öîÔ∏è Espadach√≠n", "üõ°Ô∏è Defensor", "üî• Mago", "üèπ Arquero", "üåÄ Sanador", "‚ö° Ninja", "üíÄ Asesino"]; 
        const rangosDisponibles = ["üåü Novato", "‚öîÔ∏è Guerrero", "üî• Maestro", "üëë √âlite", "üåÄ Legendario"]; 

        let habilidad1 = habilidadesDisponibles[Math.floor(Math.random() * habilidadesDisponibles.length)]; 
        let habilidad2 = habilidadesDisponibles[Math.floor(Math.random() * habilidadesDisponibles.length)]; 
        let rango = "üåü Novato"; 

        let mascotasTienda = rpgData.tiendaMascotas || []; 
        let mascotaAleatoria = mascotasTienda.length > 0 ? mascotasTienda[Math.floor(Math.random() * mascotasTienda.length)] : null; 
        let nuevaMascota = null; 

        if (mascotaAleatoria) { 
            nuevaMascota = { 
                nombre: mascotaAleatoria.nombre, 
                imagen: mascotaAleatoria.imagen, 
                rango: mascotaAleatoria.rango, // ‚úÖ Ahora guarda correctamente el rango de la mascota
                nivel: 1, 
                vida: 100, 
                experiencia: 0, 
                habilidades: { 
                    [Object.keys(mascotaAleatoria.habilidades)[0]]: { nivel: 1 }, 
                    [Object.keys(mascotaAleatoria.habilidades)[1]]: { nivel: 1 } 
                } 
            }; 
        }

        let nuevoUsuario = { 
            id: userId, 
            nombre: nombreUsuario, 
            edad: edadUsuario, 
            nivel: 1, 
            experiencia: 0, 
            rango: rango, 
            vida: 100, 
            habilidades: {  
                [habilidad1]: { nivel: 1 }, 
                [habilidad2]: { nivel: 1 } 
            }, 
            diamantes: 0, 
            diamantesGuardados: 0, 
            mascotas: nuevaMascota ? [nuevaMascota] : [] 
        };

        rpgData.usuarios[userId] = nuevoUsuario; 
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2)); 

        let habilidadesMascota = ""; 
        if (nuevaMascota) { 
            habilidadesMascota = `üîπ *Habilidades:*  
   üåÄ ${Object.keys(nuevaMascota.habilidades)[0]} (Nivel 1)  
   üî• ${Object.keys(nuevaMascota.habilidades)[1]} (Nivel 1)`; 
        }

        let mensajeFinal = `üéâ *¬°Registro Completado!* üéâ
        
üåü *Jugador:* ${nombreUsuario}  
üéÇ *Edad:* ${edadUsuario} a√±os  
‚öîÔ∏è *Rango Inicial:* ${rango}  
üéöÔ∏è *Nivel:* 1  
‚ù§Ô∏è *Vida:* 100 HP  
‚ú® *Experiencia:* 0 / 1000 XP  
üõ†Ô∏è *Habilidades:*  
   ‚ú® ${habilidad1} (Nivel 1)  
   ‚ú® ${habilidad2} (Nivel 1)  

üêæ *Mascota Inicial:* ${nuevaMascota ? `ü¶¥ ${nuevaMascota.nombre}` : "‚ùå Ninguna (No hay en la tienda)"}  
   üìä *Rango:* ${nuevaMascota ? nuevaMascota.rango : "‚ùå"}  
   üéöÔ∏è *Nivel:* ${nuevaMascota ? nuevaMascota.nivel : "‚ùå"}  
   ‚ù§Ô∏è *Vida:* ${nuevaMascota ? nuevaMascota.vida : "‚ùå"}  
   ‚ú® *Experiencia:* 0 / 500 XP  
   ${habilidadesMascota}  

üíé *Diamantes:* 0  
üè¶ *Diamantes en Gremio:* 0  

üìú *Comandos B√°sicos:*  
üîπ Usa *${global.prefix}vermascotas* para ver tu mascota actual y las que compres.  
üîπ Usa *${global.prefix}tiendamascotas* para ver mascotas disponibles.  
üîπ Usa *${global.prefix}tiendaper* para ver personajes de anime disponibles.  
üîπ Usa estos comandos para subir de nivel y ganar diamantes:  
   *${global.prefix}minar*, *${global.prefix}picar*, *${global.prefix}crime*, *${global.prefix}work*,  
   *${global.prefix}claim*, *${global.prefix}cofre*, *${global.prefix}minar2*, *${global.prefix}robar*  

üöÄ ¬°Prep√°rate para la aventura en *Azura Ultra*! üèÜ`;

        await sock.sendMessage(msg.key.remoteJid, { edit: registroMensaje.key, text: "‚úÖ *¬°Registro completado!* Generando tu tarjeta de jugador..." }); 
        await new Promise(resolve => setTimeout(resolve, 2000)); 
        await sock.sendMessage(msg.key.remoteJid, {  
            video: { url: "https://cdn.dorratz.com/files/1740560637895.mp4" },  
            gifPlayback: true,  
            caption: mensajeFinal  
        }, { quoted: msg }); 

        await sock.sendMessage(msg.key.remoteJid, { react: { text: "üéÆ", key: msg.key } }); 

    } catch (error) { 
        console.error("‚ùå Error en el comando .rpg:", error); 
        await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al registrarte en el gremio. Int√©ntalo de nuevo.*" }, { quoted: msg }); 
        await sock.sendMessage(msg.key.remoteJid, { react: { text: "‚ùå", key: msg.key } }); 
    } 
    break; 
}
        



case 'vermascotas': {  
    try {  
        // üîÑ Enviar reacci√≥n mientras se procesa el comando  
        await sock.sendMessage(msg.key.remoteJid, {  
            react: { text: "üêæ", key: msg.key } // Emoji de mascotas üêæ  
        });  

        // üìÇ Archivo JSON donde se guardan los datos del RPG  
        const rpgFile = "./rpg.json";  

        // üìÇ Verificar si el archivo existe  
        if (!fs.existsSync(rpgFile)) {  
            await sock.sendMessage(msg.key.remoteJid, {  
                text: `‚ùå *No tienes una cuenta en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.`  
            }, { quoted: msg });  
            return;  
        }  

        // üì• Cargar los datos del RPG  
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));  

        // ‚ùå Verificar si el usuario est√° registrado  
        let userId = msg.key.participant || msg.key.remoteJid;  
        if (!rpgData.usuarios[userId]) {  
            await sock.sendMessage(msg.key.remoteJid, {  
                text: `‚ùå *No tienes una cuenta en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.`  
            }, { quoted: msg });  
            return;  
        }  

        let usuario = rpgData.usuarios[userId];  

        // ‚ùå Verificar si el usuario tiene mascotas  
        if (!usuario.mascotas || usuario.mascotas.length === 0) {  
            await sock.sendMessage(msg.key.remoteJid, {  
                text: `‚ùå *No tienes ninguna mascota comprada.*\nüîπ Usa \`${global.prefix}tiendamascotas\` para ver las mascotas disponibles en la tienda.`  
            }, { quoted: msg });  
            return;  
        }  

        // üìú Mensaje principal con explicaci√≥n  
        let mensaje = ` üêæ *Tus Mascotas - Azura Ultra* üêæ\n\n`;  
        mensaje += `üìú *Aqu√≠ puedes ver todas las mascotas que has comprado y sus estad√≠sticas.*\n\n`;  
        mensaje += `üîπ Usa \`${global.prefix}mascota <n√∫mero>\` para cambiar tu mascota principal.\n`;  
        mensaje += `üîπ Usa \`${global.prefix}curar\` para restaurar la vida de tu mascota.\n`;  
        mensaje += `üîπ Usa \`${global.prefix}nivelmascota\` para ver las estad√≠sticas de tu mascota actual.\n\n`;  

        // üî• **Nuevas funciones**  
        mensaje += `‚öîÔ∏è *Batallas y Rankings:*\n`;  
        mensaje += `üîπ Usa \`${global.prefix}batallamascota\` para luchar contra otra mascota.\n`;  
        mensaje += `üîπ Usa \`${global.prefix}topmascotas\` para ver en qu√© puesto est√° tu mascota en el ranking.\n\n`;  

        // üìú **Mostrar lista de mascotas del usuario**  
        usuario.mascotas.forEach((mascota, index) => {  
            let habilidadesMascota = Object.entries(mascota.habilidades)  
                .map(([habilidad, data]) => `      üîπ ${habilidad} (Nivel ${data.nivel || 1})`)  
                .join("\n");  

            mensaje += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`;  
            mensaje += `üîπ *${index + 1}. ${mascota.nombre}*\n`;  
            mensaje += `   üìä *Rango:* ${mascota.rango || "Sin Rango"}\n`;  
            mensaje += `   üéöÔ∏è *Nivel:* ${mascota.nivel || 1}\n`;  
            mensaje += `   ‚ù§Ô∏è *Vida:* ${mascota.vida || 100} HP\n`;  
            mensaje += `   ‚ú® *Experiencia:* ${mascota.experiencia || 0} / ${mascota.xpMax || 500} XP\n`;  
            mensaje += `   üåü *Habilidades:*\n${habilidadesMascota}\n`;  
            mensaje += `‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n`;  
        });  

        // üìú **Explicaci√≥n Final**  
        mensaje += `üìú **Estos son los comandos para subir de nivel a tu mascota:**\n`;  
        mensaje += `   üõ†Ô∏è *${global.prefix}daragua*, *${global.prefix}darcomida*, *${global.prefix}darcari√±o*, *${global.prefix}pasear*, *${global.prefix}cazar*, *${global.prefix}entrenar*, *${global.prefix}presumir*, *${global.prefix}supermascota*\n\n`;  
        mensaje += `üöÄ **¬°Sigue entrenando a tus mascotas en el Gremio Azura Ultra!** üèÜ`;  

        // üé• Enviar mensaje con el **video como GIF**  
        await sock.sendMessage(msg.key.remoteJid, {  
            video: { url: "https://cdn.dorratz.com/files/1740655817564.mp4" },  
            gifPlayback: true, // Se reproduce como GIF  
            caption: mensaje  
        }, { quoted: msg });  

        // ‚úÖ Confirmaci√≥n con reacci√≥n de √©xito  
        await sock.sendMessage(msg.key.remoteJid, {  
            react: { text: "‚úÖ", key: msg.key }  
        });  

    } catch (error) {  
        console.error("‚ùå Error en el comando .vermascotas:", error);  
        await sock.sendMessage(msg.key.remoteJid, {  
            text: "‚ùå *Ocurri√≥ un error al obtener tu lista de mascotas. Int√©ntalo de nuevo.*"  
        }, { quoted: msg });  

        // ‚ùå Enviar reacci√≥n de error  
        await sock.sendMessage(msg.key.remoteJid, {  
            react: { text: "‚ùå", key: msg.key }  
        });  
    }  
    break;  
}
        

 case 'comprar': {
    try {
        // Verificar si el usuario ingres√≥ algo
        const input = (text || "").trim();
        if (!input) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ö†Ô∏è *Uso incorrecto.*\nEjemplo:\nüìå \`${global.prefix}comprar Satoru_Gojo\`\nüìå \`${global.prefix}comprar 1\``
            }, { quoted: msg });
            return;
        }

        const rpgFile = "./rpg.json";
        // Carga del archivo si existe, sino crea estructura vac√≠a
        let rpgData = fs.existsSync(rpgFile)
            ? JSON.parse(fs.readFileSync(rpgFile, "utf-8"))
            : { usuarios: {}, tiendaPersonajes: [], mercadoPersonajes: [] };

        let userId = msg.key.participant || msg.key.remoteJid;

        // Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No est√°s registrado en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.`
            }, { quoted: msg });
            return;
        }

        let usuario = rpgData.usuarios[userId];
        let personajeSeleccionado = null;

        // Primero, vemos si 'input' es un n√∫mero
        if (!isNaN(input)) {
            // Si es un n√∫mero, interpretamos que el usuario desea comprar por √≠ndice
            let index = parseInt(input) - 1;
            if (index >= 0 && index < rpgData.tiendaPersonajes.length) {
                personajeSeleccionado = rpgData.tiendaPersonajes[index];
            }
        } else {
            // Si no es n√∫mero, interpretamos que el usuario desea comprar por nombre
            // Recreamos la l√≥gica de "args.join('_')" y limpieza:
            let nombreBuscado = input
                .replace(/\s+/g, "_") // Cambia espacios a guiones bajos
                .toLowerCase()
                .replace(/[^a-zA-Z0-9_]/g, ""); // Mantiene solo letras, n√∫meros y "_"
            
            // Buscamos el personaje en la tienda con el nombre "limpio"
            personajeSeleccionado = rpgData.tiendaPersonajes.find(p =>
                p.nombre
                 .toLowerCase()
                 .replace(/[^a-zA-Z0-9_]/g, "") === nombreBuscado
            );
        }

        // Si el personaje no existe, mostramos mensaje
        if (!personajeSeleccionado) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: `‚ùå *No se encontr√≥ ese personaje en la tienda.*\nüìú Usa \`${global.prefix}tiendaper\` para ver los personajes disponibles.`
            }, { quoted: msg });
            return;
        }

        // Verificar si el usuario tiene suficientes diamantes
        if (usuario.diamantes < personajeSeleccionado.precio) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: `‚ùå *No tienes suficientes diamantes.*\nüíé *Precio:* ${personajeSeleccionado.precio} diamantes\nüí∞ *Tu saldo:* ${usuario.diamantes} diamantes.`
            }, { quoted: msg });
            return;
        }

        // Restar diamantes al usuario
        usuario.diamantes -= personajeSeleccionado.precio;

        // Agregar el personaje a la cartera del usuario (si no existe el array, crearlo)
        if (!usuario.personajes) usuario.personajes = [];
        usuario.personajes.push({
            nombre: personajeSeleccionado.nombre,
            rango: personajeSeleccionado.rango,
            nivel: personajeSeleccionado.nivel,
            experiencia: personajeSeleccionado.experiencia,
            xpMax: personajeSeleccionado.xpMax,
            vida: personajeSeleccionado.vida,
            habilidades: personajeSeleccionado.habilidades, 
            precio: personajeSeleccionado.precio,
            imagen: personajeSeleccionado.imagen
        });

        // Eliminar el personaje de la tienda
        rpgData.tiendaPersonajes = rpgData.tiendaPersonajes.filter(
            p => p.nombre !== personajeSeleccionado.nombre
        );

        // Guardar cambios en el archivo
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // Mensaje de confirmaci√≥n de compra con imagen
        let mensajeCompra = `üé≠ *¬°Has comprado un nuevo personaje!* üé≠\n\n`;
        mensajeCompra += `üîπ *Nombre:* ${personajeSeleccionado.nombre}\n`;
        mensajeCompra += `   üéöÔ∏è *Nivel:* ${personajeSeleccionado.nivel}\n`;
        mensajeCompra += `   ‚ù§Ô∏è *Vida:* ${personajeSeleccionado.vida} HP\n`;
        mensajeCompra += `   ‚ú® *Experiencia:* ${personajeSeleccionado.experiencia} / ${personajeSeleccionado.xpMax} XP\n`;
        mensajeCompra += `   üåü *Habilidades:*\n`;

        // Mostrar habilidades correctamente
        Object.entries(personajeSeleccionado.habilidades).forEach(([habilidad, nivel]) => {
            mensajeCompra += `      üîπ ${habilidad} (Nivel ${nivel})\n`;
        });

        mensajeCompra += `\nüíé *Costo:* ${personajeSeleccionado.precio} diamantes\n`;
        mensajeCompra += `üìú Usa \`${global.prefix}nivelper\` para ver sus estad√≠sticas.\n`;
        mensajeCompra += `üìú Usa \`${global.prefix}verper\` para ver todos tus personajes comprados.`;

        await sock.sendMessage(msg.key.remoteJid, {
            image: { url: personajeSeleccionado.imagen },
            caption: mensajeCompra
        }, { quoted: msg });

        // ‚úÖ Enviar reacci√≥n de √©xito
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚úÖ", key: msg.key }
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .comprar:", error);
        await sock.sendMessage(msg.key.remoteJid, {
            text: "‚ùå *Ocurri√≥ un error al procesar la compra. Int√©ntalo de nuevo.*"
        }, { quoted: msg });

        // ‚ùå Enviar reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚ùå", key: msg.key }
        });
    }
    break;
}       

        
case 'dar': {
    try {
        // Aseguramos que mentionedJid sea un array, aunque no haya menciones
        const mentionedJid = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid || [];

        // üîí Verificar si el usuario que ejecuta el comando es el Owner
        if (!isOwner(sender)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚õî *Solo el propietario del bot puede dar diamantes a otros jugadores.*" 
            }, { quoted: msg });
            return;
        }

        // Determina el usuario objetivo, ya sea por cita o menci√≥n
        let targetUser;

        // 1) Usuario al que se le respondi√≥ el mensaje
        if (msg.message.extendedTextMessage?.contextInfo?.quotedMessage) {
            targetUser = msg.message.extendedTextMessage.contextInfo.participant;
        
        // 2) Usuario mencionado con @
        } else if (mentionedJid.length > 0) {
            targetUser = mentionedJid[0];
        }

        // Si no obtenemos un usuario por cita ni menci√≥n, mostramos ejemplo de uso
        if (!targetUser) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: `‚ö†Ô∏è *Uso incorrecto.*\nEjemplo: \`${global.prefix}dar citando el mensaje y la cantidad 5000\` ok`
            }, { quoted: msg });
            return;
        }

        // Verificar si se ingres√≥ la cantidad de diamantes en 'text'
        const cantidadStr = (text || "").trim();

        // Si no hay nada o no es un n√∫mero v√°lido
        if (!cantidadStr || isNaN(cantidadStr) || parseInt(cantidadStr) <= 0) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: "‚ö†Ô∏è *Debes ingresar una cantidad v√°lida de diamantes a dar.*\nEjemplo: `citando el mensaje y la cantidad 5000`"
            }, { quoted: msg });
            return;
        }

        const cantidad = parseInt(cantidadStr);

        // üîÑ Reacci√≥n de ‚Äúdiamantes‚Äù mientras se procesa
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "üíé", key: msg.key }
        });

        // üìÇ Verificar si el archivo RPG existe
        const rpgFile = "./rpg.json";
        if (!fs.existsSync(rpgFile)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ö†Ô∏è *No hay datos de RPG guardados.*"
            }, { quoted: msg });
            return;
        }

        // üìÇ Cargar datos del RPG
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // üìå Verificar si el usuario objetivo est√° registrado en el RPG
        if (!rpgData.usuarios[targetUser]) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *El usuario no tiene una cuenta en el gremio Azura Ultra.*\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarlo.` 
            }, { quoted: msg });
            return;
        }

        // üíé A√±adir diamantes al usuario objetivo
        rpgData.usuarios[targetUser].diamantes += cantidad;

        // üíæ Guardar cambios en el archivo JSON
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // üì© Confirmar transferencia
        await sock.sendMessage(msg.key.remoteJid, {
            text: `üíé *Se han enviado ${cantidad} diamantes a @${targetUser.replace("@s.whatsapp.net", "")}.*\n‚ú® Usa \`${global.prefix}bal\` para ver tu saldo.`,
            mentions: [targetUser]
        }, { quoted: msg });

        // ‚úÖ Reacci√≥n de confirmaci√≥n
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚úÖ", key: msg.key }
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .dar:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al dar diamantes. Int√©ntalo de nuevo.*"
        }, { quoted: msg });

        // ‚ùå Enviar reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚ùå", key: msg.key }
        });
    }
    break;
}

        
case 'deleteuser': {
    try {
        // üîí Verificar si el usuario que ejecuta el comando es Owner
        if (!isOwner(sender)) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: "‚õî *Solo el propietario del bot puede eliminar la cuenta de otros jugadores.*"
            }, { quoted: msg });
            return;
        }

        // üìå Verificar si el usuario ingres√≥ un n√∫mero v√°lido en "text"
        // isNaN(text) detecta si NO es un n√∫mero
        if (!text || isNaN(text)) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: `‚ö†Ô∏è *Uso incorrecto.*\n\n` +
                      `üìå *Ejemplo de uso:* \n` +
                      `üîπ \`${global.prefix}deleteuser 50212345678\` (N√∫mero sin @ ni espacios)\n\n` +
                      `üîπ *Este comando eliminar√° la cuenta del usuario y devolver√° sus personajes a la tienda.*`
            }, { quoted: msg });
            return;
        }

        // Construimos el userId para WhatsApp
        const userId = text.replace(/[^0-9]/g, "") + "@s.whatsapp.net"; // le quitamos todo excepto d√≠gitos y agregamos @s.whatsapp.net
        const rpgFile = "./rpg.json";

        // üîÑ Enviar reacci√≥n de "eliminaci√≥n" mientras se procesa
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "üóëÔ∏è", key: msg.key }
        });

        // üìÇ Verificar si el archivo RPG existe
        if (!fs.existsSync(rpgFile)) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: "‚ö†Ô∏è *No hay datos de RPG guardados.*"
            }, { quoted: msg });
            return;
        }

        // üìÇ Cargar datos del RPG
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // üìå Verificar si el usuario est√° registrado en el RPG
        if (!rpgData.usuarios[userId]) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: `‚ùå *El usuario @${text} no tiene una cuenta registrada en el gremio Azura Ultra.*`,
                mentions: [userId]
            }, { quoted: msg });
            return;
        }

        // üè∑Ô∏è Recuperar personajes del usuario y devolverlos a la tienda
        let usuario = rpgData.usuarios[userId];
        if (usuario.personajes && usuario.personajes.length > 0) {
            rpgData.tiendaPersonajes.push(...usuario.personajes);
        }

        // ‚ùå Eliminar el usuario del JSON
        delete rpgData.usuarios[userId];

        // üíæ Guardar cambios en el archivo JSON
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // üì© Confirmar eliminaci√≥n
        await sock.sendMessage(msg.key.remoteJid, {
            text: `üóëÔ∏è *La cuenta de @${text} ha sido eliminada exitosamente del gremio Azura Ultra.*\n\n` +
                  `üîπ *Sus personajes han sido devueltos a la tienda.*`,
            mentions: [userId]
        }, { quoted: msg });

        // ‚úÖ Reacci√≥n de confirmaci√≥n
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚úÖ", key: msg.key }
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .deleteuser:", error);
        await sock.sendMessage(msg.key.remoteJid, {
            text: "‚ùå *Ocurri√≥ un error al eliminar la cuenta del usuario. Int√©ntalo de nuevo.*"
        }, { quoted: msg });

        // ‚ùå Enviar reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚ùå", key: msg.key }
        });
    }
    break;
}
        
case 'deleterpg': {
    try {
        const userId = msg.key.participant || msg.key.remoteJid;
        const rpgFile = "./rpg.json";

        // üîÑ Reacci√≥n inicial
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚è≥", key: msg.key } // Emoji de espera ‚è≥
        });

        // Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ö†Ô∏è *No hay datos de RPG guardados.*" 
            }, { quoted: msg });
            return;
        }

        // Cargar datos del RPG
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes un registro en el gremio Azura Ultra.*\n\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
            return;
        }

        // Confirmaci√≥n de eliminaci√≥n
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚ö†Ô∏è *¬øEst√°s seguro de que quieres eliminar tu cuenta del gremio Azura Ultra?* Esto borrar√° todos tus datos, incluyendo personajes y mascotas.\n\n‚è≥ *Tienes 1 minuto para confirmar.*\n\n‚úÖ Si est√°s seguro, usa \`${global.prefix}ok\` para confirmar.\n‚ùå Si no quieres eliminar, simplemente ignora este mensaje.` 
        }, { quoted: msg });

        // Guardar en memoria temporal la solicitud de eliminaci√≥n
        global.pendingDeletions = global.pendingDeletions || {};
        global.pendingDeletions[userId] = setTimeout(() => {
            delete global.pendingDeletions[userId]; // Expira la solicitud despu√©s de 1 minuto
        }, 60000);

    } catch (error) {
        console.error("‚ùå Error en el comando .deleterpg:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al intentar eliminar tu registro. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });
    }
    break;
}

// ‚úÖ **Comando de Confirmaci√≥n .ok**
case 'ok': {
    try {
        const userId = msg.key.participant || msg.key.remoteJid;
        const rpgFile = "./rpg.json";

        // Verificar si hay una solicitud de eliminaci√≥n pendiente
        if (!global.pendingDeletions || !global.pendingDeletions[userId]) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *No tienes una solicitud de eliminaci√≥n pendiente.* Usa `"+global.prefix+"deleterpg` para iniciar la eliminaci√≥n de tu cuenta." 
            }, { quoted: msg });
            return;
        }

        clearTimeout(global.pendingDeletions[userId]); // Cancelar temporizador
        delete global.pendingDeletions[userId]; // Remover de la lista de eliminaciones

        // Cargar datos del RPG
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // Verificar si el usuario est√° registrado
        if (!rpgData.usuarios[userId]) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *No tienes un registro en el gremio Azura Ultra.*" 
            }, { quoted: msg });
            return;
        }

        // Recuperar personajes del usuario y devolverlos a la tienda
        let usuario = rpgData.usuarios[userId];
        if (usuario.personajes && usuario.personajes.length > 0) {
            rpgData.tiendaPersonajes.push(...usuario.personajes);
        }

        // Eliminar el usuario
        delete rpgData.usuarios[userId];

        // Guardar los cambios en el archivo JSON
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // Confirmar eliminaci√≥n
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "üóëÔ∏è *Tu cuenta ha sido eliminada del gremio Azura Ultra.*\n\nüîπ Puedes volver a registrarte en cualquier momento usando `"+global.prefix+"rpg <nombre> <edad>`." 
        }, { quoted: msg });

        // ‚úÖ Reacci√≥n de confirmaci√≥n
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } // Emoji de confirmaci√≥n ‚úÖ
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .ok:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al confirmar la eliminaci√≥n. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });

        // ‚ùå Enviar reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } // Emoji de error ‚ùå
        });
    }
    break;
}
             

case 'bal':
case 'saldo': {
    try {
        // üîÑ Enviar reacci√≥n mientras se procesa el comando
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üí∞", key: msg.key } // Emoji de dinero üí∞
        });

        // Archivo JSON donde se guardan los datos del RPG
        const rpgFile = "./rpg.json";

        // Verificar si el archivo existe
        if (!fs.existsSync(rpgFile)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta en el gremio Azura Ultra.*\n\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
            return;
        }

        // Cargar los datos del RPG
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // Verificar si el usuario est√° registrado
        let userId = msg.key.participant || msg.key.remoteJid;
        if (!rpgData.usuarios[userId]) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ùå *No tienes una cuenta en el gremio Azura Ultra.*\n\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.` 
            }, { quoted: msg });
            return;
        }

        let usuario = rpgData.usuarios[userId];

        // Construir mensaje de saldo üìú
        let mensaje = `
*‚ïî‚ïê‚ïê‚ïê‚ùñ‚Ä¢‡≥ã¬∞ ¬∞‡≥ã‚Ä¢‚ùñ‚ïê‚ïê‚ïê‚ïó*
üéí *Bienvenido a tu Cartera* üéí
*‚ïö‚ïê‚ïê‚ïê‚ùñ‚Ä¢‡≥ã¬∞ ¬∞‡≥ã‚Ä¢‚ùñ‚ïê‚ïê‚ïê‚ïù*

üí∞ *SALDO DE:* @${userId.replace("@s.whatsapp.net", "")}

‚ä∞·ØΩ‚ä±‚îà‚îÄ‚îÄ‚ïå‚ùä‚ïå‚îÄ‚îÄ‚îà‚ä∞·ØΩ‚ä±
üíé *Diamantes disponibles:* ${usuario.diamantes}
üè¶ *Diamantes guardados en el gremio:* ${usuario.diamantesGuardados}
‚ä∞·ØΩ‚ä±‚îà‚îÄ‚îÄ‚ïå‚ùä‚ïå‚îÄ‚îÄ‚îà‚ä∞·ØΩ‚ä±

üìú *¬øC√≥mo guardar tus diamantes en el gremio?*  
üîπ Usa \`${global.prefix}dep <cantidad>\` o \`${global.prefix}depositar <cantidad>\` para almacenar diamantes en el gremio.  
üîπ Los diamantes guardados est√°n protegidos y no pueden ser robados.  

üìú *¬øC√≥mo retirar diamantes del gremio?*  
üîπ Usa \`${global.prefix}retirar <cantidad>\` para sacar diamantes de tu cuenta del gremio y agregarlos a tu saldo.  

üöÄ ¬°Administra bien tu econom√≠a y convi√©rtete en el m√°s rico del gremio! üèÜ
`;

        // Enviar mensaje con el **video como GIF** üé•
        await sock.sendMessage(msg.key.remoteJid, { 
            video: { url: "https://cdn.dorratz.com/files/1740652887134.mp4" },
            gifPlayback: true, // Se reproduce como GIF
            caption: mensaje,
            mentions: [userId] // Menciona al usuario
        }, { quoted: msg });

        // ‚úÖ Confirmaci√≥n con reacci√≥n de √©xito
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } // Emoji de confirmaci√≥n ‚úÖ
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .bal:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al obtener tu saldo. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });

        // ‚ùå Enviar reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } // Emoji de error ‚ùå
        });
    }
    break;
}
        

case 'dame': {
    try {
        // Verificar si el usuario es el owner
        if (!isOwner(sender)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚õî *Este comando solo puede ser usado por el owner del bot.*"
            }, { quoted: msg });
            return;
        }

        // Extraer la cantidad desde "text"
        const inputCantidad = (text || "").trim();

        // Verificar que se haya ingresado algo y que sea un n√∫mero v√°lido
        if (!inputCantidad || isNaN(inputCantidad) || parseInt(inputCantidad) <= 0) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: `‚ö†Ô∏è *Uso incorrecto.*\nEjemplo: \`${global.prefix}dame 5000\``
            }, { quoted: msg });
            return;
        }

        let cantidad = parseInt(inputCantidad);

        // Archivo JSON donde se guardan los datos del RPG
        const rpgFile = "./rpg.json";
        if (!fs.existsSync(rpgFile)) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: "‚ùå *No hay datos de jugadores registrados.*"
            }, { quoted: msg });
            return;
        }

        // Cargar los datos del RPG
        let rpgData = JSON.parse(fs.readFileSync(rpgFile, "utf-8"));

        // Verificar si el owner est√° registrado
        let userId = msg.key.participant || msg.key.remoteJid;
        if (!rpgData.usuarios[userId]) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: `‚ùå *No tienes una cuenta en el gremio Azura Ultra.*\n\nüìú Usa \`${global.prefix}rpg <nombre> <edad>\` para registrarte.`
            }, { quoted: msg });
            return;
        }

        // Dar los diamantes al owner
        rpgData.usuarios[userId].diamantes += cantidad;

        // Guardar cambios en el archivo JSON
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // Mensaje de confirmaci√≥n üíé
        let mensaje = `üéâ *¬°Diamantes a√±adidos con √©xito!* üéâ\n\n`;
        mensaje += `üí∞ *Has recibido:* ${cantidad} diamantes\n`;
        mensaje += `üíé *Total actual:* ${rpgData.usuarios[userId].diamantes} diamantes\n\n`;
        mensaje += `üìú Usa \`${global.prefix}bal\` para ver tu saldo.`;

        await sock.sendMessage(msg.key.remoteJid, { text: mensaje }, { quoted: msg });

        // ‚úÖ Reacci√≥n de confirmaci√≥n
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üíé", key: msg.key }
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .dame:", error);
        await sock.sendMessage(msg.key.remoteJid, {
            text: `‚ùå *Ocurri√≥ un error al intentar a√±adir diamantes. Int√©ntalo de nuevo.*`
        }, { quoted: msg });

        // ‚ùå Reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚ùå", key: msg.key }
        });
    }
    break;
}        

        
        
case 'tiendamascotas': {
    try {
        // üîÑ Enviar reacci√≥n mientras se procesa el comando
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üêæ", key: msg.key } // Emoji de mascota üêæ
        });

        // Leer el archivo RPG JSON
        const rpgFile = "./rpg.json";
        let rpgData = fs.existsSync(rpgFile) ? JSON.parse(fs.readFileSync(rpgFile, "utf-8")) : { tiendaMascotas: [] };

        // Verificar si hay mascotas en la tienda
        if (!rpgData.tiendaMascotas || rpgData.tiendaMascotas.length === 0) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *Actualmente no hay mascotas en la tienda.*\nüîπ Usa `.addmascota` para agregar nuevas mascotas." 
            }, { quoted: msg });
            return;
        }

        // Explicaci√≥n sobre la compra de mascotas üìú
        let mensaje = `üè™ *Tienda de Mascotas - Azura Ultra* üè™\n\n`;
        mensaje += `üê∂ *Aqu√≠ puedes comprar mascotas para mejorar tu equipo.*\n`;
        mensaje += `üõçÔ∏è *Para comprar una mascota, usa:* \n`;
        mensaje += `   üìå \`${global.prefix}compra <nombre_mascota>\`\n`;
        mensaje += `   üìå \`${global.prefix}compra <n√∫mero_mascota>\`\n\n`;
        mensaje += `üìú Usa \`${global.prefix}menurpg\` para m√°s informaci√≥n.\n\n`;

        // Mostrar todas las mascotas disponibles üêæ
        rpgData.tiendaMascotas.forEach((mascota, index) => {
            let habilidadesMascota = Object.entries(mascota.habilidades)
                .map(([habilidad, nivel]) => `      üîπ ${habilidad} (Nivel ${nivel})`)
                .join("\n");

            mensaje += `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n`;
            mensaje += `üîπ *${index + 1}. ${mascota.nombre}*\n`;
            mensaje += `   üìä *Rango:* ${mascota.rango}\n`;
            mensaje += `   üéöÔ∏è *Nivel Inicial:* ${mascota.nivel || 1}\n`; 
            mensaje += `   ‚ù§Ô∏è *Vida:* ${mascota.vida || 100} HP\n`;
            mensaje += `   ‚ú® *Experiencia:* ${mascota.experiencia || 0} / ${mascota.xpMax} XP\n`;
            mensaje += `   üåü *Habilidades:*\n${habilidadesMascota}\n`;
            mensaje += `   üíé *Precio:* ${mascota.precio} diamantes\n`;
            mensaje += `‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n`;
        });

        // Explicaci√≥n Final üìú
        mensaje += `üìú **Explicaci√≥n Final:**\n`;
        mensaje += `üîπ Usa *${global.prefix}compra <nombre_mascota>* para comprar la mascota que quieras.\n`;
        mensaje += `üîπ Tambi√©n puedes usar *${global.prefix}compra <n√∫mero_mascota>* si prefieres usar el n√∫mero de la lista.\n`;
        mensaje += `üîπ Usa *${global.prefix}vermascotas* para ver todas las mascotas que has comprado.\n`;
        mensaje += `üîπ Usa *${global.prefix}mascota <n√∫mero>* para cambiar tu mascota principal.\n\n`;
        mensaje += `üöÄ **¬°Colecciona y entrena las mejores mascotas en el Gremio Azura Ultra!** üèÜ`;

        // Enviar mensaje con el **video como GIF** üé•
        await sock.sendMessage(msg.key.remoteJid, { 
            video: { url: "https://cdn.dorratz.com/files/1740573307122.mp4" },
            gifPlayback: true, // Se reproduce como GIF
            caption: mensaje
        }, { quoted: msg });

        // ‚úÖ Confirmaci√≥n con reacci√≥n de √©xito
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } // Emoji de confirmaci√≥n ‚úÖ
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .tiendamascotas:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al cargar la tienda de mascotas. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });

        // ‚ùå Enviar reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } // Emoji de error ‚ùå
        });
    }
    break;
}
        
case 'tiendaper': {
    try {
        // üîÑ Enviar reacci√≥n de carga mientras se procesa el comando
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üõçÔ∏è", key: msg.key } // Emoji de tienda üõçÔ∏è
        });

        // Leer el archivo RPG JSON
        const rpgFile = "./rpg.json";
        let rpgData = fs.existsSync(rpgFile) ? JSON.parse(fs.readFileSync(rpgFile, "utf-8")) : { tiendaPersonajes: [] };

        // Verificar si hay personajes en la tienda
        if (!rpgData.tiendaPersonajes || rpgData.tiendaPersonajes.length === 0) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *Actualmente no hay personajes en la tienda.*\nüîπ Usa `.addper` para agregar nuevos personajes." 
            }, { quoted: msg });
            return;
        }

        // Explicaci√≥n de compra al inicio üìú
        let mensaje = `üè™ *Tienda de Personajes - Azura Ultra* üè™\n\n`;
        mensaje += `üé≠ *Compra personajes de anime y mejora sus habilidades.*\n`;
        mensaje += `üõí *Para comprar un personaje usa:* \n`;
        mensaje += `   üìå \`${global.prefix}comprar <nombre_personaje>\`\n`;
        mensaje += `   üìå \`${global.prefix}comprar <n√∫mero_personaje>\`\n`;
        mensaje += `üìú Usa \`${global.prefix}menurpg\` para m√°s informaci√≥n.\n\n`;

        // Crear la lista de personajes disponibles üìú
        rpgData.tiendaPersonajes.forEach((personaje, index) => {
            let habilidadesPersonaje = Object.entries(personaje.habilidades)
                .map(([habilidad, datos]) => `      üîπ ${habilidad} (Nivel ${datos.nivel || 1})`)
                .join("\n");

            mensaje += `*‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó*\n`;
            mensaje += `üîπ *${index + 1}. ${personaje.nombre}*\n`;
            mensaje += `   üéöÔ∏è *Nivel Inicial:* ${personaje.nivel || 1}\n`;
            mensaje += `   ‚ù§Ô∏è *Vida:* ${personaje.vida || 100} HP\n`;
            mensaje += `   ‚ú® *Experiencia:* ${personaje.experiencia || 0} / 1000 XP\n`;
            mensaje += `   üåü *Habilidades:*\n${habilidadesPersonaje}\n`;
            mensaje += `   üíé *Precio:* ${personaje.precio} diamantes\n`;
            mensaje += `*‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù*\n\n`;
        });

        // Enviar mensaje con el video como GIF üé•
        await sock.sendMessage(msg.key.remoteJid, { 
            video: { url: "https://cdn.dorratz.com/files/1740568203122.mp4" },
            gifPlayback: true, // Se reproduce como GIF
            caption: mensaje
        }, { quoted: msg });

        // ‚úÖ Confirmaci√≥n con reacci√≥n de √©xito
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } // Emoji de confirmaci√≥n ‚úÖ
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .tiendaper:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al cargar la tienda de personajes. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });

        // ‚ùå Enviar reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } // Emoji de error ‚ùå
        });
    }
    break;
}      

        
case 'addper': {
    try {
        // üîÑ Reacci√≥n antes de agregar el personaje
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üé≠", key: msg.key } // Emoji de personaje üé≠
        });

        // Verificar permisos (Solo Owner)
        if (!isOwner(sender)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚õî *Solo el propietario del bot puede agregar personajes a la tienda.*" 
            }, { quoted: msg });
            return;
        }

        // Verificar si se enviaron todos los par√°metros
        if (args.length < 5) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ö†Ô∏è *Uso incorrecto.*\n\nüìå Ejemplo: \`${global.prefix}addper Goku Kamehameha UltraInstinto https://cdn.example.com/goku.jpg 5000\`` 
            }, { quoted: msg });
            return;
        }

        // Extraer los datos ingresados
        let nombre = args[0]; // Nombre del personaje
        let habilidad1 = args[1]; // Primera habilidad
        let habilidad2 = args[2]; // Segunda habilidad
        let urlImagen = args[3]; // URL de la imagen o GIF
        let precio = parseInt(args[4]); // Precio en üíé Diamantes

        // Validar que el precio sea un n√∫mero
        if (isNaN(precio) || precio < 0) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *El precio debe ser un n√∫mero v√°lido mayor o igual a 0.*" 
            }, { quoted: msg });
            return;
        }

        // Definir los rangos de los personajes
        const rangosPersonajes = [
            "üåü Principiante", "‚öîÔ∏è Guerrero", "üî• Maestro", "üëë √âlite", "üåÄ Legendario", "üíÄ Dios de la Batalla"
        ];
        
        let rangoInicial = rangosPersonajes[0]; // Todos los personajes empiezan con rango Principiante

        // Leer o crear el archivo rpg.json
        const rpgFile = "./rpg.json";
        let rpgData = fs.existsSync(rpgFile) ? JSON.parse(fs.readFileSync(rpgFile, "utf-8")) : { tiendaPersonajes: [] };

        // Verificar si el personaje ya est√° en la tienda
        let personajeExistente = rpgData.tiendaPersonajes.find(p => p.nombre.toLowerCase() === nombre.toLowerCase());
        if (personajeExistente) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ö†Ô∏è *Ese personaje ya est√° en la tienda.* Usa otro nombre." 
            }, { quoted: msg });
            return;
        }

        // Crear el objeto del nuevo personaje con nivel, vida y experiencia
        let nuevoPersonaje = {
            nombre: nombre,
            rango: rangoInicial,
            nivel: 1, // Nivel inicial
            experiencia: 0, // Exp inicial
            xpMax: 1000, // Exp m√°xima inicial
            vida: 100, // Vida inicial
            habilidades: { 
                [habilidad1]: 1,
                [habilidad2]: 1
            },
            imagen: urlImagen,
            precio: precio
        };

        // Agregar el personaje a la tienda
        rpgData.tiendaPersonajes.push(nuevoPersonaje);
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // Enviar confirmaci√≥n con la imagen
        await sock.sendMessage(msg.key.remoteJid, { 
            image: { url: urlImagen },
            caption: `‚úÖ *Nuevo Personaje Agregado a la Tienda* ‚úÖ\n\n` +
                     `üé≠ *Nombre:* ${nombre}\n` +
                     `üìä *Rango:* ${rangoInicial}\n` +
                     `üÜô *Nivel:* 1\n` +
                     `‚ù§Ô∏è *Vida:* 100 HP\n` +
                     `‚ú® *Experiencia:* 0 / 1000 XP\n` +
                     `üåü *Habilidades:*\n` +
                     `   üîπ ${habilidad1} (Nivel 1)\n` +
                     `   üîπ ${habilidad2} (Nivel 1)\n` +
                     `üíé *Precio:* ${precio} diamantes\n\n` +
                     `üìå ¬°Disponible en la tienda de personajes ahora!`
        }, { quoted: msg });

        // ‚úÖ Reacci√≥n de confirmaci√≥n
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key }
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .addper:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al agregar el personaje. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });

        // ‚ùå Reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key }
        });
    }
    break;
}
            
case 'addmascota': { 
    try {
        // üîÑ Reacci√≥n antes de agregar la mascota
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üêæ", key: msg.key } // Emoji de patas üêæ
        });

        // Verificar permisos: solo el owner puede usar este comando
        if (!isOwner(sender)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚õî *Solo el propietario del bot puede agregar mascotas a la tienda.*" 
            }, { quoted: msg });
            return;
        }

        // Verificar si se enviaron todos los par√°metros
        if (args.length < 5) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: `‚ö†Ô∏è *Uso incorrecto.*\n\nüìå Ejemplo: \`${global.prefix}addmascota üêïPerro r√°pido protector https://cdn.example.com/perro.jpg 3000\`` 
            }, { quoted: msg });
            return;
        }

        // Extraer los datos ingresados
        let nombre = args[0]; // Emoji + Nombre
        let habilidad1 = args[1]; // Primera habilidad
        let habilidad2 = args[2]; // Segunda habilidad
        let urlImagen = args[3]; // URL de la imagen o GIF
        let precio = parseInt(args[4]); // Precio en üíé Diamantes

        // Validar que el precio sea un n√∫mero
        if (isNaN(precio) || precio < 0) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *El precio debe ser un n√∫mero v√°lido mayor o igual a 0.*" 
            }, { quoted: msg });
            return;
        }

        // Definir los rangos de las mascotas
        const rangosMascotas = [
            "üê£ Principiante", "üêæ Novato", "ü¶¥ Aprendiz", "üêï Iniciado", "ü¶ä Experimentado",
            "üêÖ Avanzado", "üêâ Veterano", "ü¶Ö √âlite", "ü¶Ñ Legendario", "üî• Divino"
        ];
        
        let rangoInicial = rangosMascotas[0]; // Todas las mascotas empiezan con rango Principiante

        // Leer o crear el archivo rpg.json
        const rpgFile = "./rpg.json";
        let rpgData = fs.existsSync(rpgFile) ? JSON.parse(fs.readFileSync(rpgFile, "utf-8")) : { tiendaMascotas: [] };

        // Verificar si la mascota ya est√° en la tienda
        let mascotaExistente = rpgData.tiendaMascotas.find(m => m.nombre === nombre);
        if (mascotaExistente) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ö†Ô∏è *Esa mascota ya est√° en la tienda.* Usa otro nombre." 
            }, { quoted: msg });
            return;
        }

        // Crear el objeto de la nueva mascota
        let nuevaMascota = {
            nombre: nombre,
            rango: rangoInicial,
            nivel: 1, // Nivel inicial
            experiencia: 0, // Exp inicial
            xpMax: 500, // Exp m√°xima inicial
            habilidades: { 
                [habilidad1]: 1,
                [habilidad2]: 1
            },
            vida: 100, // Vida inicial
            imagen: urlImagen,
            precio: precio
        };

        // Agregar la mascota a la tienda
        rpgData.tiendaMascotas.push(nuevaMascota);
        fs.writeFileSync(rpgFile, JSON.stringify(rpgData, null, 2));

        // Enviar confirmaci√≥n con la imagen
        await sock.sendMessage(msg.key.remoteJid, { 
            image: { url: urlImagen },
            caption: `‚úÖ *Nueva Mascota Agregada a la Tienda* ‚úÖ\n\n` +
                     `ü¶¥ *Nombre:* ${nombre}\n` +
                     `üìä *Rango:* ${rangoInicial}\n` +
                     `üÜô *Nivel:* 1\n` +
                     `‚ù§Ô∏è *Vida:* 100\n` +
                     `‚ú® *Experiencia:* 0 / 500 XP\n` +
                     `üåü *Habilidades:*\n` +
                     `   üîπ ${habilidad1} (Nivel 1)\n` +
                     `   üîπ ${habilidad2} (Nivel 1)\n` +
                     `üíé *Precio:* ${precio} diamantes\n\n` +
                     `üîπ ¬°Disponible en la tienda ahora!`
        }, { quoted: msg });

        // ‚úÖ Reacci√≥n de √©xito
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .addmascota:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al agregar la mascota. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });

        // ‚ùå Reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } 
        });
    }
    break;
}

        
case 'toimg': {
    const axios = require('axios');
    const fs = require('fs');
    const path = require('path');
    const { writeFileSync } = fs;
    const { exec } = require('child_process');

    if (!msg.message.extendedTextMessage?.contextInfo?.quotedMessage?.stickerMessage) {
        return sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ö†Ô∏è *Debes responder a un sticker para convertirlo en imagen.*" 
        }, { quoted: msg });
    }

    // Enviar reacci√≥n de proceso ‚è≥
    await sock.sendMessage(msg.key.remoteJid, { 
        react: { text: "‚è≥", key: msg.key } 
    });

    let quoted = msg.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage;
    let stickerStream = await downloadContentFromMessage(quoted, "sticker");

    let buffer = Buffer.alloc(0);
    for await (const chunk of stickerStream) {
        buffer = Buffer.concat([buffer, chunk]);
    }

    if (buffer.length === 0) {
        return sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Error al procesar el sticker.*" 
        }, { quoted: msg });
    }

    const stickerPath = path.join(__dirname, 'tmp', `${Date.now()}.webp`);
    const imagePath = stickerPath.replace('.webp', '.jpg');

    writeFileSync(stickerPath, buffer); // Guardar el sticker temporalmente

    // Convertir de WebP a JPG con ffmpeg
    exec(`ffmpeg -i "${stickerPath}" "${imagePath}"`, async (error) => {
        if (error) {
            console.error("‚ùå Error al convertir sticker a imagen:", error);
            return sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *No se pudo convertir el sticker en imagen.*" 
            }, { quoted: msg });
        }

        // Enviar la imagen resultante
        await sock.sendMessage(msg.key.remoteJid, { 
            image: { url: imagePath },
            caption: "üñºÔ∏è *Aqu√≠ est√° tu imagen convertida del sticker.*"
        }, { quoted: msg });

        // Eliminar archivos temporales despu√©s de enviarlos
        fs.unlinkSync(stickerPath);
        fs.unlinkSync(imagePath);

        // Enviar reacci√≥n de √©xito ‚úÖ
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });
    });

    break;
}

        
case 'speedtest':
case 'speed': {
    const cp = require('child_process');
    const { promisify } = require('util');
    const axios = require('axios');
    const fs = require('fs');
    const path = require('path');
    
    const exec = promisify(cp.exec).bind(cp);

    // Enviar una reacci√≥n antes de procesar el comando ‚è≥
    await sock.sendMessage(msg.key.remoteJid, { 
        react: { text: "‚è≥", key: msg.key } 
    });

    await sock.sendMessage(msg.key.remoteJid, {
        text: 'üöÄ Prueba de velocidad en curso... ‚è≥',
        mentions: [msg.key.participant || msg.key.remoteJid],
    }, { quoted: msg });

    let o;
    try {
        o = await exec('python3 speed.py --secure --share');
    } catch (e) {
        o = e;
    } finally {
        const { stdout, stderr } = o;
        
        if (stdout.trim()) {
            let result = stdout.trim();
            let imageUrlMatch = result.match(/(https?:\/\/[^\s]+)/); // Buscar la URL de la imagen de Speedtest
            
            if (imageUrlMatch) {
                let imageUrl = imageUrlMatch[0];

                try {
                    // Descargar la imagen de Speedtest
                    const response = await axios.get(imageUrl, { responseType: 'arraybuffer' });
                    const imageBuffer = Buffer.from(response.data);
                    const imagePath = path.join(__dirname, 'tmp', 'speedtest.png');

                    fs.writeFileSync(imagePath, imageBuffer); // Guardar la imagen temporalmente

                    // Enviar imagen con los resultados
                    await sock.sendMessage(msg.key.remoteJid, { 
                        image: { url: imagePath },
                        caption: `üìä *Resultados de Speedtest:*\n\n${result.replace(imageUrl, '').trim()}`
                    }, { quoted: msg });

                    fs.unlinkSync(imagePath); // Eliminar la imagen despu√©s de enviarla
                } catch (error) {
                    console.error('Error al descargar la imagen:', error);
                    await sock.sendMessage(msg.key.remoteJid, { 
                        text: `‚ö†Ô∏è No se pudo descargar la imagen de Speedtest, pero aqu√≠ est√°n los resultados:\n\n${result}`
                    }, { quoted: msg });
                }
            } else {
                // Si no hay URL de imagen, solo enviar el texto del resultado
                await sock.sendMessage(msg.key.remoteJid, { text: result }, { quoted: msg });
            }
        }
        
        if (stderr.trim()) {
            await sock.sendMessage(msg.key.remoteJid, { text: `‚ö†Ô∏è Error en Speedtest:\n\n${stderr}` }, { quoted: msg });
            console.log(stderr);
        }

        // Enviar una reacci√≥n de confirmaci√≥n ‚úÖ despu√©s de completar la prueba
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });
    }
    break;
}

            
case "listpacks":
    try {
        // Leer el archivo donde se guardan los paquetes de stickers
        let stickerData = JSON.parse(fs.readFileSync(stickersFile, "utf-8"));
        let packNames = Object.keys(stickerData);

        if (packNames.length === 0) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *No hay paquetes de stickers creados a√∫n.*\nüõ†Ô∏è Usa `.newpack <nombre>` para crear uno." 
            }, { quoted: msg });
            return;
        }

        // Crear una lista con los paquetes y la cantidad de stickers üì¶
        let packList = `üì¶ *Paquetes de Stickers Disponibles:*\n\n`;
        packNames.forEach((pack, index) => {
            let stickerCount = stickerData[pack].length; // Cantidad de stickers en el paquete
            packList += `üîπ *${index + 1}.* ${pack}  üìå (${stickerCount} stickers)\n`;
        });

        packList += `\nüìå Usa *${global.prefix}sendpack <nombre>* para enviar un paquete.\nüí° Usa *${global.prefix}addsticker <nombre>* para agregar m√°s stickers.`;

        // Reaccionar antes de enviar la lista üìú
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üìú", key: msg.key } 
        });

        // Enviar la lista de paquetes al usuario üì©
        await sock.sendMessage(msg.key.remoteJid, { text: packList }, { quoted: msg });

    } catch (error) {
        console.error("‚ùå Error en el comando .listpacks:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Hubo un error al obtener la lista de paquetes. Int√©ntalo de nuevo.*" 
        }, { quoted: msg });
    }
    break;
case "s":
    try {
        let quoted = msg.message.extendedTextMessage?.contextInfo?.quotedMessage;
        if (!quoted) {
        const xds = `üëæ *Uso correcto:*\nResponde a una imagen/video con "${global.prefix}s" para convertirlo en sticker\n\nEjemplo: Responde a una foto con ${global.prefix}s`
            await sock.sendMessage(msg.key.remoteJid, {  // <- Mensaje directo normal
                text: xds
            }, { quoted: msg });
            return;
        }
         
        let mediaType = quoted.imageMessage ? "image" : quoted.videoMessage ? "video" : null;
        if (!mediaType) {
            await sock.sendMessage2(  // <- Cambiado a sendMessage2
                msg.key.remoteJid,
                "‚ö†Ô∏è *Solo puedes convertir im√°genes o videos en stickers.*",
                msg
            );
            return;
        }

        // Obtener el nombre del usuario
        let senderName = msg.pushName || "Usuario Desconocido";

        // Obtener la fecha exacta de creaci√≥n üìÖ
        let now = new Date();
        let fechaCreacion = `üìÖ Fecha de Creaci√≥n de Stickerz: ${now.getDate()}/${now.getMonth() + 1}/${now.getFullYear()} üïí ${now.getHours()}:${now.getMinutes()}`;

        // Mensaje de reacci√≥n mientras se crea el sticker ‚öôÔ∏è
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "üõ†Ô∏è", key: msg.key } 
        });

        let mediaStream = await downloadContentFromMessage(quoted[`${mediaType}Message`], mediaType);
        let buffer = Buffer.alloc(0);
        for await (const chunk of mediaStream) {
            buffer = Buffer.concat([buffer, chunk]);
        }

        if (buffer.length === 0) {
            throw new Error("‚ùå Error: No se pudo descargar el archivo.");
        }

        // üåü Formato llamativo para la metadata del sticker üåü
        let metadata = {
            packname: `‚ú® Lo Mand√≥ Hacer: ${senderName} ‚ú®`,
            author: `ü§ñ Bot Creador: Azura Ultra & Cortana\nüõ†Ô∏è Desarrollado por: ùôçùô™ùô®ùô®ùôöùô°ùô° xzüíª\n${fechaCreacion}`
        };

        let stickerBuffer;
        if (mediaType === "image") {
            stickerBuffer = await writeExifImg(buffer, metadata);
        } else {
            stickerBuffer = await writeExifVid(buffer, metadata);
        }

        await sock.sendMessage(msg.key.remoteJid, { 
            sticker: { url: stickerBuffer } 
        }, { quoted: msg });

        // Confirmaci√≥n final con reacci√≥n ‚úÖ
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .ss:", error);
        await sock.sendMessage2(  // <- Cambiado a sendMessage2
            msg.key.remoteJid,
            "‚ùå *Hubo un error al procesar el sticker. Int√©ntalo de nuevo.*",
            msg
        );
    }
    break;
case "sendpack":
    try {
        if (!args[0]) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ö†Ô∏è *Debes especificar el nombre del paquete.*\nEjemplo: `.sendpack Memes`" 
            }, { quoted: msg });
            return;
        }

        let packName = args.join(" ");

        // Cargar los paquetes de stickers desde el JSON
        let stickerData = JSON.parse(fs.readFileSync(stickersFile, "utf-8"));

        // Verificar si el paquete existe
        if (!stickerData[packName]) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *Ese paquete no existe.* Usa `.listpacks` para ver los disponibles." 
            }, { quoted: msg });
            return;
        }

        let stickerPaths = stickerData[packName];

        if (stickerPaths.length === 0) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ö†Ô∏è *Este paquete no tiene stickers guardados.* Usa `.addsticker <paquete>` para a√±adir." 
            }, { quoted: msg });
            return;
        }

        // Enviar cada sticker desde la carpeta 'stickers/'
        for (let stickerFileName of stickerPaths) {
            let stickerPath = path.join(stickersDir, stickerFileName); // Asegurar la ruta correcta

            // Verificar si el archivo del sticker existe en la carpeta
            if (fs.existsSync(stickerPath)) {
                await sock.sendMessage(msg.key.remoteJid, { 
                    sticker: { url: stickerPath } 
                }, { quoted: msg });
            } else {
                console.warn(`‚ö†Ô∏è Sticker no encontrado: ${stickerPath}`);
            }
        }

        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚úÖ *Paquete de stickers '${packName}' enviado.*` 
        }, { quoted: msg });

    } catch (error) {
        console.error("‚ùå Error en el comando .sendpack:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al enviar el paquete de stickers.*" 
        }, { quoted: msg });
    }
    break;

        
case "addsticker":
    try {
        if (!args[0]) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ö†Ô∏è *Debes especificar el nombre del paquete al que quieres agregar el sticker.*\nEjemplo: `.addsticker Memes`" 
            }, { quoted: msg });
            return;
        }

        let packName = args.join(" ");

        // Verificar si el paquete existe
        let stickerData = JSON.parse(fs.readFileSync(stickersFile, "utf-8"));

        if (!stickerData[packName]) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *Ese paquete no existe. Crea uno primero con `.newpack <nombre>`*" 
            }, { quoted: msg });
            return;
        }

        // Verificar si el usuario respondi√≥ a un sticker
        let quoted = msg.message.extendedTextMessage?.contextInfo?.quotedMessage;
        if (!quoted || !quoted.stickerMessage) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ö†Ô∏è *Responde a un sticker con `.addsticker <nombre>` para agregarlo al paquete.*" 
            }, { quoted: msg });
            return;
        }

        // Descargar el sticker
        let stream = await downloadContentFromMessage(quoted.stickerMessage, "sticker");
        let buffer = Buffer.alloc(0);
        for await (const chunk of stream) {
            buffer = Buffer.concat([buffer, chunk]);
        }

        let fileName = `${Date.now()}.webp`;
        let filePath = path.join(stickersDir, fileName); // Asegurar la ruta correcta

        // Guardar el sticker en la carpeta
        fs.writeFileSync(filePath, buffer);

        // Agregar el sticker al paquete en el JSON (solo el nombre del archivo, no la ruta completa)
        stickerData[packName].push(fileName);
        fs.writeFileSync(stickersFile, JSON.stringify(stickerData, null, 2));

        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚úÖ *Sticker agregado al paquete '${packName}'*` 
        }, { quoted: msg });

    } catch (error) {
        console.error("‚ùå Error en el comando .addsticker:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al agregar el sticker al paquete.*" 
        }, { quoted: msg });
    }
    break;
        
case "newpack":
    try {
        if (!args[0]) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ö†Ô∏è *Debes especificar un nombre para el paquete.*\nEjemplo: `.newpack Memes`" 
            }, { quoted: msg });
            return;
        }

        let packName = args.join(" ");

        // Verificar si el archivo stickers.json existe, si no, crearlo
        if (!fs.existsSync(stickersFile)) {
            fs.writeFileSync(stickersFile, JSON.stringify({}, null, 2));
        }

        // Leer el archivo JSON
        let stickerData = JSON.parse(fs.readFileSync(stickersFile, "utf-8"));

        // Verificar si el paquete ya existe
        if (stickerData[packName]) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *Ese paquete ya existe. Usa otro nombre.*" 
            }, { quoted: msg });
            return;
        }

        // Crear el paquete de stickers
        stickerData[packName] = [];

        // Guardar la estructura en el JSON
        fs.writeFileSync(stickersFile, JSON.stringify(stickerData, null, 2));

        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚úÖ *Paquete de stickers '${packName}' creado exitosamente.*` 
        }, { quoted: msg });

    } catch (error) {
        console.error("‚ùå Error en el comando .newpack:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al crear el paquete de stickers.*" 
        }, { quoted: msg });
    }
    break;
        
case "rest":
    try {
        const senderNumber = (msg.key.participant || sender).replace("@s.whatsapp.net", "");
        const botNumber = sock.user.id.split(":")[0]; // Obtener el n√∫mero del bot correctamente
        const isBotMessage = msg.key.fromMe; // True si el mensaje es del bot

        if (!isOwner(senderNumber) && !isBotMessage) { 
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚õî *Solo los due√±os del bot o el bot mismo pueden reiniciar el servidor.*"
            }, { quoted: msg });
            return;
        }

        // üü¢ Enviar reacci√≥n antes de reiniciar
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "üîÑ", key: msg.key } // Emoji de reinicio
        });

        // Enviar mensaje de confirmaci√≥n
        await sock.sendMessage(msg.key.remoteJid, {
            text: "üîÑ *Reiniciando el servidor...* \nEspera unos segundos..."
        }, { quoted: msg });

        // Definir la ruta del archivo donde se guardar√° el √∫ltimo chat que ejecut√≥ .rest
        const lastRestarterFile = "./lastRestarter.json";

        // Verificar si el archivo existe, si no, crearlo
        if (!fs.existsSync(lastRestarterFile)) {
            fs.writeFileSync(lastRestarterFile, JSON.stringify({ chatId: "" }, null, 2));
        }

        // Guardar el chat donde se us√≥ el comando para avisar cuando el bot est√© en l√≠nea
        fs.writeFileSync(lastRestarterFile, JSON.stringify({ chatId: msg.key.remoteJid }, null, 2));

        // Esperar unos segundos antes de reiniciar
        setTimeout(() => {
            process.exit(1); // Reiniciar el bot (depende de tu gestor de procesos)
        }, 3000);

    } catch (error) {
        console.error("‚ùå Error en el comando rest:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Error al intentar reiniciar el servidor.*"
        }, { quoted: msg });
    }
    break;
        
case "setprefix":
    try {
        // Obtener el n√∫mero del bot
        const botNumber = sock.user.id.split(":")[0] + "@s.whatsapp.net";

        // Verificar si el remitente es un due√±o autorizado o el mismo bot
        const isBotMessage = msg.key.fromMe || sender === botNumber;

        if (!isOwner(sender) && !isBotMessage) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚õî *Solo los due√±os del bot o el bot mismo pueden cambiar el prefijo.*" 
            }, { quoted: msg });
            return;
        }

        // Verificar si el usuario proporcion√≥ un nuevo prefijo
        if (!args[0]) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ö†Ô∏è *Debes especificar un nuevo prefijo.*\nEjemplo: `.setprefix !`" 
            }, { quoted: msg });
            return;
        }

        const newPrefix = args[0];

        // Verificar si el nuevo prefijo est√° permitido
        if (!allowedPrefixes.includes(newPrefix)) {
            await sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå *Prefijo inv√°lido.* Usa un solo car√°cter o emoji permitido." 
            }, { quoted: msg });
            return;
        }

        // Guardar el nuevo prefijo en `config.json`
        fs.writeFileSync(configFilePath, JSON.stringify({ prefix: newPrefix }, null, 2));

        // Actualizar `global.prefix`
        global.prefix = newPrefix;

        // Confirmaci√≥n del cambio
        await sock.sendMessage(msg.key.remoteJid, { 
            text: `‚úÖ *Prefijo cambiado a:* *${newPrefix}*` 
        }, { quoted: msg });

        console.log(`üîÑ Prefijo cambiado a: ${newPrefix}`);

    } catch (error) {
        console.error("‚ùå Error en el comando .setprefix:", error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Error al cambiar el prefijo.*" 
        }, { quoted: msg });
    }
    break;
             
        
        
case 'help':
case 'info':
  try {
    await sock.sendMessage(msg.key.remoteJid, {
      react: { text: "‚ÑπÔ∏è", key: msg.key }
    });

    const infoMessage = `‚ï≠‚îÄ *ü§ñ AZURA ULTRA &  CORTANA* ‚îÄ‚ïÆ
‚îÇ üîπ *Prefijo actual:* ${global.prefix}
‚îÇ üëë *Due√±o:* Russell xz
‚îÇ üõ†Ô∏è *Bot desarrollado desde cero* con la ayuda de Chatgpt.
‚îÇ üöÄ *Creado por:* Russell
‚îÇ  
‚îú‚îÄ„Äî üì• *Descargas Redes* „Äï‚îÄ
‚îÇ üìå *IG, TikTok y FB*  
‚îÇ    - üë§ *Colabor√≥:* DIEGO-OFC  
‚îÇ  
‚îÇ üìå *Descargas youtube*
‚îÇ     (.play, .play2, .ytmp3, .ytmp4)  
‚îÇ    - üë§ *Colabor√≥:* Eliasar54  
‚îÇ  
‚îú‚îÄ„Äî üìú *Men√∫s y Comandos* „Äï‚îÄ
‚îÇ üìå Usa *${global.prefix}menu* para ver los comandos principales.  
‚îÇ üìå Usa *${global.prefix}allmenu* para ver todos los comandos disponibles.  
‚îÇ üìå Usa *${global.prefix}menu2* para ver los comandos de multimedia y guardado.  
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;

    await sock.sendMessage2(msg.key.remoteJid,
  {
    image: { url: "https://cdn.dorratz.com/files/1744671222036.jpg" }, 
    caption: infoMessage 
  },
  msg 
);
    

  } catch (error) {
    console.error("Error en comando info:", error);
    await sock.sendMessage2(
      msg.key.remoteJid,
      "‚ùå *Ocurri√≥ un error al mostrar la informaci√≥n. Int√©ntalo de nuevo.*",
      msg
    );
  }
  break;
        
        

case "ping":
    try {
        const now = new Date();
        const options = { 
            weekday: "long", 
            year: "numeric", 
            month: "long", 
            day: "numeric", 
            hour: "2-digit", 
            minute: "2-digit", 
            second: "2-digit", 
            timeZoneName: "short" 
        };
        const formattedDate = now.toLocaleDateString("es-ES", options);

        // Obtener el tiempo activo en d√≠as, horas, minutos y segundos
        const uptime = os.uptime();
        const uptimeDays = Math.floor(uptime / 86400);
        const uptimeHours = Math.floor((uptime % 86400) / 3600);
        const uptimeMinutes = Math.floor((uptime % 3600) / 60);
        const uptimeSeconds = Math.floor(uptime % 60);
        const uptimeFormatted = `${uptimeDays} d√≠as, ${uptimeHours}h ${uptimeMinutes}m ${uptimeSeconds}s`;

        // Informaci√≥n del sistema
        const freeMem = os.freemem();
        const totalMem = os.totalmem();
        const usedMem = totalMem - freeMem;
        const freeMemGB = (freeMem / 1024 / 1024 / 1024).toFixed(2);
        const totalMemGB = (totalMem / 1024 / 1024 / 1024).toFixed(2);
        const usedMemGB = (usedMem / 1024 / 1024 / 1024).toFixed(2);

        const cpuModel = os.cpus()[0].model;
        const numCores = os.cpus().length;
        const loadAvg = os.loadavg()[0].toFixed(2);
        const diskUsage = execSync("df -h / | awk 'NR==2 {print $3 \" / \" $2}'").toString().trim();

        // Reaccionar al mensaje con un emoji
        await sock.sendMessage(msg.key.remoteJid, {
            react: {
                text: "üèì",
                key: msg.key
            }
        });

        // Enviar mensaje con imagen y detalles del servidor
        await sock.sendMessage(msg.key.remoteJid, {
            image: { url: "https://cdn.dorratz.com/files/1740372224017.jpg" }, 
            caption: `üèì *Pong! El bot est√° activo.*\n\n` +
                     `üìÖ *Fecha y hora actual:* ${formattedDate}\n\n` +
                     `üïí *Tiempo Activo:* ${uptimeFormatted}\n\n` +
                     `üíª *Informaci√≥n del Servidor:*\n` +
                     `üîπ *CPU:* ${cpuModel}\n` +
                     `üîπ *N√∫cleos:* ${numCores}\n` +
                     `üîπ *Carga del sistema:* ${loadAvg}\n\n` +
                     `üñ•Ô∏è *Memoria RAM:*\n` +
                     `üîπ *Usada:* ${usedMemGB}GB\n` +
                     `üîπ *Libre:* ${freeMemGB}GB\n` +
                     `üîπ *Total:* ${totalMemGB}GB\n\n` +
                     `üíæ *Disco:* ${diskUsage}\n\n` +
                     `üåê *Alojado en:* *Sky Ultra Plus* üöÄ\n` +
                     `üìå *Proveedor de Hosting de Confianza*`,
            quoted: msg // Responder citando al mensaje original
        });

    } catch (error) {
        console.error("‚ùå Error en el comando ping:", error);
        await sock.sendMessage(msg.key.remoteJid, {
            text: "‚ùå *Error al obtener informaci√≥n del servidor.*",
            quoted: msg // Responder citando al mensaje original
        });
    }
    break;
            
case "get": {
    try {
        if (!msg.message.extendedTextMessage || 
            !msg.message.extendedTextMessage.contextInfo || 
            !msg.message.extendedTextMessage.contextInfo.quotedMessage) {
            return sock.sendMessage(
                msg.key.remoteJid,
                { text: "‚ùå *Error:* Debes responder a un estado de WhatsApp para descargarlo. üìù" },
                { quoted: msg }
            );
        }

        const quotedMsg = msg.message.extendedTextMessage.contextInfo.quotedMessage;
        let mediaType, mediaMessage;

        if (quotedMsg.imageMessage) {
            mediaType = "image";
            mediaMessage = quotedMsg.imageMessage;
        } else if (quotedMsg.videoMessage) {
            mediaType = "video";
            mediaMessage = quotedMsg.videoMessage;
        } else if (quotedMsg.audioMessage) {
            mediaType = "audio";
            mediaMessage = quotedMsg.audioMessage;
        } else if (quotedMsg.conversation || quotedMsg.extendedTextMessage) {
            mediaType = "text";
            mediaMessage = quotedMsg.conversation || quotedMsg.extendedTextMessage.text;
        } else {
            return sock.sendMessage(
                msg.key.remoteJid,
                { text: "‚ùå *Error:* Solo puedes descargar *im√°genes, videos, audios y textos* de estados de WhatsApp." },
                { quoted: msg }
            );
        }

        // Enviar reacci√≥n mientras procesa
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚è≥", key: msg.key } 
        });

        if (mediaType === "text") {
            // Convertir el texto en una imagen
            const { createCanvas, loadImage } = require("canvas");
            const canvas = createCanvas(500, 250);
            const ctx = canvas.getContext("2d");

            // Fondo blanco
            ctx.fillStyle = "#ffffff";
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Configurar texto
            ctx.fillStyle = "#000000";
            ctx.font = "20px Arial";
            ctx.fillText(mediaMessage, 20, 100, 460); // Ajustar el texto dentro del cuadro

            // Guardar la imagen en buffer
            const buffer = canvas.toBuffer("image/png");

            // Enviar la imagen del estado de texto
            await sock.sendMessage(msg.key.remoteJid, { 
                image: buffer, 
                caption: "üìù *Estado de texto convertido en imagen*" 
            }, { quoted: msg });

        } else {
            // Descargar el multimedia
            const mediaStream = await new Promise(async (resolve, reject) => {
                try {
                    const stream = await downloadContentFromMessage(mediaMessage, mediaType);
                    let buffer = Buffer.alloc(0);
                    for await (const chunk of stream) {
                        buffer = Buffer.concat([buffer, chunk]);
                    }
                    resolve(buffer);
                } catch (err) {
                    reject(null);
                }
            });

            if (!mediaStream || mediaStream.length === 0) {
                await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Error:* No se pudo descargar el estado. Intenta de nuevo." }, { quoted: msg });
                return;
            }

            // Enviar el archivo descargado al chat
            let messageOptions = {
                mimetype: mediaMessage.mimetype,
            };

            if (mediaType === "image") {
                messageOptions.image = mediaStream;
            } else if (mediaType === "video") {
                messageOptions.video = mediaStream;
            } else if (mediaType === "audio") {
                messageOptions.audio = mediaStream;
                messageOptions.mimetype = "audio/mpeg"; // Especificar que es un audio
            }

            await sock.sendMessage(msg.key.remoteJid, messageOptions, { quoted: msg });
        }

        // Confirmar que el estado ha sido enviado con √©xito
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando get:", error);
        await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Error:* No se pudo recuperar el estado. Int√©ntalo de nuevo." }, { quoted: msg });
    }
    break;
}
        
    
case "ver": {
    try {
        if (!msg.message.extendedTextMessage || 
            !msg.message.extendedTextMessage.contextInfo || 
            !msg.message.extendedTextMessage.contextInfo.quotedMessage) {
            return sock.sendMessage(
                msg.key.remoteJid,
                { text: "‚ùå *Error:* Debes responder a un mensaje de *ver una sola vez* (imagen, video o audio) para poder verlo nuevamente." },
                { quoted: msg }
            );
        }

        const quotedMsg = msg.message.extendedTextMessage.contextInfo.quotedMessage;
        let mediaType, mediaMessage;

        if (quotedMsg.imageMessage?.viewOnce) {
            mediaType = "image";
            mediaMessage = quotedMsg.imageMessage;
        } else if (quotedMsg.videoMessage?.viewOnce) {
            mediaType = "video";
            mediaMessage = quotedMsg.videoMessage;
        } else if (quotedMsg.audioMessage?.viewOnce) {
            mediaType = "audio";
            mediaMessage = quotedMsg.audioMessage;
        } else {
            return sock.sendMessage(
                msg.key.remoteJid,
                { text: "‚ùå *Error:* Solo puedes usar este comando en mensajes de *ver una sola vez*." },
                { quoted: msg }
            );
        }

        // Enviar reacci√≥n mientras procesa
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚è≥", key: msg.key } 
        });

        // Descargar el multimedia de forma segura
        const mediaStream = await new Promise(async (resolve, reject) => {
            try {
                const stream = await downloadContentFromMessage(mediaMessage, mediaType);
                let buffer = Buffer.alloc(0);
                for await (const chunk of stream) {
                    buffer = Buffer.concat([buffer, chunk]);
                }
                resolve(buffer);
            } catch (err) {
                reject(null);
            }
        });

        if (!mediaStream || mediaStream.length === 0) {
            await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Error:* No se pudo descargar el archivo. Intenta de nuevo." }, { quoted: msg });
            return;
        }

        // Enviar el archivo descargado al grupo o chat
        let messageOptions = {
            mimetype: mediaMessage.mimetype,
        };

        if (mediaType === "image") {
            messageOptions.image = mediaStream;
        } else if (mediaType === "video") {
            messageOptions.video = mediaStream;
        } else if (mediaType === "audio") {
            messageOptions.audio = mediaStream;
        }

        await sock.sendMessage(msg.key.remoteJid, messageOptions, { quoted: msg });

        // Confirmar que el archivo ha sido enviado con √©xito
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando ver:", error);
        await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Error:* No se pudo recuperar el mensaje de *ver una sola vez*. Int√©ntalo de nuevo." }, { quoted: msg });
    }
    break;
}
        
case "perfil": {
    try {
        let userJid = null;

        // Enviar reacci√≥n antes de procesar el comando
        await sock.sendMessage(msg.key.remoteJid, {
            react: {
                text: "üì∏", // Emoji de c√°mara o cualquier otro que prefieras
                key: msg.key
            }
        });

        // Si no hay menciones, no hay participante y no hay texto, mostrar la gu√≠a de uso
        const hasMention = msg.message.extendedTextMessage?.contextInfo?.mentionedJid?.length > 0;
        const hasParticipant = msg.message.extendedTextMessage?.contextInfo?.participant;
        const cleanText = (text || "").trim();

        if (!hasMention && !hasParticipant && !cleanText) {
            return await sock.sendMessage(
                msg.key.remoteJid,
                {
                    text: `üîç *¬øC√≥mo usar el comando .perfil?*\n\n` +
                          `üìå *Ejemplos de uso:*\n\n` +
                          `üîπ *Para obtener la foto de perfil de alguien:* \n` +
                          `   - *Responde a su mensaje con:* _.perfil_\n\n` +
                          `üîπ *Para obtener la foto de perfil de un n√∫mero:* \n` +
                          `   - _.perfil +1 555-123-4567_\n\n` +
                          `üîπ *Para obtener la foto de perfil de un usuario mencionado:* \n` +
                          `   - _.perfil @usuario_\n\n` +
                          `‚ö†Ô∏è *Nota:* Algunos usuarios pueden tener su foto de perfil privada y el bot no podr√° acceder a ella.`
                },
                { quoted: msg }
            );
        }

        // Verifica si se mencion√≥ un usuario
        if (hasMention) {
            userJid = msg.message.extendedTextMessage.contextInfo.mentionedJid[0];
        } 
        // Verifica si se respondi√≥ a un mensaje
        else if (hasParticipant) {
            userJid = msg.message.extendedTextMessage.contextInfo.participant;
        } 
        // Verifica si se ingres√≥ un n√∫mero en 'text'
        else if (cleanText) {
            let number = cleanText.replace(/[^0-9]/g, ""); // Limpia el n√∫mero de caracteres no num√©ricos
            userJid = number + "@s.whatsapp.net";
        }

        // Si no se encontr√≥ un usuario v√°lido, termina
        if (!userJid) return;

        // Intentar obtener la imagen de perfil
        let ppUrl;
        try {
            ppUrl = await sock.profilePictureUrl(userJid, "image");
        } catch {
            ppUrl = "https://i.imgur.com/3J8M0wG.png"; // Imagen de perfil por defecto
        }

        // Enviar la imagen de perfil solo si se encontr√≥ un userJid
        await sock.sendMessage(
            msg.key.remoteJid,
            {
                image: { url: ppUrl },
                caption: `üñºÔ∏è *Foto de perfil de:* @${userJid.split("@")[0]}`,
                mentions: [userJid]
            },
            { quoted: msg }
        );

    } catch (error) {
        console.error("‚ùå Error en el comando perfil:", error);
        await sock.sendMessage(
            msg.key.remoteJid,
            { text: "‚ùå *Error:* No se pudo obtener la foto de perfil." },
            { quoted: msg }
        );
    }
    break;
}

case 'creador': {
    const ownerNumber = "15167096032@s.whatsapp.net"; // N√∫mero del due√±o en formato WhatsApp
    const ownerName = "Russell xz ü§ñ"; // Nombre del due√±o
    const messageText = "üìû *Contacto del Creador:*\n\nSi tienes dudas, preguntas o sugerencias sobre el bot, puedes contactar a mi creador.\n\nüìå *Nombre:* Russell\nüìå *N√∫mero:* +1 (516) 709-6032\nüí¨ *Mensaje directo:* Pulsa sobre el contacto y chatea con √©l.";

    // Enviar mensaje con el contacto del due√±o
    await sock.sendMessage(msg.key.remoteJid, {
        contacts: {
            displayName: ownerName,
            contacts: [{
                vcard: `BEGIN:VCARD\nVERSION:3.0\nFN:${ownerName}\nTEL;waid=${ownerNumber.split('@')[0]}:+${ownerNumber.split('@')[0]}\nEND:VCARD`
            }]
        }
    });

    // Enviar mensaje adicional con informaci√≥n
    await sock.sendMessage(msg.key.remoteJid, { text: messageText }, { quoted: msg });

    break;
}
           
            
            
case 'kill': {
    const searchKey = args.join(' ').trim().toLowerCase(); // Convertir clave a min√∫sculas
    if (!searchKey) {
        return sock.sendMessage(
            msg.key.remoteJid,
            { text: "‚ö†Ô∏è *Error:* Debes proporcionar una palabra clave para eliminar el multimedia. üóëÔ∏è" },
            { quoted: msg }
        );
    }

    // Verificar si el archivo guar.json existe
    if (!fs.existsSync("./guar.json")) {
        return sock.sendMessage(
            msg.key.remoteJid,
            { text: "‚ùå *Error:* No hay multimedia guardado a√∫n. Usa `.guar` para guardar algo primero." },
            { quoted: msg }
        );
    }

    // Leer archivo guar.json
    let guarData = JSON.parse(fs.readFileSync("./guar.json", "utf-8"));

    // Verificar si la palabra clave existe
    if (!guarData[searchKey]) {
        return sock.sendMessage(
            msg.key.remoteJid,
            { text: `‚ùå *Error:* No se encontr√≥ multimedia guardado con la clave: *"${searchKey}"*.` },
            { quoted: msg }
        );
    }

    const storedMedia = guarData[searchKey];
    const savedBy = storedMedia.savedBy;
    const senderId = msg.key.participant || msg.key.remoteJid;

    // Verificar si el usuario es Owner
    const isUserOwner = global.owner.some(owner => owner[0] === senderId.replace("@s.whatsapp.net", ""));
    const isSavedByOwner = global.owner.some(owner => owner[0] === savedBy.replace("@s.whatsapp.net", ""));

    // Verificar si el usuario es admin
    const isAdminUser = await isAdmin(sock, msg.key.remoteJid, senderId);

    // Reglas de eliminaci√≥n:
    if (isUserOwner) {
        // El owner puede eliminar cualquier multimedia
        delete guarData[searchKey];
    } else if (isAdminUser) {
        // Los admins pueden eliminar cualquier multimedia excepto los del owner
        if (isSavedByOwner) {
            return sock.sendMessage(
                msg.key.remoteJid,
                { text: "üö´ *Acceso denegado:* No puedes eliminar multimedia guardado por el Owner." },
                { quoted: msg }
            );
        }
        delete guarData[searchKey];
    } else {
        // Un usuario solo puede eliminar su propio multimedia
        if (savedBy !== senderId) {
            return sock.sendMessage(
                msg.key.remoteJid,
                { text: "‚õî *Acceso denegado:* Solo puedes eliminar los multimedia que t√∫ guardaste." },
                { quoted: msg }
            );
        }
        delete guarData[searchKey];
    }

    // Guardar los cambios en guar.json
    fs.writeFileSync("./guar.json", JSON.stringify(guarData, null, 2));

    return sock.sendMessage(
        msg.key.remoteJid,
        { text: `‚úÖ *Multimedia eliminado con √©xito:* "${searchKey}" ha sido eliminado. üóëÔ∏è` },
        { quoted: msg }
    );
}
break;
        
case 'clavelista': {
    // Verificar si el archivo guar.json existe
    if (!fs.existsSync("./guar.json")) {
        return sock.sendMessage(
            msg.key.remoteJid,
            { text: "‚ùå *Error:* No hay multimedia guardado a√∫n. Usa `.guar` para guardar algo primero." },
            { quoted: msg }
        );
    }

    // Leer archivo guar.json
    let guarData = JSON.parse(fs.readFileSync("./guar.json", "utf-8"));
    
    if (Object.keys(guarData).length === 0) {
        return sock.sendMessage(
            msg.key.remoteJid,
            { text: "üìÇ *Lista vac√≠a:* No hay palabras clave registradas." },
            { quoted: msg }
        );
    }

    // Construir el mensaje con la lista de palabras clave y qui√©n las guard√≥
    let listaMensaje = "üìú *Lista de palabras clave guardadas para sacar el multimedia:*\n\n";
    let mentions = [];

    for (let clave in guarData) {
        let user = guarData[clave].savedBy || "Desconocido"; // Evitar undefined
        if (user.includes("@s.whatsapp.net")) {
            user = user.replace("@s.whatsapp.net", ""); // Obtener solo el n√∫mero
            mentions.push(`${user}@s.whatsapp.net`);
        }

        listaMensaje += `üîπ *${clave}* ‚Üí Guardado por: @${user}\n`;
    }

    // Agregar explicaci√≥n de c√≥mo recuperar multimedia
    listaMensaje += `\nüí° *Para recuperar un archivo, usa el siguiente comando:*\n`;
    listaMensaje += `üì• *${global.prefix}g <palabra clave>*\n`;
    listaMensaje += `üõ†Ô∏è Usa *${global.prefix}kill <palabra>* para eliminar Multimedia guardados‚ú®Ô∏è.\n`;

    // Enviar la lista de palabras clave mencionando a los usuarios
    return sock.sendMessage(
        msg.key.remoteJid,
        {
            text: listaMensaje,
            mentions: mentions // Mencionar a los que guardaron multimedia
        },
        { quoted: msg }
    );
}
break;
        
        
case 'g': {
    const removeEmojis = (text) => text.replace(/[\u{1F300}-\u{1F6FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]/gu, ""); // Remover emojis
    const normalizeText = (text) => removeEmojis(text).toLowerCase().trim(); // Normalizar texto

    const searchKey = normalizeText(args.join(' ')); // Convertir clave a min√∫sculas y sin emojis
    if (!searchKey) {
        return sock.sendMessage(
            msg.key.remoteJid,
            { text: "‚ö†Ô∏è *Error:* Debes proporcionar una palabra clave para recuperar el multimedia. üîç" },
            { quoted: msg }
        );
    }

    // Verificar si el archivo guar.json existe
    if (!fs.existsSync("./guar.json")) {
        return sock.sendMessage(
            msg.key.remoteJid,
            { text: "‚ùå *Error:* No hay multimedia guardado a√∫n. Usa `.guar` para guardar algo primero." },
            { quoted: msg }
        );
    }

    // Leer archivo guar.json
    let guarData = JSON.parse(fs.readFileSync("./guar.json", "utf-8"));

    // Buscar la clave ignorando may√∫sculas, min√∫sculas y emojis
    const keys = Object.keys(guarData);
    const foundKey = keys.find(key => normalizeText(key) === searchKey);

    if (!foundKey) {
        return sock.sendMessage(
            msg.key.remoteJid,
            { text: `‚ùå *Error:* No se encontr√≥ multimedia guardado con la clave: *"${searchKey}"*.` },
            { quoted: msg }
        );
    }

    const storedMedia = guarData[foundKey];

    // Convertir la base64 nuevamente a Buffer
    const mediaBuffer = Buffer.from(storedMedia.buffer, "base64");

    // Verificar el tipo de archivo y enviarlo correctamente
    let messageOptions = {
        mimetype: storedMedia.mimetype,
    };

    if (storedMedia.mimetype.startsWith("image") && storedMedia.extension !== "webp") {
        messageOptions.image = mediaBuffer;
    } else if (storedMedia.mimetype.startsWith("video")) {
        messageOptions.video = mediaBuffer;
    } else if (storedMedia.mimetype.startsWith("audio")) {
        messageOptions.audio = mediaBuffer;
    } else if (storedMedia.mimetype.startsWith("application")) {
        messageOptions.document = mediaBuffer;
        messageOptions.fileName = `Archivo.${storedMedia.extension}`;
    } else if (storedMedia.mimetype === "image/webp" || storedMedia.extension === "webp") {
        // Si es un sticker (webp), se env√≠a como sticker
        messageOptions.sticker = mediaBuffer;
    } else {
        return sock.sendMessage(
            msg.key.remoteJid,
            { text: "‚ùå *Error:* No se pudo enviar el archivo. Tipo de archivo desconocido." },
            { quoted: msg }
        );
    }

    // Enviar el multimedia almacenado
    await sock.sendMessage(msg.key.remoteJid, messageOptions, { quoted: msg });

    break;
}
        
case 'guar': {
    if (!msg.message.extendedTextMessage || 
        !msg.message.extendedTextMessage.contextInfo || 
        !msg.message.extendedTextMessage.contextInfo.quotedMessage) {
        return sock.sendMessage(
            msg.key.remoteJid,
            { text: "‚ùå *Error:* Debes responder a un multimedia (imagen, video, audio, sticker, etc.) con una palabra clave para guardarlo. üìÇ" },
            { quoted: msg }
        );
    }

    const saveKey = args.join(' ').trim().toLowerCase(); // Clave en min√∫sculas
    // Verifica que haya al menos una letra o n√∫mero en la palabra clave
if (!/[a-zA-Z0-9]/.test(saveKey)) {
  return sock.sendMessage(
    msg.key.remoteJid,
    { text: "‚ùå *Error:* La palabra clave debe incluir al menos una letra o n√∫mero, no solo emojis o s√≠mbolos." },
    { quoted: msg }
  );
}

    // Verificar si el archivo guar.json existe, si no, crearlo
    if (!fs.existsSync("./guar.json")) {
        fs.writeFileSync("./guar.json", JSON.stringify({}, null, 2));
    }

    // Leer archivo guar.json
    let guarData = JSON.parse(fs.readFileSync("./guar.json", "utf-8"));

    // Verificar si la palabra clave ya existe
    if (guarData[saveKey]) {
        return sock.sendMessage(
            msg.key.remoteJid,
            { text: `‚ö†Ô∏è *Aviso:* La palabra clave *"${saveKey}"* ya est√° en uso. Usa otra diferente. ‚ùå` },
            { quoted: msg }
        );
    }

    const quotedMsg = msg.message.extendedTextMessage.contextInfo.quotedMessage;
    let mediaType, mediaMessage, fileExtension;

    if (quotedMsg.imageMessage) {
        mediaType = "image";
        mediaMessage = quotedMsg.imageMessage;
        fileExtension = "jpg";
    } else if (quotedMsg.videoMessage) {
        mediaType = "video";
        mediaMessage = quotedMsg.videoMessage;
        fileExtension = "mp4";
    } else if (quotedMsg.audioMessage) {
        mediaType = "audio";
        mediaMessage = quotedMsg.audioMessage;
        fileExtension = "mp3";
    } else if (quotedMsg.stickerMessage) {
        mediaType = "sticker";
        mediaMessage = quotedMsg.stickerMessage;
        fileExtension = "webp"; // Stickers son .webp
    } else if (quotedMsg.documentMessage) {
        mediaType = "document";
        mediaMessage = quotedMsg.documentMessage;
        fileExtension = mediaMessage.mimetype.split("/")[1] || "bin"; // Obtener la extensi√≥n real
    } else {
        return sock.sendMessage(
            msg.key.remoteJid,
            { text: "‚ùå *Error:* Solo puedes guardar im√°genes, videos, audios, stickers y documentos. üìÇ" },
            { quoted: msg }
        );
    }

    // Descargar el multimedia
    const mediaStream = await downloadContentFromMessage(mediaMessage, mediaType);
    let mediaBuffer = Buffer.alloc(0);
    for await (const chunk of mediaStream) {
        mediaBuffer = Buffer.concat([mediaBuffer, chunk]);
    }

    // Guardar multimedia con la palabra clave y la informaci√≥n del usuario que lo guard√≥
    guarData[saveKey] = {
        buffer: mediaBuffer.toString("base64"), // Convertir a base64
        mimetype: mediaMessage.mimetype,
        extension: fileExtension,
        savedBy: msg.key.participant || msg.key.remoteJid, // N√∫mero del usuario que guard√≥ el archivo
    };

    // Escribir en guar.json
    fs.writeFileSync("./guar.json", JSON.stringify(guarData, null, 2));

    return sock.sendMessage(
        msg.key.remoteJid,
        { text: `‚úÖ *Listo:* El multimedia se ha guardado con la palabra clave: *"${saveKey}"*. üéâ` },
        { quoted: msg }
    );
}
break;
        
                        

        case "cerrargrupo":
            try {
                if (!msg.key.remoteJid.includes("@g.us")) {
                    return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Este comando solo funciona en grupos.*" }, { quoted: msg });
                }

                const chat = await sock.groupMetadata(msg.key.remoteJid);
                const senderId = msg.key.participant.replace(/@s.whatsapp.net/, '');
                const isOwner = global.owner.some(o => o[0] === senderId);
                const groupAdmins = chat.participants.filter(p => p.admin);
                const isAdmin = groupAdmins.some(admin => admin.id === msg.key.participant);

                if (!isAdmin && !isOwner) {
                    return sock.sendMessage(
                        msg.key.remoteJid,
                        { text: "üö´ *No tienes permisos para cerrar el grupo.*\n‚ö†Ô∏è *Solo administradores o el due√±o del bot pueden usar este comando.*" },
                        { quoted: msg }
                    );
                }

                await sock.groupSettingUpdate(msg.key.remoteJid, 'announcement');

                return sock.sendMessage(
                    msg.key.remoteJid,
                    { text: "üîí *El grupo ha sido cerrado.*\nüì¢ *Solo los administradores pueden enviar mensajes ahora.*" },
                    { quoted: msg }
                );

            } catch (error) {
                console.error('‚ùå Error en el comando cerrargrupo:', error);
                return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al intentar cerrar el grupo.*" }, { quoted: msg });
            }
            break;

        case "abrirgrupo":
            try {
                if (!msg.key.remoteJid.includes("@g.us")) {
                    return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Este comando solo funciona en grupos.*" }, { quoted: msg });
                }

                const chat = await sock.groupMetadata(msg.key.remoteJid);
                const senderId = msg.key.participant.replace(/@s.whatsapp.net/, '');
                const isOwner = global.owner.some(o => o[0] === senderId);
                const groupAdmins = chat.participants.filter(p => p.admin);
                const isAdmin = groupAdmins.some(admin => admin.id === msg.key.participant);

                if (!isAdmin && !isOwner) {
                    return sock.sendMessage(
                        msg.key.remoteJid,
                        { text: "üö´ *No tienes permisos para abrir el grupo.*\n‚ö†Ô∏è *Solo administradores o el due√±o del bot pueden usar este comando.*" },
                        { quoted: msg }
                    );
                }

                await sock.groupSettingUpdate(msg.key.remoteJid, 'not_announcement');

                return sock.sendMessage(
                    msg.key.remoteJid,
                    { text: "üîì *El grupo ha sido abierto.*\nüì¢ *Todos los miembros pueden enviar mensajes ahora.*" },
                    { quoted: msg }
                );

            } catch (error) {
                console.error('‚ùå Error en el comando abrirgrupo:', error);
                return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå *Ocurri√≥ un error al intentar abrir el grupo.*" }, { quoted: msg });
            }
            break;

case "kick": {
  try {
    const chatId = msg.key.remoteJid;
    const sender = (msg.key.participant || msg.participant || msg.key.remoteJid).replace(/[^0-9]/g, "");
    const isGroup = chatId.endsWith("@g.us");

    // Reacci√≥n inicial
    await sock.sendMessage(chatId, { react: { text: "üõë", key: msg.key } });

    if (!isGroup) {
      return await sock.sendMessage(chatId, { text: "‚ùå *Este comando solo funciona en grupos.*" }, { quoted: msg });
    }

    const metadata = await sock.groupMetadata(chatId);
    const groupAdmins = metadata.participants.filter(p => p.admin);
    const isSenderAdmin = groupAdmins.some(p => p.id.includes(sender));
    const isSenderOwner = isOwner(sender);

    if (!isSenderAdmin && !isSenderOwner) {
      return await sock.sendMessage(chatId, {
        text: "üö´ *Solo los administradores o el owner pueden expulsar miembros del grupo.*"
      }, { quoted: msg });
    }

    // Obtener usuario a expulsar
    let userToKick = null;

    if (msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.length > 0) {
      userToKick = msg.message.extendedTextMessage.contextInfo.mentionedJid[0];
    } else if (msg.message?.extendedTextMessage?.contextInfo?.participant) {
      userToKick = msg.message.extendedTextMessage.contextInfo.participant;
    }

    if (!userToKick) {
      return await sock.sendMessage(chatId, {
        text: "‚ö†Ô∏è *Debes mencionar o responder al usuario que deseas expulsar.*"
      }, { quoted: msg });
    }

    const isTargetAdmin = groupAdmins.some(p => p.id === userToKick);
    const botId = sock.user.id;

    if (isTargetAdmin) {
      return await sock.sendMessage(chatId, {
        text: "‚ùå *No se puede expulsar a otro administrador.*"
      }, { quoted: msg });
    }

    if (userToKick === botId) {
      return await sock.sendMessage(chatId, {
        text: "‚ùå *No puedo expulsarme a m√≠ mismo.*"
      }, { quoted: msg });
    }

    await sock.groupParticipantsUpdate(chatId, [userToKick], "remove");

    await sock.sendMessage(chatId, {
      text: `üö∑ *El usuario @${userToKick.split("@")[0]} ha sido expulsado del grupo.*`,
      mentions: [userToKick]
    }, { quoted: msg });

  } catch (error) {
    console.error("‚ùå Error en el comando kick:", error);
    await sock.sendMessage(msg.key.remoteJid, {
      text: "‚ùå *Ocurri√≥ un error al intentar expulsar al usuario.*"
    }, { quoted: msg });
  }
  break;
}
        
        
case "instagram":
case "ig":
    if (!text) return sock.sendMessage(msg.key.remoteJid, { 
        text: `Ejemplo de uso:\n${global.prefix + command} https://www.instagram.com/p/CCoI4DQBGVQ/` 
    }, { quoted: msg });

    try {
        // ‚è≥ Reacci√≥n de carga mientras se procesa
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚è≥', key: msg.key }
        });

        const axios = require('axios');
        const apiUrl = `https://api.dorratz.com/igdl?url=${text}`;
        const response = await axios.get(apiUrl);
        const { data } = response.data;

        if (!data || data.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { 
                text: "‚ùå No se pudo obtener el video de Instagram." 
            });
        }

        // üìú Construcci√≥n del mensaje con marca de agua
        const caption = `üé¨ *Video de Instagram*\n\n> üçßSolicitud procesada por api.dorratz.com\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n¬© Azura Ultra & Cortana`;

        // üì© Enviar cada video descargado con la marca de agua
        for (let item of data) {
            await sock.sendMessage(msg.key.remoteJid, { 
                video: { url: item.url }, 
                caption: caption 
            }, { quoted: msg });
        }

        // ‚úÖ Confirmaci√≥n con reacci√≥n de √©xito
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error(error);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå Ocurri√≥ un error al procesar el enlace de Instagram." 
        }, { quoted: msg });
    }
    break;
        
case "tiktok":
case "tt":
    if (!text) {
        return sock.sendMessage(msg.key.remoteJid, {
            text: `‚ö†Ô∏è *Ejemplo de uso:*\nüìå ${global.prefix + command} https://vm.tiktok.com/ZMjdrFCtg/`
        });
    }

    if (!isUrl(args[0]) || !args[0].includes('tiktok')) {
        return sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Enlace de TikTok inv√°lido.*" 
        }, { quoted: msg });
    }

    try {
        // ‚è±Ô∏è Reacci√≥n de carga mientras se procesa el comando
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: '‚è±Ô∏è', key: msg.key } 
        });

        const axios = require('axios');
        const response = await axios.get(`https://api.dorratz.com/v2/tiktok-dl?url=${args[0]}`);

        if (!response.data || !response.data.data || !response.data.data.media) {
            throw new Error("La API no devolvi√≥ un video v√°lido.");
        }

        const videoData = response.data.data;
        const videoUrl = videoData.media.org;
        const videoTitle = videoData.title || "Sin t√≠tulo";
        const videoAuthor = videoData.author.nickname || "Desconocido";
        const videoDuration = videoData.duration ? `${videoData.duration} segundos` : "No especificado";
        const videoLikes = videoData.like || "0";
        const videoComments = videoData.comment || "0";

        // üìú Mensaje con la informaci√≥n del video
        let mensaje = `üé• *Video de TikTok* üé•\n\n`;
        mensaje += `üìå *T√≠tulo:* ${videoTitle}\n`;
        mensaje += `üë§ *Autor:* ${videoAuthor}\n`;
        mensaje += `‚è±Ô∏è *Duraci√≥n:* ${videoDuration}\n`;
        mensaje += `‚ù§Ô∏è *Likes:* ${videoLikes} | üí¨ *Comentarios:* ${videoComments}\n\n`;
        
        // üì¢ Agregar la API utilizada y marca de agua con buen formato
        mensaje += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüçß *API utilizada:* https://api.dorratz.com\n`;
        mensaje += `¬© Azura Ultra & Cortana`;

        // üì© Enviar el video con la informaci√≥n
        await sock.sendMessage(msg.key.remoteJid, {
            video: { url: videoUrl },
            caption: mensaje
        }, { quoted: msg });

        // ‚úÖ Reacci√≥n de √©xito
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error("‚ùå Error en el comando .tiktok:", error.message);
        await sock.sendMessage(msg.key.remoteJid, { 
            text: "‚ùå *Ocurri√≥ un error al procesar el enlace de TikTok.*\nüîπ _Int√©ntalo m√°s tarde._" 
        }, { quoted: msg });

        // ‚ùå Reacci√≥n de error
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚ùå", key: msg.key } 
        });
    }
    break;
        
case "facebook":
case "fb":
    if (!text) return sock.sendMessage(msg.key.remoteJid, { 
        text: `Ejemplo de uso:\n${global.prefix + command} https://fb.watch/ncowLHMp-x/` 
    }, { quoted: msg });

    if (!text.match(/www.facebook.com|fb.watch/g)) {
        return sock.sendMessage(msg.key.remoteJid, {
            text: `‚ùå Enlace de Facebook inv√°lido.\nEjemplo de uso:\n${global.prefix + command} https://fb.watch/ncowLHMp-x/`
        });
    }

    try {
        // ‚è≥ Reacci√≥n de carga mientras se procesa
        await sock.sendMessage(msg.key.remoteJid, {
            react: { text: '‚è≥', key: msg.key }
        });

        const axios = require('axios');
        const response = await axios.get(`https://api.dorratz.com/fbvideo?url=${encodeURIComponent(text)}`);
        const results = response.data;

        if (!results || results.length === 0) {
            return sock.sendMessage(msg.key.remoteJid, { text: "‚ùå No se pudo obtener el video." });
        }

        // üìú Construcci√≥n del mensaje con resoluciones disponibles
        const message = `Resoluciones disponibles:\n${results.map((res) => `- ${res.resolution}`).join('\n')}\n\nüî• Enviado en 720p\n\n> üçß Solicitud procesada por api.dorratz.com\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n¬© Azura Ultra & Cortana`;

        // üì© Enviar el video con la marca de agua
        await sock.sendMessage(msg.key.remoteJid, {
            video: { url: results[0].url }, // Se env√≠a en 720p por defecto
            caption: message
        }, { quoted: msg });

        // ‚úÖ Confirmaci√≥n con reacci√≥n de √©xito
        await sock.sendMessage(msg.key.remoteJid, { 
            react: { text: "‚úÖ", key: msg.key } 
        });

    } catch (error) {
        console.error(error);
        await sock.sendMessage(msg.key.remoteJid, {
            text: "‚ùå Ocurri√≥ un error al procesar el enlace de Facebook."
        });
    }
    break;
    }
}

module.exports = { handleCommand };

function loadSubPlugins() {
  const plugins = [];
  const pluginDir = path.join(__dirname, 'plugins2');
  if (!fs.existsSync(pluginDir)) return plugins;
  const files = fs.readdirSync(pluginDir).filter(f => f.endsWith('.js'));
  for (const file of files) {
    const plugin = require(path.join(pluginDir, file));
    if (plugin && plugin.command) plugins.push(plugin);
  }
  return plugins;
}

const subPlugins = loadSubPlugins();

async function handleSubCommand(sock, msg, command, args) {
  const lowerCommand = command.toLowerCase();
  const text = args.join(" ");
  const plugin = subPlugins.find(p => p.command.includes(lowerCommand));
  if (plugin) {
    return plugin(msg, {
      conn: sock,
      text,
      args,
      command: lowerCommand,
      usedPrefix: "."
    });
  }
}


//----------------------------------     
let file = require.resolve(__filename)
fs.watchFile(file, () => {
fs.unwatchFile(file)
console.log(chalk.redBright(`Update ${__filename}`))
delete require.cache[file]
require(file)
})
